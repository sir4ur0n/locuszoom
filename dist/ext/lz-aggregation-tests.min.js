/*! Locuszoom 0.13.4 */
var LzAggregationTests;(()=>{"use strict";var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{default:()=>n});const r=raremetal;function a(e){const t=e.Adapters.get("BaseAdapter"),a=e.Adapters.get("BaseApiAdapter"),n=e.Adapters.get("ConnectorSource");e.Adapters.add("AggregationTestSourceLZ",class extends a{getURL(e,t,r){const a=e.aggregation_tests||{};t.header||(t.header={}),t.header.aggregation_genoset_id=a.genoset_id||null,t.header.aggregation_genoset_build=a.genoset_build||null,t.header.aggregation_phenoset_id=a.phenoset_id||null,t.header.aggregation_pheno=a.pheno||null,t.header.aggregation_calcs=a.calcs||{};const n=a.masks||[];return t.header.aggregation_masks=n,t.header.aggregation_mask_ids=n.map((function(e){return e.name})),this.url}getCacheKey(e,t,r){return this.getURL(e,t,r),JSON.stringify({chrom:e.chr,start:e.start,stop:e.end,genotypeDataset:t.header.aggregation_genoset_id,phenotypeDataset:t.header.aggregation_phenoset_id,phenotype:t.header.aggregation_pheno,samples:"ALL",genomeBuild:t.header.aggregation_genoset_build,masks:t.header.aggregation_mask_ids})}fetchRequest(e,t,r){const a=this.getURL(e,t,r),n=this.getCacheKey(e,t,r);return fetch(a,{method:"POST",body:n,headers:{"Content-Type":"application/json"}}).then((e=>{if(!e.ok)throw new Error(e.statusText);return e.text()})).then((function(e){const t="string"==typeof e?JSON.parse(e):e;if(t.error)throw new Error(t.error);return t}))}annotateData(e,t){if(!e.groups)return{groups:[],variants:[]};e.groups=e.groups.filter((function(e){return"GENE"===e.groupType}));const a=r.helpers.parsePortalJSON(e);let n=a[0];const o=a[1];n=n.byMask(t.header.aggregation_mask_ids);const s=t.header.aggregation_calcs;if(!s||0===Object.keys(s).length)return{variants:[],groups:[],results:[]};return new r.helpers.PortalTestRunner(n,o,s).toJSON().then((function(e){const r=t.header.aggregation_masks.reduce((function(e,t){return e[t.name]=t.description,e}),{});return e.data.groups.forEach((function(e){e.mask_name=r[e.mask]})),e.data})).catch((function(e){throw console.error(e),new Error("Failed to calculate aggregation test results")}))}normalizeResponse(e){return e}combineChainBody(e,t){return t.body}}),e.Adapters.add("AssocFromAggregationLZ",class extends t{constructor(e){if(!e||!e.from)throw"Must specify the name of the source that contains association data";super(...arguments)}parseInit(e){super.parseInit(e),this._from=e.from}getRequest(e,t,r){if(t.discrete&&!t.discrete[this._from])throw`${this.constructor.SOURCE_NAME} cannot be used before loading required data for: ${this._from}`;return Promise.resolve(JSON.parse(JSON.stringify(t.discrete[this._from].variants)))}normalizeResponse(e){const t=new RegExp("(?:chr)?(.+):(\\d+)_?(\\w+)?/?([^_]+)?_?(.*)?");return e.map((e=>{const r=e.variant.match(t);return{variant:e.variant,chromosome:r[1],position:+r[2],ref_allele:r[3],ref_allele_freq:1-e.altFreq,log_pvalue:-Math.log10(e.pvalue)}})).sort(((e,t)=>(e=e.variant)<(t=t.variant)?-1:e>t?1:0))}}),e.Adapters.add("GeneAggregationConnectorLZ",class extends n{_getRequiredSources(){return["gene_ns","aggregation_ns"]}combineChainBody(e,t){const r=this._source_name_mapping.aggregation_ns,a=this._source_name_mapping.gene_ns,n=t.discrete[r],o=t.discrete[a],s={};return n.groups.forEach((function(e){Object.prototype.hasOwnProperty.call(s,e.group)||(s[e.group]=[]),s[e.group].push(e.pvalue)})),o.forEach((function(e){const t=e.gene_name,r=s[t];r&&(e.aggregation_best_pvalue=Math.min.apply(null,r))})),o}})}"undefined"!=typeof LocusZoom&&LocusZoom.use(a);const n=a;LzAggregationTests=t.default})();
//# sourceMappingURL=lz-aggregation-tests.min.js.map