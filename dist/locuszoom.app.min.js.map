{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/webpack/runtime/define property getters","webpack://[name]/webpack/runtime/hasOwnProperty shorthand","webpack://[name]/webpack/runtime/make namespace object","webpack://[name]/./esm/version.js","webpack://[name]/./esm/registry/base.js","webpack://[name]/./esm/data/adapters.js","webpack://[name]/./esm/registry/adapters.js","webpack://[name]/external \"d3\"","webpack://[name]/./esm/components/constants.js","webpack://[name]/./esm/helpers/transforms.js","webpack://[name]/./esm/registry/transforms.js","webpack://[name]/./esm/data/field.js","webpack://[name]/./esm/helpers/jsonpath.js","webpack://[name]/./esm/helpers/layouts.js","webpack://[name]/./esm/data/requester.js","webpack://[name]/./esm/helpers/common.js","webpack://[name]/./esm/components/toolbar/widgets.js","webpack://[name]/./esm/registry/widgets.js","webpack://[name]/./esm/components/toolbar/index.js","webpack://[name]/./esm/components/legend.js","webpack://[name]/./esm/components/panel.js","webpack://[name]/./esm/helpers/display.js","webpack://[name]/./esm/components/plot.js","webpack://[name]/./esm/registry/matchers.js","webpack://[name]/./esm/helpers/scalable.js","webpack://[name]/./esm/registry/scalable.js","webpack://[name]/./esm/components/data_layer/base.js","webpack://[name]/./esm/components/data_layer/annotation_track.js","webpack://[name]/./esm/components/data_layer/highlight_regions.js","webpack://[name]/./esm/components/data_layer/arcs.js","webpack://[name]/./esm/components/data_layer/genes.js","webpack://[name]/./esm/components/data_layer/line.js","webpack://[name]/./esm/components/data_layer/scatter.js","webpack://[name]/./esm/helpers/render.js","webpack://[name]/./esm/registry/data_layers.js","webpack://[name]/./esm/layouts/index.js","webpack://[name]/./esm/registry/layouts.js","webpack://[name]/./esm/data/sources.js","webpack://[name]/./esm/index.js"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","RegistryBase","this","_items","Map","name","has","Error","item","override","set","delete","Array","from","keys","ClassRegistry","args","parent_name","source_name","overrides","console","warn","arguments","length","base","sub","assign","add","validateBuildSource","class_name","build","source","includes","BaseAdapter","config","_enableCache","_cachedKey","_cache_pos_start","_cache_pos_end","__dependentSource","parseInit","params","state","chain","fields","getURL","cache_pos_chr","chr","start","end","url","fetch","then","response","ok","statusText","text","req","cacheKey","getCacheKey","Promise","resolve","_cachedResponse","fetchRequest","data","isArray","N","every","constructor","records","i","record","j","push","outnames","trans","fieldFound","k","map","output_record","val","forEach","v","resp","source_id","discrete","json","JSON","parse","normalizeResponse","standardized","annotateData","extractFields","one_source_body","combineChainBody","new_body","header","body","preGetData","pre","getRequest","parseResponse","BaseApiAdapter","super","AssociationLZ","id_field","x","unshift","analysis","sort","a","b","LDServer","join","dataFields","id","position","position_field","pvalue","pvalue_field","_names_","names","nameMatch","arr","regexes","regex","m","filter","match","id_match","RegExp","isrefvarin","isrefvarout","ldin","ldout","refVar","findRequestedFields","ldrefvar","findMergeFields","columns","pval_field","cmp","test","extremeVal","extremeIdx","findExtremeValue","original","chrom","pos","ref","alt","refVar_formatted","genome_build","ld_source","population","ld_pop","method","refVar_raw","getRefvar","encodeURIComponent","_","reqFields","corrField","rsquare","left","right","lfield","rfield","position2","leftJoin","refvar","idfield","outrefname","outldname","tagRefVariant","combined","chainRequests","payload","concat","next","GwasCatalogLZ","source_query","posMatch","find","decider","decider_out","indexOf","n_matches","fn","outn","chainNames","catNames","GeneLZ","GeneConstraintLZ","unique_gene_names","reduce","acc","gene","gene_name","query","replace","stringify","headers","catch","err","alias","constraint","toString","parseFloat","toFixed","RecombLZ","SOURCE_NAME","StaticSource","_data","PheWASLZ","variant","ConnectorSource","sources","_source_name_mapping","specified_ids","_getRequiredSources","ns","chain_source_id","registry","type","entries","d3","STATUSES","verbs","adjectives","log10","isNaN","Math","log","LN10","neglog10","logtoscinotation","exp","ceil","diff","pow","scinotation","abs","floor","toExponential","htmlescape","s","is_numeric","urlencode","template_string","funcs","substring","func","_collectTransforms","Field","field","parts","exec","full_name","namespace","transformations","split","transform","transforms","extra","_applyTransformations","ATTR_REGEX","EXPR_REGEX","get_next_token","q","substr","attr","depth","e","attrs","get_item_at_deep_path","path","parent","tokens_to_keys","selectors","sel","remaining_selectors","slice","paths","d","undefined","p","__","subject","uniqPaths","elem","values","localeCompare","_query","matches","items","get_items_from_tokens","normalize_query","selector","tokenize","sqrt3","sqrt","triangledown","context","size","y","moveTo","lineTo","closePath","applyNamespaces","element","default_namespace","default","re","resolved_namespace","r","merge","namespaced_element","namespaced_property","property","custom_layout","default_layout","custom_type","default_type","deepCopy","nameToSymbol","shape","factory_name","charAt","toUpperCase","renameField","layout","old_name","new_name","warn_transforms","this_type","escaped","filter_regex","match_val","mutate_attrs","value_or_callable","value_or_callback","old_value","new_value","mutate","query_attrs","_sources","requests","raw","__split_requests","request_handles","getData","ret","generateCurtain","showing","content_selector","hide_delay","show","content","css","curtain","parent_plot","svg","node","parentNode","insert","append","html","on","hide","update","clearTimeout","applyStyles","page_origin","_getPageOrigin","height","_total_height","style","width","delay","setTimeout","remove","generateLoader","progress_selector","cancel_selector","loader","percent","loader_boundrect","getBoundingClientRect","min","max","animate","classed","setPercentCompleted","selection","styles","BaseWidget","color","parent_panel","parent_svg","button","persist","group_position","initialize","status","menu","shouldPersist","force","destroy","Button","parent_toolbar","tag","title","permanent","outer_selector","inner_selector","scroll_position","hidden","getBaseId","scrollTop","populate","page_scroll_top","document","documentElement","container_offset","getContainerOffset","toolbar_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","top","bottom","base_max_width","container_max_width","content_max_width","base_max_height","setPopulate","menu_populate_function","setOnclick","highlight","bool","Boolean","setStatus","onmouseover","onmouseout","onclick","getClass","preUpdate","postUpdate","Title","div_selector","title_selector","subtitle","RegionScale","positionIntToString","class","FilterField","_data_layer","data_layers","layer_name","_event_name","custom_event_name","_field","_field_display_html","field_display_html","_operator","operator","_filter_id","_data_type","data_type","_value_selector","filters","result","index","_getTarget","splice","_clearFilter","emit","filter_id","Number","input_size","timer","apply","debounce","_getValue","_setFilter","render","DownloadSVG","_filename","filename","_button_html","button_html","_button_title","button_title","setColor","setHtml","setTitle","setOnMouseover","_getBlobUrl","old","URL","revokeObjectURL","setOnMouseout","root","ancestor_pattern","extractedCSSText","styleSheets","cssRules","rule","selectorText","cssText","styleElement","createElement","setAttribute","innerHTML","refNode","hasChildNodes","children","insertBefore","rescale","copy","cloneNode","selectAll","each","dy","serializer","XMLSerializer","_getDimensions","_appendCSS","_getCSS","serializeToString","_generateSVG","markup","blob","Blob","createObjectURL","DownloadPNG","svg_url","canvas","getContext","reject","image","Image","onload","drawImage","toBlob","png","src","RemovePanel","suppress_confirm","confirm","panel","toolbar","removePanel","MovePanelUp","is_at_top","y_index","disable","moveUp","MovePanelDown","is_at_bottom","panel_ids_by_y_index","moveDown","ShiftRegion","step","applyState","ZoomRegion","can_zoom","current_region_scale","max_region_scale","min_region_scale","new_region_scale","delta","Menu","menu_html","ResizeToData","scaleHeightToData","ToggleLegend","legend","DisplayOptions","allowed_fields","fields_whitelist","dataLayer","dataLayerLayout","defaultConfig","configSlot","_selected_item","uniqueID","random","table","menuLayout","renderRow","display_name","display_options","row_id","row","radioId","field_name","has_option","choice","defaultName","default_config_display_name","options","display","SetState","state_field","show_selected","new_state","choice_name","choice_value","Toolbar","widgets","hide_timeout","dashboard","components","widget","create","error","panel_boundaries","dragging","interaction","orientation","origin","padding","label_size","Legend","background_rect","elements","elements_group","group","line_height","data_layer_ids_by_z_index","reverse","label_x","label_y","shape_factory","path_y","radius","PI","label","bcr","right_x","pad_from_bottom","pad_from_right","min_height","margin","background_click","cliparea","axes","y1","y2","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","y1_linked","y2_linked","show_loading_indicator","Panel","panels","generateID","initialized","layout_idx","state_id","data_promises","x_scale","y1_scale","y2_scale","x_extent","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","event_hooks","initializeLayout","event","hook","theseHooks","hookMatch","eventData","bubble","eventContext","sourceID","target","hookToRun","y_axis","axis","data_layer","z_index","dlid","idx","data_layer_layout","destroyAllTooltips","container","applyDataLayerZIndexesToDataLayerLayouts","setAllElementStatus","clipRect","inner_border","generateExtents","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","panel_id","linked_panel_ids","anchor","scalar","zooming","current_extent_size","current_scaled_extent_size","round","invert","zoom_factor","scale","potential_extent_size","new_extent_size","center","offset_ratio","new_x_extent_start","dragged_x","start_x","y_shifted","dragged_y","start_y","domain","renderAxis","zoom_handler","_canInteract","coords","getLinkedPanelIds","data_layer_id","draw","show_immediately","plot_origin","setDimensions","setOrigin","setMargin","x_range","y1_range","y2_range","addDataLayer","base_id","clipPath","addBasicLoader","clearSelections","x_axis","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","startDrag","select","applyPanelYIndexesToPanelLayouts","positionPanels","reMap","message","all","decoupled","getAxisExtent","extent","ticks","baseTickConfig","self","nextLayer","getTicks","itemConfig","clip_range","target_tick_count","parseInt","min_n","shrink_sml","high_u_bias","u5_bias","c","base_toFixed","unit","pop","prettyTicks","canRender","axis_params","label_offset","label_rotate","generateTicks","ticksAreAllNumbers","axis_factory","tickPadding","tickValues","tick_format","tickFormat","t","tick_selector","parseFields","tick_mouseover","focus","cursor","target_height","dh","getAbsoluteDataHeight","toggle","verb","adjective","antiverb","min_width","responsive_resize","mouse_guide","Plot","datasource","remap_promises","_base_layout","lzd","_external_listeners","these_hooks","anyEventData","event_name","panel_layout","panelId","mode","panelsList","pid","layer","layer_state","_setDefaultState","clearPanelData","success_callback","opts","error_callback","onerror","listener","new_data","state_changes","mods","attempted_scale","validated_region","attempted_midpoint","temp","_updateStatePosition","loading_data","applyAllElementStatus","some","tracker","registered_events","listeners","removeEventListener","lastElementChild","removeChild","outerHTML","bounding_client_rect","x_offset","scrollLeft","y_offset","offset","offsetParent","offsetTop","offsetLeft","clientRect","resize_listener","rescaleSVG","window","addEventListener","trackExternalListener","load_listener","addPanel","height_scaling_factor","panel_width","panel_height","final_height","x_linked_margins","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","corner_selector","panel_idx","panel_resize_drag","this_panel","original_panel_height","panel_height_change","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","plot_page_origin","panel_page_origin","mouseout_mouse_guide","mousemove_mouse_guide","mouseup","stopDrag","mousemove","body_node","to_send","active","emitted_by","lz_match_value","client_rect","overrideAxisLayout","axis_number","axis_layout","ceiling","lower_buffer","upper_buffer","min_extent","y_axis_number","suffix","exp_symbols","0","3","6","9","places_exp","min_exp","places","positionStringToInt","suffixre","mult","tokens","condition","variable","branch","close","astify","token","shift","dest","else","ast","cache","render_node","item_value","target_value","if_value","parameters","input","field_value","numerical_bin","breaks","null_value","threshold","prev","curr","categorical_bin","categories","ordinal_cycle","stable_choice","_cache","max_cache_size","clear","hash","String","charCodeAt","interpolate","nullval","upper_idx","brk","normalized_input","isFinite","tooltip","tooltip_positioning","behaviors","BaseDataLayer","_base_id","_filter_func","tooltips","global_statuses","resortDataLayers","getElementId","extra_fields","axis_config","id_key","for","element_id","empty","field_to_match","receive","match_function","broadcast_value","field_resolver","lz_is_match","toHTML","getDataLayer","getPanel","getPlot","deselect","unselectElement","applyCustomDataMethods","option_layout","element_data","data_index","resolveScalableParameter","scale_function","f","getElementAnnotation","dimension","axis_name","data_extent","_getDataExtent","original_extent_span","range_min","range_max","y_scale","y_extent","x_min","x_max","y_min","y_max","plot_layout","layer_layout","tooltip_box","data_layer_height","data_layer_width","x_center","y_center","tooltip_top","tooltip_left","arrow_type","arrow_top","arrow_left","placement","arrow_size","offset_right","offset_left","arrow","filter_rules","array","is_match","test_func","bind","status_flags","Set","updateTooltip","positionTooltip","closable","destroyTooltip","element_or_id","temporary","_getTooltipPosition","_drawTooltip","first_time","resolveStatus","statuses","directive","previousValue","currentValue","sub_status","sub_operator","show_directive","and","hide_directive","antistatus","show_resolved","hide_resolved","has_tooltip","createTooltip","exclusive","get_element_id_error","element_status_node_id","getElementStatusNodeId","added_status","showOrHideTooltip","is_selected","value_to_broadcast","send","setElementStatus","getElementById","event_match","executeBehaviors","requiredKeyStates","datum","behavior","action","current_status_boolean","href","open","location","panel_origin","positionAllTooltips","applyDataMethods","hitarea_width","AnnotationTrack","_hitareas_group","_visible_lines_group","track_data","_applyFilters","hit_areas_selection","_getX","x_left","left_node","left_node_x_center","enter","crds","exit","applyBehaviors","fill_opacity","regions","start_field","end_field","merge_field","HighlightRegions","cur_item","prev_item","new_start","new_end","_mergeNodes","fill","Arcs","_make_line","x1","field1","x2","field2","xmid","curve","line","hitareas","stroke","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","Genes","transcript_idx","tracks","gene_track_index","1","_getLabelWidth","font_size","temp_text","label_width","getBBox","gene_id","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","track","potential_track","collision_on_potential_track","placed_gene","min_start","exons","assignTracks","bboxes","getTrackHeight","boundaries","labels","strand","exon_id","clickareas","gene_bbox_id","gene_bbox","Line","x_field","y_field","y0","path_class","global_status","default_orthogonal_layout","OrthogonalLine","default_y","point_size","point_shape","coalesce","max_points","x_gap","y_gap","Scatter","spacing","handle_lines","lines","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dal","label_lines","nodes","dax","abound","bbound","seperate_iterations","again","db","adjust","new_a_y","new_b_y","min_y","max_y","label_elements","separate_labels","xcs","ycs","final_data","x_start","y_start","current_group","_combine","_start_run","in_combine_region","coalesce_scatter_points","label_data","label_groups","style_class","groups_enter","flip_labels","item_data","CategoryScatter","_categories","xField","category_field","sourceData","ak","bk","av","toLowerCase","bv","uniqueCategories","category","bounds","categoryNames","_setDynamicColorScheme","from_source","color_params","colorParams","_getColorScale","baseParams","parameters_categories_hash","colors","categoryBounds","knownCategories","knownColors","xPos","_prepareData","_generateCategoryBounds","LZ_SIG_THRESHOLD_LOGP","standard_association_tooltip","or","standard_association_tooltip_with_label","standard_genes_tooltip","catalog_variant_tooltip","coaccessibility_tooltip","significance_layer","recomb_rate_layer","association_pvalues_layer","coaccessibility_layer","association_pvalues_catalog_layer","catalog","phewas_pvalues_layer","genes_layer","genes_layer_filtered","annotation_catalog_layer","ldlz2_pop_selector_menu","gene_selector_menu","standard_panel_toolbar","standard_plot_toolbar","standard_association_toolbar","region_nav_plot_toolbar","association_panel","coaccessibility_panel","association_catalog_panel","genes_panel","phewas_panel","annotation_catalog_panel","standard_association_plot","association_catalog_plot","standard_phewas_plot","coaccessibility_plot","color_config","standard_association","standard_association_with_label","standard_genes","catalog_variant","coaccessibility","toolbar_widgets","ldlz2_pop_selector","standard_panel","standard_plot","region_nav_plot","significance","recomb_rate","association_pvalues","association_pvalues_catalog","phewas_pvalues","genes","genes_filtered","annotation_catalog","association","association_catalog","phewas","plot","standard_phewas","unnamespaced","contents","list","LocusZoom","version","iterator","dataset","region","parsed_state","chrpos","parsePositionQuery","refresh","DataSources","_registry","Adapters","DataLayers","Layouts","MatchFunctions","ScaleFunctions","TransformationFunctions","Widgets","INSTALLED_PLUGINS","use","plugin","install"],"mappings":";iCACA,IAAIA,EAAsB,CCA1B,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3E,EAAwB,CAACM,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClF,EAAyBT,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,0rCCLvD,iBCcA,MAAMC,EACF,cACIC,KAAKC,OAAS,IAAIC,IAQtB,IAAIC,GACA,IAAKH,KAAKC,OAAOG,IAAID,GACjB,MAAM,IAAIE,MAAM,mBAAmBF,KAEvC,OAAOH,KAAKC,OAAOX,IAAIa,GAU3B,IAAIA,EAAMG,EAAMC,GAAW,GACvB,IAAKA,GAAYP,KAAKC,OAAOG,IAAID,GAC7B,MAAM,IAAIE,MAAM,QAAQF,wBAG5B,OADAH,KAAKC,OAAOO,IAAIL,EAAMG,GACfA,EAQX,OAAOH,GACH,OAAOH,KAAKC,OAAOQ,OAAON,GAQ9B,IAAIA,GACA,OAAOH,KAAKC,OAAOG,IAAID,GAO3B,OACI,OAAOO,MAAMC,KAAKX,KAAKC,OAAOW,SAStC,MAAMC,UAAsBd,EAOxB,OAAOI,KAASW,GAEZ,OAAO,IADMd,KAAKV,IAAIa,GACf,IAAYW,GAqBvB,OAAOC,EAAaC,EAAaC,GAE7B,GADAC,QAAQC,KAAK,+GACY,IAArBC,UAAUC,OACV,MAAM,IAAIhB,MAAM,gCAGpB,MAAMiB,EAAOtB,KAAKV,IAAIyB,GACtB,MAAMQ,UAAYD,GAGlB,OAFAnC,OAAOqC,OAAOD,EAAI9B,UAAWwB,EAAWK,GACxCtB,KAAKyB,IAAIT,EAAaO,GACfA,GCpFf,SAASG,EAAoBC,EAAYC,EAAOC,GAE5C,GAAKD,GAASC,IAAaD,IAASC,EAChC,MAAM,IAAIxB,MAAM,GAAGsB,iGAGvB,GAAIC,IAAU,CAAC,SAAU,UAAUE,SAASF,GACxC,MAAM,IAAIvB,MAAM,GAAGsB,8CAc3B,MAAMI,EAIF,YAAYC,GAMRhC,KAAKiC,cAAe,EACpBjC,KAAKkC,WAAa,KAIlBlC,KAAKmC,iBAAmB,KACxBnC,KAAKoC,eAAiB,KAQtBpC,KAAKqC,mBAAoB,EAGzBrC,KAAKsC,UAAUN,GAWnB,UAAUA,GAKNhC,KAAKuC,OAASP,EAAOO,QAAU,GAgBnC,YAAYC,EAAOC,EAAOC,GAQtB1C,KAAK2C,OAAOH,EAAOC,EAAOC,GAE1B,MAAME,EAAgBJ,EAAMK,KACtB,iBAACV,EAAgB,eAAEC,GAAkBpC,KAC3C,OAAImC,GAAoBK,EAAMM,OAASX,GAAoBC,GAAkBI,EAAMO,KAAOX,EAC/E,GAAGQ,KAAiBT,KAAoBC,IAExC,GAAGI,EAAMK,OAAOL,EAAMM,SAASN,EAAMO,MAQpD,OAAOP,EAAOC,EAAOC,GACjB,OAAO1C,KAAKgD,IAYhB,aAAaR,EAAOC,EAAOC,GACvB,MAAMM,EAAMhD,KAAK2C,OAAOH,EAAOC,EAAOC,GACtC,OAAOO,MAAMD,GAAKE,MAAMC,IACpB,IAAKA,EAASC,GACV,MAAM,IAAI/C,MAAM8C,EAASE,YAE7B,OAAOF,EAASG,UAYxB,WAAWd,EAAOC,EAAOC,GACrB,IAAIa,EACJ,MAAMC,EAAWxD,KAAKyD,YAAYjB,EAAOC,EAAOC,GAahD,OAXI1C,KAAKiC,mBAAqC,IAAf,GAA8BuB,IAAaxD,KAAKkC,WAC3EqB,EAAMG,QAAQC,QAAQ3D,KAAK4D,kBAE3BL,EAAMvD,KAAK6D,aAAarB,EAAOC,EAAOC,GAClC1C,KAAKiC,eACLjC,KAAKkC,WAAasB,EAClBxD,KAAKmC,iBAAmBK,EAAMM,MAC9B9C,KAAKoC,eAAiBI,EAAMO,IAC5B/C,KAAK4D,gBAAkBL,IAGxBA,EAcX,kBAAkBO,GACd,GAAIpD,MAAMqD,QAAQD,GAEd,OAAOA,EAIX,MAAMlD,EAAOzB,OAAOyB,KAAKkD,GACnBE,EAAIF,EAAKlD,EAAK,IAAIS,OAKxB,IAJmBT,EAAKqD,OAAM,SAAUhF,GAEpC,OADa6E,EAAK7E,GACNoC,SAAW2C,KAGvB,MAAM,IAAI3D,MAAM,GAAGL,KAAKkE,YAAY/D,2EAIxC,MAAMgE,EAAU,GACVzB,EAASvD,OAAOyB,KAAKkD,GAC3B,IAAK,IAAIM,EAAI,EAAGA,EAAIJ,EAAGI,IAAK,CACxB,MAAMC,EAAS,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,EAAOrB,OAAQiD,IAC/BD,EAAO3B,EAAO4B,IAAMR,EAAKpB,EAAO4B,IAAIF,GAExCD,EAAQI,KAAKF,GAEjB,OAAOF,EAYX,aAAaA,EAAS1B,GAElB,OAAO0B,EAkBX,cAAeL,EAAMpB,EAAQ8B,EAAUC,GAInC,IAAK/D,MAAMqD,QAAQD,GACf,OAAOA,EAGX,IAAKA,EAAKzC,OAEN,OAAOyC,EAGX,MAAMY,EAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIjC,EAAOrB,OAAQsD,IAC/BD,EAAWC,GAAK,EAGpB,MAAMR,EAAUL,EAAKc,KAAI,SAAUtE,GAC/B,MAAMuE,EAAgB,GACtB,IAAK,IAAIP,EAAI,EAAGA,EAAI5B,EAAOrB,OAAQiD,IAAK,CACpC,IAAIQ,EAAMxE,EAAKoC,EAAO4B,SACJ,IAAPQ,IACPJ,EAAWJ,GAAK,GAEhBG,GAASA,EAAMH,KACfQ,EAAML,EAAMH,GAAGQ,IAEnBD,EAAcL,EAASF,IAAMQ,EAEjC,OAAOD,KAOX,OALAH,EAAWK,SAAQ,SAASC,EAAGZ,GAC3B,IAAKY,EACD,MAAM,IAAI3E,MAAM,SAASqC,EAAO0B,gCAAgCI,EAASJ,SAG1ED,EAeX,iBAAiBL,EAAMrB,EAAOC,EAAQ8B,EAAUC,GAC5C,OAAOX,EAwBX,cAAemB,EAAMxC,EAAOC,EAAQ8B,EAAUC,GAC1C,MAAMS,EAAYlF,KAAKkF,WAAalF,KAAKkE,YAAY/D,KAChDsC,EAAM0C,WACP1C,EAAM0C,SAAW,IAGrB,MAAMC,EAAsB,iBAARH,EAAmBI,KAAKC,MAAML,GAAQA,EAG1D,OAAOvB,QAAQC,QAAQ3D,KAAKuF,kBAAkBH,EAAKtB,MAAQsB,IACtDlC,MAAMsC,GAEI9B,QAAQC,QAAQ3D,KAAKyF,aAAaD,EAAc/C,MACxDS,MAAMY,GACEJ,QAAQC,QAAQ3D,KAAK0F,cAAc5B,EAAMpB,EAAQ8B,EAAUC,MACnEvB,MAAMyC,IAGLlD,EAAM0C,SAASD,GAAaS,EACrBjC,QAAQC,QAAQ3D,KAAK4F,iBAAiBD,EAAiBlD,EAAOC,EAAQ8B,EAAUC,OACxFvB,MAAM2C,IACE,CAAEC,OAAQrD,EAAMqD,QAAU,GAAIX,SAAU1C,EAAM0C,SAAUY,KAAMF,MAmBjF,QAAQrD,EAAOE,EAAQ8B,EAAUC,GAC7B,GAAIzE,KAAKgG,WAAY,CACjB,MAAMC,EAAMjG,KAAKgG,WAAWxD,EAAOE,EAAQ8B,EAAUC,GACjDzE,KAAKiG,MACLzD,EAAQyD,EAAIzD,OAASA,EACrBE,EAASuD,EAAIvD,QAAUA,EACvB8B,EAAWyB,EAAIzB,UAAYA,EAC3BC,EAAQwB,EAAIxB,OAASA,GAI7B,OAAQhC,GACAzC,KAAKqC,mBAAqBI,GAASA,EAAMsD,OAAStD,EAAMsD,KAAK1E,OAGtDqC,QAAQC,QAAQlB,GAGpBzC,KAAKkG,WAAW1D,EAAOC,EAAOC,GAAQQ,MAAM+B,GACxCjF,KAAKmG,cAAclB,EAAMxC,EAAOC,EAAQ8B,EAAUC,MAazE,MAAM2B,UAAuBrE,EACzB,UAAUC,GAQN,GAPAqE,MAAM/D,UAAUN,GAMhBhC,KAAKgD,IAAMhB,EAAOgB,KACbhD,KAAKgD,IACN,MAAM,IAAI3C,MAAM,6CAiB5B,MAAMiG,UAAsBF,EACxB,WAAY5D,EAAOE,EAAQ8B,EAAUC,GAUjC,MAPA,CADiBzE,KAAKuC,OAAOgE,UAAY,KAC9B,YAAYxB,SAAQ,SAASyB,GAC/B9D,EAAOZ,SAAS0E,KACjB9D,EAAO+D,QAAQD,GACfhC,EAASiC,QAAQD,GACjB/B,EAAMgC,QAAQ,UAGf,CAAC/D,OAAQA,EAAQ8B,SAASA,EAAUC,MAAMA,GAMrD,OAAQjC,EAAOC,EAAOC,GAClB,MAAMgE,EAAWjE,EAAMqD,OAAOY,UAAY1G,KAAKuC,OAAOV,QAAU7B,KAAKuC,OAAOmE,SAC5E,QAAuB,IAAZA,EACP,MAAM,IAAIrG,MAAM,0DAEpB,MAAO,GAAGL,KAAKgD,kCAAkC0D,yBAAgClE,EAAMK,wBAAwBL,EAAMM,yBAAyBN,EAAMO,MAYxJ,kBAAmBe,GAOf,OANAA,EAAOuC,MAAMd,kBAAkBzB,GAC3B9D,KAAKuC,QAAUvC,KAAKuC,OAAOoE,MAAQ7C,EAAKzC,QAAUyC,EAAK,GAAa,UACpEA,EAAK6C,MAAK,SAAUC,EAAGC,GACnB,OAAOD,EAAY,SAAIC,EAAY,YAGpC/C,GAkBf,MAAMgD,UAAiBV,EAsBnB,YAAYpE,GACRqE,MAAMrE,GACNhC,KAAKqC,mBAAoB,EAG7B,WAAWG,EAAOE,GACd,GAAIA,EAAOrB,OAAS,IACM,IAAlBqB,EAAOrB,SAAiBqB,EAAOZ,SAAS,aACxC,MAAM,IAAIzB,MAAM,2CAA2CqC,EAAOqE,KAAK,SAKnF,gBAAgBtE,GAqBZ,IAAIuE,EAAa,CACbC,GAAIjH,KAAKuC,OAAOgE,SAChBW,SAAUlH,KAAKuC,OAAO4E,eACtBC,OAAQpH,KAAKuC,OAAO8E,aACpBC,QAAQ,MAEZ,GAAI7E,GAASA,EAAMsD,MAAQtD,EAAMsD,KAAK1E,OAAS,EAAG,CAC9C,MAAMkG,EAAQpI,OAAOyB,KAAK6B,EAAMsD,KAAK,IAC/ByB,GAvBmBC,EAuBIF,EAtBtB,WACH,MAAMG,EAAUtG,UAChB,IAAK,IAAIgD,EAAI,EAAGA,EAAIsD,EAAQrG,OAAQ+C,IAAK,CACrC,MAAMuD,EAAQD,EAAQtD,GAChBwD,EAAIH,EAAII,QAAO,SAAUrB,GAC3B,OAAOA,EAAEsB,MAAMH,MAEnB,GAAIC,EAAEvG,OACF,OAAOuG,EAAE,GAGjB,OAAO,OAgBLG,EAAWf,EAAWC,IAAMO,EAAU,IAAIQ,OAAO,GAAGhB,EAAWC,UACrED,EAAWC,GAAKc,GAAYP,EAAU,gBAAkBA,EAAU,UAClER,EAAWE,SAAWF,EAAWE,UAAYM,EAAU,gBAAiB,YACxER,EAAWI,OAASJ,EAAWI,QAAUI,EAAU,cAAe,mBAClER,EAAWM,QAAUC,EAhCN,IAAUE,EAkC7B,OAAOT,EAGX,oBAAqBtE,EAAQ8B,GAEzB,IAAIjF,EAAM,GACV,IAAK,IAAI6E,EAAI,EAAGA,EAAI1B,EAAOrB,OAAQ+C,IACb,aAAd1B,EAAO0B,IACP7E,EAAI0I,WAAavF,EAAO0B,GACxB7E,EAAI2I,YAAc1D,GAAYA,EAASJ,KAEvC7E,EAAI4I,KAAOzF,EAAO0B,GAClB7E,EAAI6I,MAAQ5D,GAAYA,EAASJ,IAGzC,OAAO7E,EAMX,kBAAmBuE,GACf,OAAOA,EAgBX,UAAUtB,EAAOC,EAAOC,GACpB,IAyBI2F,EADYrI,KAAKsI,oBAAoB5F,GAClByF,KAIvB,GAHe,UAAXE,IACAA,EAAS7F,EAAM+F,UAAY9F,EAAMqD,OAAOyC,UAAY,QAEzC,SAAXF,EAAmB,CACnB,IAAK5F,EAAMsD,KACP,MAAM,IAAI1F,MAAM,iDAEpB,IAAIO,EAAOZ,KAAKwI,gBAAgB/F,GAChC,IAAK7B,EAAKwG,SAAWxG,EAAKqG,GAAI,CAC1B,IAAIwB,EAAU,GAOd,MANK7H,EAAKqG,KACNwB,IAAcA,EAAQpH,OAAS,KAAO,IAA3B,MAEVT,EAAKwG,SACNqB,IAAcA,EAAQpH,OAAS,KAAO,IAA3B,UAET,IAAIhB,MAAM,iDAAiDoI,iBAAuB7H,EAAK0G,YAEjGe,EAAS5F,EAAMsD,KA5CI,SAAS5B,EAASuE,GAIrC,IAAIC,EAEAA,EAHW,MAAMC,KADrBF,EAAaA,GAAc,cAIjB,SAAS9B,EAAGC,GACd,OAAOD,EAAIC,GAGT,SAASD,EAAGC,GACd,OAAOD,EAAIC,GAGnB,IAAIgC,EAAa1E,EAAQ,GAAGuE,GAAaI,EAAa,EACtD,IAAK,IAAI1E,EAAI,EAAGA,EAAID,EAAQ9C,OAAQ+C,IAC5BuE,EAAIxE,EAAQC,GAAGsE,GAAaG,KAC5BA,EAAa1E,EAAQC,GAAGsE,GACxBI,EAAa1E,GAGrB,OAAO0E,EAuBaC,CAAiBtG,EAAMsD,KAAMnF,EAAKwG,SAASxG,EAAKqG,IAIxE,MACMa,EAAQO,GAAUA,EAAOP,MADV,0EAGrB,IAAKA,EACD,MAAM,IAAIzH,MAAM,kEAEpB,MAAO2I,EAAUC,EAAOC,EAAKC,EAAKC,GAAOtB,EAGzC,IAAIuB,EAAmB,GAAGJ,KAASC,IAKnC,OAJIC,GAAOC,IACPC,GAAoB,IAAIF,KAAOC,KAG5B,CAACC,EAAkBL,GAM9B,OAAOxG,EAAOC,EAAOC,GAEjB,MAAMd,EAAQY,EAAM8G,cAAgBtJ,KAAKuC,OAAOX,OAAS,SACzD,IAAIC,EAASW,EAAM+G,WAAavJ,KAAKuC,OAAOV,QAAU,QACtD,MAAM2H,EAAahH,EAAMiH,QAAUzJ,KAAKuC,OAAOiH,YAAc,MACvDE,EAAS1J,KAAKuC,OAAOmH,QAAU,UAEtB,UAAX7H,GAAgC,WAAVD,IAEtBC,EAAS,eAGbH,EAAoB1B,KAAKkE,YAAY/D,KAAMyB,EAAO,MAElD,MAAOyH,EAAkBM,GAAc3J,KAAK4J,UAAUpH,EAAOC,EAAOC,GAKpE,OAFAD,EAAMqD,OAAOyC,SAAWoB,EAEhB,CACJ3J,KAAKgD,IAAK,iBAAkBpB,EAAO,eAAgBC,EAAQ,gBAAiB2H,EAAY,YACxF,gBAAiBE,EACjB,YAAaG,mBAAmBR,GAChC,UAAWQ,mBAAmBrH,EAAMK,KACpC,UAAWgH,mBAAmBrH,EAAMM,OACpC,SAAU+G,mBAAmBrH,EAAMO,MACrCgE,KAAK,IAUX,YAAYvE,EAAOC,EAAOC,GACtB,MAAMpB,EAAO+E,MAAM5C,YAAYjB,EAAOC,EAAOC,GAC7C,IAAIb,EAASW,EAAM+G,WAAavJ,KAAKuC,OAAOV,QAAU,QACtD,MAAM2H,EAAahH,EAAMiH,QAAUzJ,KAAKuC,OAAOiH,YAAc,OACtDnB,EAAQyB,GAAK9J,KAAK4J,UAAUpH,EAAOC,EAAOC,GACjD,MAAO,GAAGpB,KAAQ+G,KAAUxG,KAAU2H,IAO1C,iBAAiB1F,EAAMrB,EAAOC,EAAQ8B,EAAUC,GAC5C,IAAI7D,EAAOZ,KAAKwI,gBAAgB/F,GAC5BsH,EAAY/J,KAAKsI,oBAAoB5F,EAAQ8B,GACjD,IAAK5D,EAAKsG,SACN,MAAM,IAAI7G,MAAM,4CAA4CO,EAAK0G,WA4BrE,IAAI0C,EAAYlG,EAAKmG,QAAU,UAAY,cAK3C,OA/BiB,SAAUC,EAAMC,EAAOC,EAAQC,GAC5C,IAAIjG,EAAI,EAAGE,EAAI,EACf,KAAOF,EAAI8F,EAAK7I,QAAUiD,EAAI6F,EAAMG,UAAUjJ,QACtC6I,EAAK9F,GAAGxD,EAAKsG,YAAciD,EAAMG,UAAUhG,IAC3C4F,EAAK9F,GAAGgG,GAAUD,EAAME,GAAQ/F,GAChCF,IACAE,KACO4F,EAAK9F,GAAGxD,EAAKsG,UAAYiD,EAAMG,UAAUhG,GAChDF,IAEAE,IAiBZiG,CAAS9H,EAAMsD,KAAMjC,EAAMiG,EAAU3B,MAAO4B,GACxCD,EAAU9B,YAAcxF,EAAMqD,OAAOyC,UAdnB,SAAUzE,EAAM0G,EAAQC,EAASC,EAAYC,GAC/D,IAAK,IAAIvG,EAAI,EAAGA,EAAIN,EAAKzC,OAAQ+C,IACzBN,EAAKM,GAAGqG,IAAY3G,EAAKM,GAAGqG,KAAaD,GACzC1G,EAAKM,GAAGsG,GAAc,EACtB5G,EAAKM,GAAGuG,GAAa,GAErB7G,EAAKM,GAAGsG,GAAc,EAS9BE,CAAcnI,EAAMsD,KAAMtD,EAAMqD,OAAOyC,SAAU3H,EAAKqG,GAAI8C,EAAU7B,YAAa6B,EAAU3B,OAExF3F,EAAMsD,KAMjB,aAAavD,EAAOC,EAAOC,GACvB,IAAIM,EAAMhD,KAAK2C,OAAOH,EAAOC,EAAOC,GAChCmI,EAAW,CAAE/G,KAAM,IACnBgH,EAAgB,SAAU9H,GAC1B,OAAOC,MAAMD,GAAKE,OAAOA,MAAMC,IAC3B,IAAKA,EAASC,GACV,MAAM,IAAI/C,MAAM8C,EAASE,YAE7B,OAAOF,EAASG,UACjBJ,MAAK,SAAS6H,GAKb,OAJAA,EAAU1F,KAAKC,MAAMyF,GACrB5L,OAAOyB,KAAKmK,EAAQjH,MAAMiB,SAAQ,SAAU9F,GACxC4L,EAAS/G,KAAK7E,IAAQ4L,EAAS/G,KAAK7E,IAAQ,IAAI+L,OAAOD,EAAQjH,KAAK7E,OAEpE8L,EAAQE,KACDH,EAAcC,EAAQE,MAE1BJ,MAGf,OAAOC,EAAc9H,IAiB7B,MAAMkI,UAAsB9E,EASxB,YAAYpE,GACRqE,MAAMrE,GACNhC,KAAKqC,mBAAoB,EAM7B,OAAOG,EAAOC,EAAOC,GAGjB,MAAMd,EAAQY,EAAM8G,cAAgBtJ,KAAKuC,OAAOX,MAC1CC,EAAS7B,KAAKuC,OAAOV,OAC3BH,EAAoB1B,KAAKkE,YAAY/D,KAAMyB,EAAOC,GAIlD,MAAMsJ,EAAevJ,EAAQ,UAAUA,IAAU,cAAcC,IAC/D,MAAO,GAAG7B,KAAKgD,gDAAkDR,EAAMK,mBAAmBL,EAAMM,oBAAoBN,EAAMO,MAAMoI,IAGpI,gBAAgBhH,GAEZ,MAEMiH,EAFcjM,OAAOyB,KAAKuD,GAEHkH,MAAK,SAAU/K,GACxC,OAAOA,EAAKwH,MAAM,0BAGtB,IAAKsD,EACD,MAAM,IAAI/K,MAAM,0DAEpB,MAAO,CAAE,IAAO+K,GAGpB,cAAetH,EAAMpB,EAAQ8B,EAAUC,GAEnC,OAAOX,EAOX,iBAAiBA,EAAMrB,EAAOC,EAAQ8B,EAAUC,GAC5C,IAAKX,EAAKzC,OACN,OAAOoB,EAAMsD,KAKjB,MAAMuF,EAAU,aACVC,EAAc/G,EAAS9B,EAAO8I,QAAQF,IAE5C,SAASf,EAASL,EAAMC,EAAOzH,EAAQ8B,EAAUC,GAE7C,MAAMgH,EAAYvB,EAAwB,mBAAK,EAE/C,GADAA,EAAwB,kBAAIuB,EAAY,IACzBvB,EAAKqB,IAAgBrB,EAAKqB,GAAepB,EAAMmB,IAM9D,IAAK,IAAIhH,EAAI,EAAGA,EAAI5B,EAAOrB,OAAQiD,IAAK,CACpC,MAAMoH,EAAKhJ,EAAO4B,GACZqH,EAAOnH,EAASF,GAEtB,IAAIQ,EAAMqF,EAAMuB,GACZjH,GAASA,EAAMH,KACfQ,EAAML,EAAMH,GAAGQ,IAEnBoF,EAAKyB,GAAQ7G,GAIrB,MAAM8G,EAAa5L,KAAKwI,gBAAgB/F,EAAMsD,KAAK,IAC7C8F,EAAW7L,KAAKwI,gBAAgB1E,EAAK,IAG3C,IADA,IAAIM,EAAI,EAAGE,EAAI,EACRF,EAAI3B,EAAMsD,KAAK1E,QAAUiD,EAAIR,EAAKzC,QAAQ,CAC7C,IAAI6I,EAAOzH,EAAMsD,KAAK3B,GAClB+F,EAAQrG,EAAKQ,GAEb4F,EAAK0B,EAAW1C,OAASiB,EAAM0B,EAAS3C,MAExCqB,EAASL,EAAMC,EAAOzH,EAAQ8B,EAAUC,GACxCH,GAAK,GACE4F,EAAK0B,EAAW1C,KAAOiB,EAAM0B,EAAS3C,KAC7C9E,GAAK,EAELE,GAAK,EAGb,OAAO7B,EAAMsD,MAerB,MAAM+F,UAAe1F,EAIjB,OAAO5D,EAAOC,EAAOC,GACjB,MAAMd,EAAQY,EAAM8G,cAAgBtJ,KAAKuC,OAAOX,MAChD,IAAIC,EAAS7B,KAAKuC,OAAOV,OACzBH,EAAoB1B,KAAKkE,YAAY/D,KAAMyB,EAAOC,GAIlD,MAAMsJ,EAAevJ,EAAQ,UAAUA,IAAU,kBAAkBC,IACnE,MAAO,GAAG7B,KAAKgD,wBAAwBR,EAAMK,qBAAqBL,EAAMO,kBAAkBP,EAAMM,QAAQqI,IAS5G,kBAAkBrH,GACd,OAAOA,EAQX,cAAcA,EAAMpB,EAAQ8B,EAAUC,GAClC,OAAOX,GAcf,MAAMiI,UAAyB3F,EAO3B,YAAYpE,GACRqE,MAAMrE,GACNhC,KAAKqC,mBAAoB,EAM7B,SACI,OAAOrC,KAAKgD,IAOhB,kBAAkBc,GACd,OAAOA,EAGX,aAAatB,EAAOC,EAAOC,GACvB,MAAMd,EAAQY,EAAM8G,cAAgBtJ,KAAKuC,OAAOX,MAChD,IAAKA,EACD,MAAM,IAAIvB,MAAM,WAAWL,KAAKkE,YAAY/D,6CAGhD,MAAM6L,EAAoBvJ,EAAMsD,KAAKkG,QAGjC,SAAUC,EAAKC,GAEX,OADAD,EAAIC,EAAKC,WAAa,KACfF,IAEX,IAEJ,IAAIG,EAAQlN,OAAOyB,KAAKoL,GAAmBpH,KAAI,SAAUwH,GAIrD,MAAO,GAFO,IAAIA,EAAUE,QAAQ,iBAAkB,8BAEfF,yBAAiCxK,sMAG5E,IAAKyK,EAAMhL,QAAUgL,EAAMhL,OAAS,IAAgB,WAAVO,EAKtC,OAAO8B,QAAQC,QAAQ,CAAEG,KAAM,OAGnCuI,EAAQ,IAAIA,EAAMtF,KAAK,SACvB,MAAM/D,EAAMhD,KAAK2C,OAAOH,EAAOC,EAAOC,GAEhCqD,EAAOV,KAAKkH,UAAU,CAAEF,MAAOA,IAKrC,OAAOpJ,MAAMD,EAAK,CAAE0G,OAAQ,OAAQ3D,OAAMyG,QAJ1B,CAAE,eAAgB,sBAImBtJ,MAAMC,GAClDA,EAASC,GAGPD,EAASG,OAFL,KAGZmJ,OAAOC,GAAQ,KAOtB,iBAAiB5I,EAAMrB,EAAOC,EAAQ8B,EAAUC,GAC5C,OAAKX,GAILrB,EAAMsD,KAAKhB,SAAQ,SAASoH,GAExB,MAAMQ,EAAQ,IAAIR,EAAKC,UAAUE,QAAQ,iBAAkB,OACrDM,EAAa9I,EAAK6I,IAAU7I,EAAK6I,GAA0B,kBAC7DC,GAEAzN,OAAOyB,KAAKgM,GAAY7H,SAAQ,SAAU9F,GACtC,IAAI6F,EAAM8H,EAAW3N,QACI,IAAdkN,EAAKlN,KACM,iBAAP6F,GAAmBA,EAAI+H,WAAW/K,SAAS,OAClDgD,EAAMgI,WAAWhI,EAAIiI,QAAQ,KAEjCZ,EAAKlN,GAAO6F,SAKrBrC,EAAMsD,MApBFtD,GAmCnB,MAAMuK,UAAiB5G,EAInB,OAAO5D,EAAOC,EAAOC,GACjB,MAAMd,EAAQY,EAAM8G,cAAgBtJ,KAAKuC,OAAOX,MAChD,IAAIC,EAAS7B,KAAKuC,OAAOV,OACzBH,EAAoB1B,KAAKkE,YAAY+I,YAAarL,EAAOC,GAIzD,MAAMsJ,EAAevJ,EAAQ,UAAUA,IAAU,cAAcC,IAC/D,MAAO,GAAG7B,KAAKgD,6BAA6BR,EAAMK,wBAAwBL,EAAMO,uBAAuBP,EAAMM,QAAQqI,KAmB7H,MAAM+B,UAAqBnL,EACvB,UAAU+B,GAEN9D,KAAKmN,MAAQrJ,EAGjB,WAAWtB,EAAOC,EAAOC,GACrB,OAAOgB,QAAQC,QAAQ3D,KAAKmN,QAapC,MAAMC,UAAiBhH,EACnB,OAAO5D,EAAOC,EAAOC,GACjB,MAAMd,GAASY,EAAM8G,aAAe,CAAC9G,EAAM8G,cAAgB,OAAStJ,KAAKuC,OAAOX,MAChF,IAAKA,IAAUlB,MAAMqD,QAAQnC,KAAWA,EAAMP,OAC1C,MAAM,IAAIhB,MAAM,CAAC,UAAWL,KAAKkE,YAAY+I,YAAa,6EAA6ElG,KAAK,MAShJ,MAPY,CACR/G,KAAKgD,IACL,uBAAwB6G,mBAAmBrH,EAAM6K,SAAU,oBAC3DzL,EAAMgD,KAAI,SAAUtE,GAChB,MAAO,SAASuJ,mBAAmBvJ,QACpCyG,KAAK,MAEDA,KAAK,IAGpB,YAAYvE,EAAOC,EAAOC,GAEtB,OAAO1C,KAAK2C,OAAOH,EAAOC,EAAOC,IAiBzC,MAAM4K,UAAwBvL,EAO1B,YAAYC,GAGR,GAFAqE,MAAMrE,IAEDA,IAAWA,EAAOuL,QACnB,MAAM,IAAIlN,MAAM,6GAYpBL,KAAKwN,qBAAuBxL,EAAOuL,QAGnC,MAAME,EAAgBtO,OAAOyB,KAAKoB,EAAOuL,SAGzCvN,KAAK0N,sBAAsB3I,SAASJ,IAChC,IAAK8I,EAAc3L,SAAS6C,GAExB,MAAM,IAAItE,MAAM,qBAAqBL,KAAKkE,YAAY/D,kDAAkDwE,QAMpH,aAEA,WAAWnC,EAAOC,EAAOC,GASrB,OANAvD,OAAOyB,KAAKZ,KAAKwN,sBAAsBzI,SAAS4I,IAC5C,MAAMC,EAAkB5N,KAAKwN,qBAAqBG,GAClD,GAAIlL,EAAM0C,WAAa1C,EAAM0C,SAASyI,GAClC,MAAM,IAAIvN,MAAM,GAAGL,KAAKkE,YAAY/D,yDAAyDyN,QAG9FlK,QAAQC,QAAQlB,EAAMsD,MAAQ,IAGzC,cAAcjC,EAAMrB,EAAOC,EAAQ8B,EAAUC,GAMzC,OAAOf,QAAQC,QAAQ3D,KAAK4F,iBAAiB9B,EAAMrB,EAAOC,EAAQ8B,EAAUC,IACvEvB,MAAK,SAAS2C,GACX,MAAO,CAACC,OAAQrD,EAAMqD,QAAU,GAAIX,SAAU1C,EAAM0C,UAAY,GAAIY,KAAMF,MAItF,iBAAiB1B,EAAS1B,GAEtB,MAAM,IAAIpC,MAAM,iDAOpB,sBACI,MAAM,IAAIA,MAAM,kFCpsCxB,MAAMwN,EAAW,IAAIhN,EAErB,IAAK,IAAKV,EAAM2N,KAAS3O,OAAO4O,QAAQ,GACpCF,EAASpM,IAAItB,EAAM2N,GAWvBD,EAASpM,IAAI,aAAc,GAQ3BoM,EAASpM,IAAI,QAAS,GAGtB,UC3CM,EAA+BuM,GCUxBC,EAAW,CACpBC,MAAO,CAAC,YAAa,SAAU,OAAQ,QACvCC,WAAY,CAAC,cAAe,WAAY,QAAS,WCY9C,SAASC,EAAOtO,GACnB,OAAIuO,MAAMvO,IAAUA,GAAS,EAClB,KAEJwO,KAAKC,IAAIzO,GAASwO,KAAKE,KAQ3B,SAASC,EAAU3O,GACtB,OAAIuO,MAAMvO,IAAUA,GAAS,EAClB,MAEHwO,KAAKC,IAAIzO,GAASwO,KAAKE,KAQ5B,SAASE,EAAkB5O,GAC9B,GAAIuO,MAAMvO,GACN,MAAO,MAEX,GAAc,IAAVA,EACA,MAAO,IAEX,MAAM6O,EAAML,KAAKM,KAAK9O,GAChB+O,EAAOF,EAAM7O,EACbwB,EAAOgN,KAAKQ,IAAI,GAAID,GAC1B,OAAY,IAARF,GACQrN,EAAO,IAAIyL,QAAQ,GACZ,IAAR4B,GACCrN,EAAO,KAAKyL,QAAQ,GAErB,GAAGzL,EAAKyL,QAAQ,YAAY4B,IASpC,SAASI,EAAajP,GACzB,GAAIuO,MAAMvO,GACN,MAAO,MAEX,GAAc,IAAVA,EACA,MAAO,IAGX,MAAMkP,EAAMV,KAAKU,IAAIlP,GACrB,IAAIyO,EAMJ,OAJIA,EADAS,EAAM,EACAV,KAAKM,KAAKN,KAAKC,IAAIS,GAAOV,KAAKE,MAE/BF,KAAKW,MAAMX,KAAKC,IAAIS,GAAOV,KAAKE,MAEtCF,KAAKU,IAAIT,IAAQ,EACVzO,EAAMiN,QAAQ,GAEdjN,EAAMoP,cAAc,GAAG5C,QAAQ,IAAK,IAAIA,QAAQ,IAAK,UAa7D,SAAS6C,EAAYrP,GACxB,OAAKA,GAGLA,EAAQ,GAAGA,KAEEwM,QAAQ,aAAa,SAAU8C,GACxC,OAAQA,GACR,IAAK,IACD,MAAO,SACX,IAAK,IACD,MAAO,SACX,IAAK,IACD,MAAO,OACX,IAAK,IACD,MAAO,OACX,IAAK,IACD,MAAO,QACX,IAAK,IACD,MAAO,aAjBJ,GA+BR,SAASC,EAAWvP,GACvB,MAAwB,iBAAVA,EAQX,SAASwP,EAAWxP,GACvB,OAAO+J,mBAAmB/J,GCpF9B,MAAM,EAAW,IApDjB,cAA8CC,EAO1C,mBAAmBwP,GACf,MAAMC,EAAQD,EACTzH,MAAM,cACNlD,KAAKtE,GAAS+F,MAAM/G,IAAIgB,EAAKmP,UAAU,MAE5C,OAAQ3P,GACG0P,EAAMvD,QACT,CAACC,EAAKwD,IAASA,EAAKxD,IACpBpM,GAWZ,IAAIK,GACA,OAAKA,EAKwB,MAAzBA,EAAKsP,UAAU,EAAG,GAIXzP,KAAK2P,mBAAmBxP,GAGxBkG,MAAM/G,IAAIa,GATV,OAuBnB,IAAK,IAAKA,EAAM2N,KAAS3O,OAAO4O,QAAQ,GACpC,EAAStM,IAAItB,EAAM2N,GAIvB,UCrDA,MAAM8B,EACF,YAAYC,GACR,MAAMC,EAAQ,iCAAiCC,KAAKF,GAEpD7P,KAAKgQ,UAAYH,EAEjB7P,KAAKiQ,UAAYH,EAAM,IAAM,KAE7B9P,KAAKG,KAAO2P,EAAM,IAAM,KAExB9P,KAAKkQ,gBAAkB,GAEA,iBAAZJ,EAAM,IAAkBA,EAAM,GAAGzO,OAAS,IACjDrB,KAAKkQ,gBAAkBJ,EAAM,GAAGL,UAAU,GAAGU,MAAM,KACnDnQ,KAAKkQ,gBAAgBnL,SAAQ,CAACqL,EAAWhM,IAAMpE,KAAKkQ,gBAAgB9L,GAAKiM,EAAW/Q,IAAI8Q,MAIhG,sBAAsBtL,GAIlB,OAHA9E,KAAKkQ,gBAAgBnL,SAAQ,SAASqL,GAClCtL,EAAMsL,EAAUtL,MAEbA,EAYX,QAAQhB,EAAMwM,GACV,QAAmC,IAAxBxM,EAAK9D,KAAKgQ,WAA2B,CAC5C,IAAIlL,EAAM,UAC6C,IAA3ChB,EAAK,GAAG9D,KAAKiQ,aAAajQ,KAAKG,QACvC2E,EAAMhB,EAAK,GAAG9D,KAAKiQ,aAAajQ,KAAKG,aACJ,IAAnB2D,EAAK9D,KAAKG,MACxB2E,EAAMhB,EAAK9D,KAAKG,MACTmQ,QAAyC,IAAzBA,EAAMtQ,KAAKgQ,aAClClL,EAAMwL,EAAMtQ,KAAKgQ,YAErBlM,EAAK9D,KAAKgQ,WAAahQ,KAAKuQ,sBAAsBzL,GAEtD,OAAOhB,EAAK9D,KAAKgQ,YC9CzB,MAAMQ,EAAa,cACbC,EAAa,iEAEnB,SAASC,EAAeC,GAGpB,GAAuB,OAAnBA,EAAEC,OAAO,EAAG,GAAa,CACzB,GAAa,MAATD,EAAE,GACF,MAAO,CACHrN,KAAM,KACNuN,KAAM,IACNC,MAAO,MAGf,MAAMlJ,EAAI4I,EAAWT,KAAKY,EAAEC,OAAO,IACnC,IAAKhJ,EACD,KAAM,gBAAgBvC,KAAKkH,UAAUoE,qBAEzC,MAAO,CACHrN,KAAM,KAAKsE,EAAE,KACbiJ,KAAMjJ,EAAE,GACRkJ,MAAO,MAER,GAAa,MAATH,EAAE,GAAY,CACrB,MAAM/I,EAAI4I,EAAWT,KAAKY,EAAEC,OAAO,IACnC,IAAKhJ,EACD,KAAM,gBAAgBvC,KAAKkH,UAAUoE,kBAEzC,MAAO,CACHrN,KAAM,IAAIsE,EAAE,KACZiJ,KAAMjJ,EAAE,GACRkJ,MAAO,KAER,GAAa,MAATH,EAAE,GAAY,CACrB,MAAM/I,EAAI6I,EAAWV,KAAKY,GAC1B,IAAK/I,EACD,KAAM,gBAAgBvC,KAAKkH,UAAUoE,cAEzC,IAAI7Q,EACJ,IAEIA,EAAQuF,KAAKC,MAAMsC,EAAE,IACvB,MAAOmJ,GAELjR,EAAQuF,KAAKC,MAAMsC,EAAE,GAAG0E,QAAQ,SAAU,MAG9C,MAAO,CACHhJ,KAAMsE,EAAE,GACRoJ,MAAOpJ,EAAE,GAAGgJ,OAAO,GAAGT,MAAM,KAC5BrQ,SAGJ,KAAM,aAAauF,KAAKkH,UAAUoE,yBAuC1C,SAASM,EAAsB1R,EAAK2R,GAChC,IAAIC,EACJ,IAAK,IAAIlS,KAAOiS,EACZC,EAAS5R,EACTA,EAAMA,EAAIN,GAEd,MAAO,CAACkS,EAAQD,EAAKA,EAAK7P,OAAS,GAAI9B,GAG3C,SAAS6R,EAAetN,EAAMuN,GAK1B,IAAKA,EAAUhQ,OACX,MAAO,CAAC,IAEZ,MAAMiQ,EAAMD,EAAU,GAChBE,EAAsBF,EAAUG,MAAM,GAC5C,IAAIC,EAAQ,GAEZ,GAAIH,EAAIT,MAAsB,MAAdS,EAAIR,OAA8B,MAAbQ,EAAIT,KAAc,CACnD,MAAMa,EAAI5N,EAAKwN,EAAIT,MACM,IAArBQ,EAAUhQ,YACAsQ,IAAND,GACAD,EAAMlN,KAAK,CAAC+M,EAAIT,OAGpBY,EAAMlN,QAAQ6M,EAAeM,EAAGH,GAAqB3M,KAAKgN,GAAM,CAACN,EAAIT,MAAM7F,OAAO4G,WAEnF,GAAIN,EAAIT,MAAsB,MAAdS,EAAIR,OAA8B,MAAbQ,EAAIT,KAC5C,IAAK,IAAKlM,EAAG+M,KAAMvS,OAAO4O,QAAQjK,GAC9B2N,EAAMlN,QAAQ6M,EAAeM,EAAGH,GAAqB3M,KAAKgN,GAAM,CAACjN,GAAGqG,OAAO4G,WAE5E,GAAIN,EAAIT,MAAsB,OAAdS,EAAIR,OAIvB,GAAoB,iBAAThN,GAA8B,OAATA,EAAe,CAC1B,MAAbwN,EAAIT,MAAgBS,EAAIT,QAAQ/M,GAChC2N,EAAMlN,QAAQ6M,EAAetN,EAAKwN,EAAIT,MAAOU,GAAqB3M,KAAKgN,GAAM,CAACN,EAAIT,MAAM7F,OAAO4G,MAEnG,IAAK,IAAKjN,EAAG+M,KAAMvS,OAAO4O,QAAQjK,GAC9B2N,EAAMlN,QAAQ6M,EAAeM,EAAGL,GAAWzM,KAAKgN,GAAM,CAACjN,GAAGqG,OAAO4G,MAChD,MAAbN,EAAIT,MACJY,EAAMlN,QAAQ6M,EAAeM,EAAGH,GAAqB3M,KAAKgN,GAAM,CAACjN,GAAGqG,OAAO4G,YAIpF,GAAIN,EAAIN,MACX,IAAK,IAAKrM,EAAG+M,KAAMvS,OAAO4O,QAAQjK,GAAO,CACrC,MAAOgG,EAAG+H,EAAIC,GAAWb,EAAsBS,EAAGJ,EAAIN,OAClDc,IAAYR,EAAIxR,OAChB2R,EAAMlN,QAAQ6M,EAAeM,EAAGH,GAAqB3M,KAAKgN,GAAM,CAACjN,GAAGqG,OAAO4G,MAKvF,MAAMG,GAKMtK,EALagK,EAKRxS,EALeoG,KAAKkH,UAO9B,IAAI,IAAIrM,IAAIuH,EAAI7C,KAAKoN,GAAS,CAAC/S,EAAI+S,GAAOA,MAAQC,WAF7D,IAAgBxK,EAAKxI,EAHjB,OADA8S,EAAUpL,MAAK,CAACC,EAAGC,IAAMA,EAAExF,OAASuF,EAAEvF,QAAUgE,KAAKkH,UAAU3F,GAAGsL,cAAc7M,KAAKkH,UAAU1F,MACxFkL,EAuBX,SAASI,EAAOrO,EAAMuI,GAClB,MAEM+F,EAlBV,SAA+BtO,EAAMuN,GACjC,IAAIgB,EAAQ,GACZ,IAAK,IAAInB,KAAQE,EAAetN,EAAMuN,GAClCgB,EAAM9N,KAAK0M,EAAsBnN,EAAMoN,IAE3C,OAAOmB,EAaSC,CAAsBxO,EA1G1C,SAAmB6M,GACfA,EAhBJ,SAAyBA,GAGrB,OAAKA,GAGA,CAAC,IAAK,KAAK7O,SAAS6O,EAAE,MACvBA,EAAI,KAAOA,KAEF,MAATA,EAAE,KACFA,EAAIA,EAAEC,OAAO,IAEVD,GARI,GAYP4B,CAAgB5B,GACpB,IAAIU,EAAY,GAChB,KAAOV,EAAEtP,QAAQ,CACb,MAAMmR,EAAW9B,EAAeC,GAChCA,EAAIA,EAAEC,OAAO4B,EAASlP,KAAKjC,QAC3BgQ,EAAU9M,KAAKiO,GAEnB,OAAOnB,EAgGQoB,CAASpG,IAMxB,OAHK+F,EAAQ/Q,QACTH,QAAQC,KAAK,0CAA0CkL,MAEpD+F,EC5LX,MAAMM,EAAQpE,KAAKqE,KAAK,GAGlBC,EAAe,CACjB,KAAKC,EAASC,GACV,MAAMC,GAAKzE,KAAKqE,KAAKG,GAAgB,EAARJ,IAC7BG,EAAQG,OAAO,EAAQ,GAAJD,GACnBF,EAAQI,QAAQP,EAAQK,EAAGA,GAC3BF,EAAQI,OAAOP,EAAQK,EAAGA,GAC1BF,EAAQK,cAQhB,SAASC,EAAgBC,EAASnD,EAAWoD,GAQzC,GAPIpD,EACwB,iBAAbA,IACPA,EAAY,CAAEqD,QAASrD,IAG3BA,EAAY,CAAEqD,QAAS,IAEL,iBAAXF,EAAqB,CAC5B,MAAMG,EAAK,yCACX,IAAIzL,EAAOxG,EAAMrC,EAAKuU,EACtB,MAAMlH,EAAU,GAChB,KAAsC,QAA9BxE,EAAQyL,EAAGxD,KAAKqD,KACpB9R,EAAOwG,EAAM,GACb7I,EAAM6I,EAAM,GAAGzG,OAASyG,EAAM,GAAGwE,QAAQ,WAAY,IAAM,KAC3DkH,EAAqBH,EACJ,MAAbpD,GAAyC,iBAAbA,QAAkD,IAAlBA,EAAUhR,KACtEuU,EAAqBvD,EAAUhR,IAAQgR,EAAUhR,GAAKoC,OAAS,IAAM,KAEzEiL,EAAQ/H,KAAK,CAAEjD,KAAMA,EAAM2O,UAAWuD,IAE1C,IAAK,IAAIC,KAAKnH,EACV8G,EAAUA,EAAQ9G,QAAQA,EAAQmH,GAAGnS,KAAMgL,EAAQmH,GAAGxD,gBAEvD,GAAsB,iBAAXmD,GAAkC,MAAXA,EAAiB,CACtD,QAAgC,IAArBA,EAAQnD,UAA0B,CAEzCA,EAAYyD,EAAMzD,EADmC,iBAArBmD,EAAQnD,UAAyB,CAAEqD,QAASF,EAAQnD,WAAcmD,EAAQnD,WAG9G,IAAI0D,EAAoBC,EACxB,IAAK,IAAIC,KAAYT,EACA,cAAbS,IAGJF,EAAqBR,EAAgBC,EAAQS,GAAW5D,EAAWoD,GACnEO,EAAsBT,EAAgBU,EAAU5D,EAAWoD,GACvDQ,IAAaD,UACNR,EAAQS,GAEnBT,EAAQQ,GAAuBD,GAGvC,OAAOP,EAcX,SAASM,EAAMI,EAAeC,GAC1B,GAA6B,iBAAlBD,GAAwD,iBAAnBC,EAC5C,MAAM,IAAI1T,MAAM,mEAAmEyT,aAAyBC,WAEhH,IAAK,IAAIF,KAAYE,EAAgB,CACjC,IAAK5U,OAAOM,UAAUC,eAAeC,KAAKoU,EAAgBF,GACtD,SAKJ,IAAIG,EAA0C,OAA5BF,EAAcD,GAAqB,mBAAqBC,EAAcD,GACpFI,SAAsBF,EAAeF,GAQzC,GAPoB,WAAhBG,GAA4BtT,MAAMqD,QAAQ+P,EAAcD,MACxDG,EAAc,SAEG,WAAjBC,GAA6BvT,MAAMqD,QAAQgQ,EAAeF,MAC1DI,EAAe,SAGC,aAAhBD,GAA+C,aAAjBC,EAC9B,MAAM,IAAI5T,MAAM,oEAGA,cAAhB2T,EAKgB,WAAhBA,GAA6C,WAAjBC,IAC5BH,EAAcD,GAAYH,EAAMI,EAAcD,GAAWE,EAAeF,KALxEC,EAAcD,GAAYK,EAASH,EAAeF,IAS1D,OAAOC,EAGX,SAASI,EAAS5T,GACd,OAAO+E,KAAKC,MAAMD,KAAKkH,UAAUjM,IAQrC,SAAS6T,EAAaC,GAClB,IAAKA,EACD,OAAO,KAEX,GAAc,iBAAVA,EAEA,OAAOxB,EAGX,MAAMyB,EAAe,SAASD,EAAME,OAAO,GAAGC,cAAgBH,EAAM5C,MAAM,KAC1E,OAAO,EAAG6C,IAAiB,KAoB/B,SAASG,EAAYC,EAAQC,EAAUC,EAAUC,GAAkB,GAC/D,MAAMC,SAAmBJ,EAEzB,GAAI/T,MAAMqD,QAAQ0Q,GACd,OAAOA,EAAO7P,KAAKtE,GAASkU,EAAYlU,EAAMoU,EAAUC,EAAUC,KAC/D,GAAkB,WAAdC,GAAqC,OAAXJ,EACjC,OAAOtV,OAAOyB,KAAK6T,GAAQxI,QACvB,CAACC,EAAKjN,KACFiN,EAAIjN,GAAOuV,EAAYC,EAAOxV,GAAMyV,EAAUC,EAAUC,GACjD1I,IACR,IAEJ,GAAkB,WAAd2I,EAEP,OAAOJ,EACJ,CAKH,MAAMK,EAAUJ,EAASpI,QAAQ,sBAAuB,QAExD,GAAIsI,EAAiB,CAGjB,MAAMG,EAAe,IAAI/M,OAAO,GAAG8M,WAAkB,MAC7BL,EAAO3M,MAAMiN,IAAiB,IACvChQ,SAASiQ,GAAc9T,QAAQC,KAAK,wEAAwE6T,8DAI/H,MAAMrN,EAAQ,IAAIK,OAAO,GAAG8M,YAAmB,KAC/C,OAAOL,EAAOnI,QAAQ3E,EAAOgN,IAcrC,SAASM,EAAaR,EAAQjC,EAAU0C,GACpC,ODaJ,SAAgBpR,EAAMuI,EAAO8I,GAEzB,OAD2BhD,EAAOrO,EAAMuI,GACdzH,KAAI,EAAEuM,EAAQlS,EAAKmW,MACzC,MAAMC,EAA0C,mBAAtBF,EAAoCA,EAAkBC,GAAaD,EAE7F,OADAhE,EAAOlS,GAAOoW,EACPA,KClBJC,CACHb,EACAjC,EACA0C,GAYR,SAASK,EAAYd,EAAQjC,GACzB,ODfJ,SAAe1O,EAAMuI,GACjB,OAAO8F,EAAOrO,EAAMuI,GAAOzH,KAAKtE,GAASA,EAAK,KCcvC+L,CAAMoI,EAAQjC,GCrJzB,QA1DA,MACI,YAAYjF,GACRvN,KAAKwV,SAAWjI,EAGpB,iBAAiB7K,GAGb,IAAI+S,EAAW,GAEXlC,EAAK,iCAaT,OAZA7Q,EAAOqC,SAAQ,SAAS2Q,GACpB,IAAI5F,EAAQyD,EAAGxD,KAAK2F,GAChB/H,EAAKmC,EAAM,IAAM,OACjBD,EAAQC,EAAM,GACdrL,EAAQ,MAAeqL,EAAM,SACN,IAAhB2F,EAAS9H,KAChB8H,EAAS9H,GAAM,CAACnJ,SAAS,GAAI9B,OAAO,GAAI+B,MAAM,KAElDgR,EAAS9H,GAAInJ,SAASD,KAAKmR,GAC3BD,EAAS9H,GAAIjL,OAAO6B,KAAKsL,GACzB4F,EAAS9H,GAAIlJ,MAAMF,KAAKE,MAErBgR,EASX,QAAQjT,EAAOE,GAiBX,IAhBA,IAAI+S,EAAWzV,KAAK2V,iBAAiBjT,GAEjCkT,EAAkBzW,OAAOyB,KAAK6U,GAAU7Q,KAAK3F,IAC7C,IAAKe,KAAKwV,SAASlW,IAAIL,GACnB,MAAM,IAAIoB,MAAM,4BAA4BpB,eAEhD,OAAOe,KAAKwV,SAASlW,IAAIL,GAAK4W,QAC1BrT,EACAiT,EAASxW,GAAKyD,OACd+S,EAASxW,GAAKuF,SACdiR,EAASxW,GAAKwF,UAKlBqR,EAAMpS,QAAQC,QAAQ,CAACmC,OAAO,GAAIC,KAAM,GAAIZ,SAAU,KACjDf,EAAI,EAAGA,EAAIwR,EAAgBvU,OAAQ+C,IAExC0R,EAAMA,EAAI5S,KAAK0S,EAAgBxR,IAEnC,OAAO0R,ICjDf,SAASC,IACL,MAAO,CACHC,SAAS,EACTxD,SAAU,KACVyD,iBAAkB,KAClBC,WAAY,KAQZC,KAAM,CAACC,EAASC,KACPrW,KAAKsW,QAAQN,UACdhW,KAAKsW,QAAQ9D,SAAW,SAAUxS,KAAKuW,YAAYC,IAAIC,OAAOC,YAAYC,OAAO,OAC5E9F,KAAK,QAAS,cACdA,KAAK,KAAM,GAAG7Q,KAAKiH,cACxBjH,KAAKsW,QAAQL,iBAAmBjW,KAAKsW,QAAQ9D,SAASoE,OAAO,OACxD/F,KAAK,QAAS,sBACnB7Q,KAAKsW,QAAQ9D,SAASoE,OAAO,OACxB/F,KAAK,QAAS,sBAAsBgG,KAAK,WACzCC,GAAG,SAAS,IAAM9W,KAAKsW,QAAQS,SACpC/W,KAAKsW,QAAQN,SAAU,GAEpBhW,KAAKsW,QAAQU,OAAOZ,EAASC,IASxCW,OAAQ,CAACZ,EAASC,KACd,IAAKrW,KAAKsW,QAAQN,QACd,OAAOhW,KAAKsW,QAEhBW,aAAajX,KAAKsW,QAAQJ,YAER,iBAAPG,GACPa,GAAYlX,KAAKsW,QAAQ9D,SAAU6D,GAGvC,MAAMc,EAAcnX,KAAKoX,iBAGnBC,EAASrX,KAAKyU,OAAO4C,QAAUrX,KAAKsX,cAa1C,OAZAtX,KAAKsW,QAAQ9D,SACR+E,MAAM,MAAO,GAAGJ,EAAYpE,OAC5BwE,MAAM,OAAQ,GAAGJ,EAAY3Q,OAC7B+Q,MAAM,QAAS,GAAGvX,KAAKuW,YAAY9B,OAAO+C,WAC1CD,MAAM,SAAU,GAAGF,OACxBrX,KAAKsW,QAAQL,iBACRsB,MAAM,YAAgBvX,KAAKuW,YAAY9B,OAAO+C,MAAQ,GAAnC,MACnBD,MAAM,aAAiBF,EAAS,GAAZ,MAEH,iBAAXjB,GACPpW,KAAKsW,QAAQL,iBAAiBY,KAAKT,GAEhCpW,KAAKsW,SAOhBS,KAAOU,GACEzX,KAAKsW,QAAQN,QAIE,iBAATyB,GACPR,aAAajX,KAAKsW,QAAQJ,YAC1BlW,KAAKsW,QAAQJ,WAAawB,WAAW1X,KAAKsW,QAAQS,KAAMU,GACjDzX,KAAKsW,UAGhBtW,KAAKsW,QAAQ9D,SAASmF,SACtB3X,KAAKsW,QAAQ9D,SAAW,KACxBxS,KAAKsW,QAAQL,iBAAmB,KAChCjW,KAAKsW,QAAQN,SAAU,EAChBhW,KAAKsW,SAbDtW,KAAKsW,SA2B5B,SAASsB,KACL,MAAO,CACH5B,SAAS,EACTxD,SAAU,KACVyD,iBAAkB,KAClB4B,kBAAmB,KACnBC,gBAAiB,KAMjB3B,KAAOC,IAEEpW,KAAK+X,OAAO/B,UACbhW,KAAK+X,OAAOvF,SAAW,SAAUxS,KAAKuW,YAAYC,IAAIC,OAAOC,YAAYC,OAAO,OAC3E9F,KAAK,QAAS,aACdA,KAAK,KAAM,GAAG7Q,KAAKiH,aACxBjH,KAAK+X,OAAO9B,iBAAmBjW,KAAK+X,OAAOvF,SAASoE,OAAO,OACtD/F,KAAK,QAAS,qBACnB7Q,KAAK+X,OAAOF,kBAAoB7X,KAAK+X,OAAOvF,SACvCoE,OAAO,OACP/F,KAAK,QAAS,gCACd+F,OAAO,OACP/F,KAAK,QAAS,sBAEnB7Q,KAAK+X,OAAO/B,SAAU,OACA,IAAXI,IACPA,EAAU,eAGXpW,KAAK+X,OAAOf,OAAOZ,IAS9BY,OAAQ,CAACZ,EAAS4B,KACd,IAAKhY,KAAK+X,OAAO/B,QACb,OAAOhW,KAAK+X,OAEhBd,aAAajX,KAAK+X,OAAO7B,YAEH,iBAAXE,GACPpW,KAAK+X,OAAO9B,iBAAiBY,KAAKT,GAGtC,MACMe,EAAcnX,KAAKoX,iBACnBa,EAAmBjY,KAAK+X,OAAOvF,SAASiE,OAAOyB,wBAUrD,OATAlY,KAAK+X,OAAOvF,SACP+E,MAAM,MAAUJ,EAAYpE,EAAI/S,KAAKyU,OAAO4C,OAASY,EAAiBZ,OAJ3D,EAIE,MACbE,MAAM,OAAQ,GAAGJ,EAAY3Q,EALlB,OAQM,iBAAXwR,GACPhY,KAAK+X,OAAOF,kBACPN,MAAM,QAAS,GAAGjJ,KAAK6J,IAAI7J,KAAK8J,IAAIJ,EAAS,GAAI,SAEnDhY,KAAK+X,QAOhBM,QAAS,KACLrY,KAAK+X,OAAOF,kBAAkBS,QAAQ,+BAA+B,GAC9DtY,KAAK+X,QAOhBQ,oBAAsBP,IAClBhY,KAAK+X,OAAOF,kBAAkBS,QAAQ,+BAA+B,GAC9DtY,KAAK+X,OAAOf,OAAO,KAAMgB,IAOpCjB,KAAOU,GACEzX,KAAK+X,OAAO/B,QAIG,iBAATyB,GACPR,aAAajX,KAAK+X,OAAO7B,YACzBlW,KAAK+X,OAAO7B,WAAawB,WAAW1X,KAAK+X,OAAOhB,KAAMU,GAC/CzX,KAAK+X,SAGhB/X,KAAK+X,OAAOvF,SAASmF,SACrB3X,KAAK+X,OAAOvF,SAAW,KACvBxS,KAAK+X,OAAO9B,iBAAmB,KAC/BjW,KAAK+X,OAAOF,kBAAoB,KAChC7X,KAAK+X,OAAOD,gBAAkB,KAC9B9X,KAAK+X,OAAO/B,SAAU,EACfhW,KAAK+X,QAfD/X,KAAK+X,QA2B5B,SAASb,GAAYsB,EAAWC,GAC5BA,EAASA,GAAU,GACnB,IAAK,IAAKjZ,EAAMM,KAAUX,OAAO4O,QAAQ0K,GACrCD,EAAUjB,MAAM/X,EAAMM,GCvN9B,MAAM4Y,GAYF,YAAYjE,EAAQtD,GAEhBnR,KAAKyU,OAASA,GAAU,GACnBzU,KAAKyU,OAAOkE,QACb3Y,KAAKyU,OAAOkE,MAAQ,QAIxB3Y,KAAKmR,OAASA,GAAU,KAKxBnR,KAAK4Y,aAAe,KAEpB5Y,KAAKuW,YAAc,KAMnBvW,KAAK6Y,WAAa,KACd7Y,KAAKmR,SACoB,UAArBnR,KAAKmR,OAAOrD,MACZ9N,KAAK4Y,aAAe5Y,KAAKmR,OAAOA,OAChCnR,KAAKuW,YAAcvW,KAAKmR,OAAOA,OAAOA,OACtCnR,KAAK6Y,WAAa7Y,KAAK4Y,eAEvB5Y,KAAKuW,YAAcvW,KAAKmR,OAAOA,OAC/BnR,KAAK6Y,WAAa7Y,KAAKuW,cAI/BvW,KAAKwS,SAAW,KAMhBxS,KAAK8Y,OAAS,KAOd9Y,KAAK+Y,SAAU,EACV/Y,KAAKyU,OAAOvN,WACblH,KAAKyU,OAAOvN,SAAW,QAQ/B,OACI,GAAKlH,KAAKmR,QAAWnR,KAAKmR,OAAOqB,SAAjC,CAGA,IAAKxS,KAAKwS,SAAU,CAChB,MAAMwG,EAAkB,CAAC,QAAS,SAAU,OAAOlX,SAAS9B,KAAKyU,OAAOuE,gBAAkB,qBAAqBhZ,KAAKyU,OAAOuE,iBAAmB,GAC9IhZ,KAAKwS,SAAWxS,KAAKmR,OAAOqB,SAASoE,OAAO,OACvC/F,KAAK,QAAS,cAAc7Q,KAAKyU,OAAOvN,WAAW8R,KACpDhZ,KAAKyU,OAAO8C,OACZL,GAAYlX,KAAKwS,SAAUxS,KAAKyU,OAAO8C,OAEb,mBAAnBvX,KAAKiZ,YACZjZ,KAAKiZ,aAQb,OALIjZ,KAAK8Y,QAAiC,gBAAvB9Y,KAAK8Y,OAAOI,QAC3BlZ,KAAK8Y,OAAOK,KAAKhD,OAErBnW,KAAKwS,SAAS+E,MAAM,aAAc,WAClCvX,KAAKgX,SACEhX,KAAKkH,YAOhB,UAOA,WAII,OAHIlH,KAAK8Y,QACL9Y,KAAK8Y,OAAOK,KAAKjS,WAEdlH,KAOX,gBACI,QAAIA,KAAK+Y,YAGC/Y,KAAK8Y,SAAU9Y,KAAK8Y,OAAOC,SAOzC,OACI,OAAK/Y,KAAKwS,UAAYxS,KAAKoZ,kBAGvBpZ,KAAK8Y,QACL9Y,KAAK8Y,OAAOK,KAAKpC,OAErB/W,KAAKwS,SAAS+E,MAAM,aAAc,WALvBvX,KAcf,QAAQqZ,GAIJ,YAHoB,IAATA,IACPA,GAAQ,GAEPrZ,KAAKwS,UAGNxS,KAAKoZ,kBAAoBC,IAGzBrZ,KAAK8Y,QAAU9Y,KAAK8Y,OAAOK,MAC3BnZ,KAAK8Y,OAAOK,KAAKG,UAErBtZ,KAAKwS,SAASmF,SACd3X,KAAKwS,SAAW,KAChBxS,KAAK8Y,OAAS,MAPH9Y,MAHAA,MAuBnB,MAAMuZ,GACF,YAAYpI,GACR,KAAMA,aAAkBuH,IACpB,MAAM,IAAIrY,MAAM,0DAGpBL,KAAKmR,OAASA,EAEdnR,KAAK4Y,aAAe5Y,KAAKmR,OAAOyH,aAEhC5Y,KAAKuW,YAAcvW,KAAKmR,OAAOoF,YAE/BvW,KAAK6Y,WAAa7Y,KAAKmR,OAAO0H,WAG9B7Y,KAAKwZ,eAAiBxZ,KAAKmR,OAAOA,OAElCnR,KAAKwS,SAAW,KAMhBxS,KAAKyZ,IAAM,IAOXzZ,KAAK6W,KAAO,GAOZ7W,KAAK0Z,MAAQ,GAMb1Z,KAAK2Y,MAAQ,OAOb3Y,KAAKuX,MAAQ,GAQbvX,KAAK+Y,SAAU,EAOf/Y,KAAK2Z,WAAY,EAOjB3Z,KAAKkZ,OAAS,GAQdlZ,KAAKmZ,KAAO,CACRS,eAAgB,KAChBC,eAAgB,KAChBC,gBAAiB,EACjBC,QAAQ,EAIR5D,KAAM,KACGnW,KAAKmZ,KAAKS,iBACX5Z,KAAKmZ,KAAKS,eAAiB,SAAU5Z,KAAKuW,YAAYC,IAAIC,OAAOC,YAAYE,OAAO,OAC/E/F,KAAK,QAAS,mCAAmC7Q,KAAK2Y,SACtD9H,KAAK,KAAM,GAAG7Q,KAAK6Y,WAAWmB,4BACnCha,KAAKmZ,KAAKU,eAAiB7Z,KAAKmZ,KAAKS,eAAehD,OAAO,OACtD/F,KAAK,QAAS,2BACnB7Q,KAAKmZ,KAAKU,eAAe/C,GAAG,UAAU,KAClC9W,KAAKmZ,KAAKW,gBAAkB9Z,KAAKmZ,KAAKU,eAAepD,OAAOwD,cAGpEja,KAAKmZ,KAAKS,eAAerC,MAAM,aAAc,WAC7CvX,KAAKmZ,KAAKY,QAAS,EACZ/Z,KAAKmZ,KAAKnC,UAKrBA,OAAQ,IACChX,KAAKmZ,KAAKS,gBAGf5Z,KAAKmZ,KAAKe,WACNla,KAAKmZ,KAAKU,iBACV7Z,KAAKmZ,KAAKU,eAAepD,OAAOwD,UAAYja,KAAKmZ,KAAKW,iBAEnD9Z,KAAKmZ,KAAKjS,YANNlH,KAAKmZ,KAQpBjS,SAAU,KACN,IAAKlH,KAAKmZ,KAAKS,eACX,OAAO5Z,KAAKmZ,KAGhBnZ,KAAKmZ,KAAKS,eAAerC,MAAM,SAAU,MACzC,MAGMJ,EAAcnX,KAAK6Y,WAAWzB,iBAC9B+C,EAAkBC,SAASC,gBAAgBJ,WAAaG,SAASrU,KAAKkU,UACtEK,EAAmBta,KAAKuW,YAAYgE,qBACpCC,EAAsBxa,KAAKwZ,eAAehH,SAASiE,OAAOyB,wBAC1DuC,EAAqBza,KAAKwS,SAASiE,OAAOyB,wBAC1CwC,EAAmB1a,KAAKmZ,KAAKS,eAAenD,OAAOyB,wBACnDyC,EAAuB3a,KAAKmZ,KAAKU,eAAepD,OAAOmE,aAC7D,IAAIC,EACA3Q,EAC6B,UAA7BlK,KAAKwZ,eAAe1L,MACpB+M,EAAO1D,EAAYpE,EAAIyH,EAAoBnD,OAAS,EACpDnN,EAAOoE,KAAK8J,IAAIjB,EAAY3Q,EAAIxG,KAAKuW,YAAY9B,OAAO+C,MAAQkD,EAAiBlD,MAdrE,EAcsFL,EAAY3Q,EAdlG,KAgBZqU,EAAMJ,EAAmBK,OAASX,EAhBtB,EAgBkDG,EAAiBO,IAC/E3Q,EAAOoE,KAAK8J,IAAIqC,EAAmBvQ,KAAOuQ,EAAmBjD,MAAQkD,EAAiBlD,MAAQ8C,EAAiBpQ,KAAMiN,EAAY3Q,EAjBrH,IAmBhB,MAAMuU,EAAiBzM,KAAK8J,IAAIpY,KAAKuW,YAAY9B,OAAO+C,MAAQ,EAlBtC,OAmBpBwD,EAAsBD,EACtBE,EAAqBF,EAAiB,GACtCG,EAAkB5M,KAAK8J,IAAIpY,KAAK6Y,WAAWpE,OAAO4C,OAAS,GApBrC,OAqBtBA,EAAS/I,KAAK6J,IAAIwC,EArBI,GAqBwCO,GAUpE,OATAlb,KAAKmZ,KAAKS,eACLrC,MAAM,MAAO,GAAGsD,OAChBtD,MAAM,OAAQ,GAAGrN,OACjBqN,MAAM,YAAa,GAAGyD,OACtBzD,MAAM,aAAc,GAAG2D,OACvB3D,MAAM,SAAU,GAAGF,OACxBrX,KAAKmZ,KAAKU,eACLtC,MAAM,YAAa,GAAG0D,OAC3Bjb,KAAKmZ,KAAKU,eAAepD,OAAOwD,UAAYja,KAAKmZ,KAAKW,gBAC/C9Z,KAAKmZ,MAEhBpC,KAAM,IACG/W,KAAKmZ,KAAKS,gBAGf5Z,KAAKmZ,KAAKS,eAAerC,MAAM,aAAc,UAC7CvX,KAAKmZ,KAAKY,QAAS,EACZ/Z,KAAKmZ,MAJDnZ,KAAKmZ,KAMpBG,QAAS,IACAtZ,KAAKmZ,KAAKS,gBAGf5Z,KAAKmZ,KAAKU,eAAelC,SACzB3X,KAAKmZ,KAAKS,eAAejC,SACzB3X,KAAKmZ,KAAKU,eAAiB,KAC3B7Z,KAAKmZ,KAAKS,eAAiB,KACpB5Z,KAAKmZ,MANDnZ,KAAKmZ,KAepBe,SAAU,KACN,MAAM,IAAI7Z,MAAM,+BAMpB8a,YAAcC,IAC2B,mBAA1BA,GACPpb,KAAKmZ,KAAKe,SAAWkB,EACrBpb,KAAKqb,YAAW,KACRrb,KAAKmZ,KAAKY,QACV/Z,KAAKmZ,KAAKhD,OACVnW,KAAKsb,YAAYtE,SACjBhX,KAAK+Y,SAAU,IAEf/Y,KAAKmZ,KAAKpC,OACV/W,KAAKsb,WAAU,GAAOtE,SACjBhX,KAAK2Z,YACN3Z,KAAK+Y,SAAU,QAK3B/Y,KAAKqb,aAEFrb,OAWnB,SAAU2Y,GAQN,YAPoB,IAATA,IACH,CAAC,OAAQ,MAAO,SAAU,SAAU,QAAS,OAAQ,UAAU7W,SAAS6W,GACxE3Y,KAAK2Y,MAAQA,EAEb3Y,KAAK2Y,MAAQ,QAGd3Y,KAQX,aAAcub,GAUV,OARIA,OADe,IAARA,GAGAC,QAAQD,GAEnBvb,KAAK2Z,UAAY4B,EACbvb,KAAK2Z,YACL3Z,KAAK+Y,SAAU,GAEZ/Y,KAOX,gBACI,OAAOA,KAAK2Z,WAAa3Z,KAAK+Y,QAQlC,SAAUxB,GAIN,YAHoB,IAATA,IACPvX,KAAKuX,MAAQA,GAEVvX,KAOX,WACI,MAAMgZ,EAAkB,CAAC,QAAS,SAAU,OAAOlX,SAAS9B,KAAKmR,OAAOsD,OAAOuE,gBAAkB,4BAA4BhZ,KAAKmR,OAAOsD,OAAOuE,iBAAmB,GACnK,MAAO,uCAAuChZ,KAAK2Y,QAAQ3Y,KAAKkZ,OAAS,IAAIlZ,KAAKkZ,SAAW,KAAKF,IAOtG,UAAYE,GAIR,YAHqB,IAAVA,GAAyB,CAAC,GAAI,cAAe,YAAYpX,SAASoX,KACzElZ,KAAKkZ,OAASA,GAEXlZ,KAAKgX,SAQhB,UAAWuE,GAMP,OAJIA,OADe,IAARA,GAGAC,QAAQD,IAGRvb,KAAKyb,UAAU,eACC,gBAAhBzb,KAAKkZ,OACLlZ,KAAKyb,UAAU,IAEnBzb,KAQX,QAASub,GAML,OAJIA,OADe,IAARA,GAGAC,QAAQD,IAGRvb,KAAKyb,UAAU,YACC,aAAhBzb,KAAKkZ,OACLlZ,KAAKyb,UAAU,IAEnBzb,KAKX,eAEA,eAAgB0b,GAMZ,OAJI1b,KAAK0b,YADiB,mBAAfA,EACYA,EAEA,aAEhB1b,KAIX,cAEA,cAAe2b,GAMX,OAJI3b,KAAK2b,WADgB,mBAAdA,EACWA,EAEA,aAEf3b,KAIX,WAEA,WAAY4b,GAMR,OAJI5b,KAAK4b,QADa,mBAAXA,EACQA,EAEA,aAEZ5b,KAQX,SAAS0Z,GAIL,YAHoB,IAATA,IACP1Z,KAAK0Z,MAAQA,EAAM7M,YAEhB7M,KAUX,QAAQ6W,GAIJ,YAHmB,IAARA,IACP7W,KAAK6W,KAAOA,EAAKhK,YAEd7M,KAOX,OACI,GAAKA,KAAKmR,OAOV,OAJKnR,KAAKwS,WACNxS,KAAKwS,SAAWxS,KAAKmR,OAAOqB,SAASoE,OAAO5W,KAAKyZ,KAC5C5I,KAAK,QAAS7Q,KAAK6b,aAErB7b,KAAKgX,SAOhB,YACI,OAAOhX,KAOX,SACI,OAAKA,KAAKwS,UAGVxS,KAAK8b,YACL9b,KAAKwS,SACA3B,KAAK,QAAS7Q,KAAK6b,YACnBhL,KAAK,QAAS7Q,KAAK0Z,OACnB5C,GAAG,YAA8B,aAAhB9W,KAAKkZ,OAAyB,KAAOlZ,KAAK0b,aAC3D5E,GAAG,WAA6B,aAAhB9W,KAAKkZ,OAAyB,KAAOlZ,KAAK2b,YAC1D7E,GAAG,QAA0B,aAAhB9W,KAAKkZ,OAAyB,KAAOlZ,KAAK4b,SACvD/E,KAAK7W,KAAK6W,MACVlX,KAAKuX,GAAalX,KAAKuX,OAE5BvX,KAAKmZ,KAAKnC,SACVhX,KAAK+b,aACE/b,MAdIA,KAqBf,aACI,OAAOA,KAOX,OAKI,OAJIA,KAAKwS,WAAaxS,KAAKoZ,kBACvBpZ,KAAKwS,SAASmF,SACd3X,KAAKwS,SAAW,MAEbxS,MAYf,MAAMgc,WAActD,GAChB,OAMI,OALK1Y,KAAKic,eACNjc,KAAKic,aAAejc,KAAKmR,OAAOqB,SAASoE,OAAO,OAC3C/F,KAAK,QAAS,+BAA+B7Q,KAAKyU,OAAOvN,YAC9DlH,KAAKkc,eAAiBlc,KAAKic,aAAarF,OAAO,OAE5C5W,KAAKgX,SAGhB,SACI,IAAI0C,EAAQ1Z,KAAKyU,OAAOiF,MAAM7M,WAK9B,OAJI7M,KAAKyU,OAAO0H,WACZzC,GAAS,WAAW1Z,KAAKyU,OAAO0H,oBAEpCnc,KAAKkc,eAAerF,KAAK6C,GAClB1Z,MAaf,MAAMoc,WAAoB1D,GACtB,SAcI,OAbKrK,MAAMrO,KAAKuW,YAAY/T,MAAMM,QAAWuL,MAAMrO,KAAKuW,YAAY/T,MAAMO,MAClC,OAAjC/C,KAAKuW,YAAY/T,MAAMM,OAAiD,OAA/B9C,KAAKuW,YAAY/T,MAAMO,IAInE/C,KAAKwS,SAAS+E,MAAM,UAAW,SAH/BvX,KAAKwS,SAAS+E,MAAM,UAAW,MAC/BvX,KAAKwS,SAASqE,KAAKwF,GAAoBrc,KAAKuW,YAAY/T,MAAMO,IAAM/C,KAAKuW,YAAY/T,MAAMM,MAAO,MAAM,KAIxG9C,KAAKyU,OAAO6H,OACZtc,KAAKwS,SAAS3B,KAAK,QAAS7Q,KAAKyU,OAAO6H,OAExCtc,KAAKyU,OAAO8C,OACZL,GAAYlX,KAAKwS,SAAUxS,KAAKyU,OAAO8C,OAEpCvX,MAgBf,MAAMuc,WAAoB7D,GAatB,YAAYjE,EAAQtD,GAGhB,GAFA9K,MAAMoO,EAAQtD,IAETnR,KAAK4Y,aACN,MAAM,IAAIvY,MAAM,oDAIpB,GADAL,KAAKwc,YAAcxc,KAAK4Y,aAAa6D,YAAYhI,EAAOiI,aACnD1c,KAAKwc,YACN,MAAM,IAAInc,MAAM,6DAA6DoU,EAAOiI,eASxF,GANA1c,KAAK2c,YAAclI,EAAOmI,mBAAqB,6BAC/C5c,KAAK6c,OAASpI,EAAO5E,MACrB7P,KAAK8c,oBAAsBrI,EAAOsI,mBAClC/c,KAAKgd,UAAYvI,EAAOwI,SACxBjd,KAAKkd,WAAa,KAClBld,KAAKmd,WAAa1I,EAAO2I,WAAa,UACjC,CAAC,SAAU,UAAUtb,SAAS9B,KAAKmd,YACpC,MAAM,IAAI9c,MAAM,0CAGpBL,KAAKqd,gBAAkB,KAG3B,aAESrd,KAAKwc,YAAY/H,OAAO6I,UACzBtd,KAAKwc,YAAY/H,OAAO6I,QAAU,IAEtC,IAAIC,EAASvd,KAAKwc,YAAY/H,OAAO6I,QAChCjS,MAAM/K,GAASA,EAAKuP,QAAU7P,KAAK6c,QAAUvc,EAAK2c,WAAajd,KAAKgd,aAAehd,KAAKkd,YAAc5c,EAAK2G,KAAOjH,KAAKkd,cAS5H,OAPKK,IACDA,EAAS,CAAE1N,MAAO7P,KAAK6c,OAAQI,SAAUjd,KAAKgd,UAAWld,MAAO,MAC5DE,KAAKkd,aACLK,EAAW,GAAIvd,KAAKkd,YAExBld,KAAKwc,YAAY/H,OAAO6I,QAAQ/Y,KAAKgZ,IAElCA,EAIX,eACI,GAAIvd,KAAKwc,YAAY/H,OAAO6I,QAAS,CACjC,MAAME,EAAQxd,KAAKwc,YAAY/H,OAAO6I,QAAQ9R,QAAQxL,KAAKyd,cAC3Dzd,KAAKwc,YAAY/H,OAAO6I,QAAQI,OAAOF,EAAO,IAQtD,WAAW1d,GACP,GAAc,OAAVA,EAEAE,KAAKqd,gBACA9F,MAAM,SAAU,iBAChBA,MAAM,QAAS,OACpBvX,KAAK2d,mBACF,CACY3d,KAAKyd,aACb3d,MAAQA,EAEnBE,KAAK6Y,WAAW+E,KAAK5d,KAAK2c,YAAa,CAAE9M,MAAO7P,KAAK6c,OAAQI,SAAUjd,KAAKgd,UAAWld,QAAO+d,UAAW7d,KAAKkd,aAAc,GAOhI,YACI,IAAIpd,EAAQE,KAAKqd,gBAAgBxJ,SAAS,SAC1C,OAAc,OAAV/T,GAA4B,KAAVA,GAGE,WAApBE,KAAKmd,aACLrd,GAASA,EACLge,OAAOzP,MAAMvO,IAJV,KAQJA,EAGX,SACQE,KAAKqd,kBAGTrd,KAAKwS,SAAS+E,MAAM,UAAW,SAG/BvX,KAAKwS,SACAoE,OAAO,QACPC,KAAK7W,KAAK8c,qBACVvF,MAAM,aAAc,QACpBA,MAAM,eAAgB,OAE3BvX,KAAKwS,SAASoE,OAAO,QAChBtT,KAAKtD,KAAKgd,WACVzF,MAAM,UAAW,SACjBA,MAAM,aAAc,QAEzBvX,KAAKqd,gBAAkBrd,KAAKwS,SACvBoE,OAAO,SACP/F,KAAK,OAAQ7Q,KAAKyU,OAAOsJ,YAAc,GACvCjH,GAAG,QD5kBhB,SAAkBpH,EAAM+H,EAAQ,KAC5B,IAAIuG,EACJ,MAAO,KACH/G,aAAa+G,GACbA,EAAQtG,YACJ,IAAMhI,EAAKuO,MAAMje,KAAMoB,YACvBqW,ICskBayG,EAAS,KAElBle,KAAKqd,gBACA9F,MAAM,SAAU,MAChBA,MAAM,QAAS,MACpB,MAAMzX,EAAQE,KAAKme,YACnBne,KAAKoe,WAAWte,GAChBE,KAAK4Y,aAAayF,WACnB,QA2Bf,MAAMC,WAAoB5F,GAOtB,YAAYjE,EAAQtD,GAChB9K,MAAMoO,EAAQtD,GACdnR,KAAKue,UAAYve,KAAKyU,OAAO+J,UAAY,gBACzCxe,KAAKye,aAAeze,KAAKyU,OAAOiK,aAAe,WAC/C1e,KAAK2e,cAAgB3e,KAAKyU,OAAOmK,cAAgB,wBACjD5e,KAAK2c,YAAclI,EAAOmI,mBAAqB,kBAGnD,SACI,OAAI5c,KAAK8Y,SAGT9Y,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ9e,KAAKye,cACbM,SAAS/e,KAAK2e,eACdK,gBAAe,KACZhf,KAAK8Y,OAAOtG,SACP8F,QAAQ,mCAAmC,GAC3CzB,KAAK,mBACV7W,KAAKif,cAAc/b,MAAMF,IACrB,MAAMkc,EAAMlf,KAAK8Y,OAAOtG,SAAS3B,KAAK,QAClCqO,GAEAC,IAAIC,gBAAgBF,GAExBlf,KAAK8Y,OAAOtG,SACP3B,KAAK,OAAQ7N,GACbsV,QAAQ,mCAAmC,GAC3CA,QAAQ,sCAAsC,GAC9CzB,KAAK7W,KAAKye,oBAGtBY,eAAc,KACXrf,KAAK8Y,OAAOtG,SAAS8F,QAAQ,sCAAsC,MAE3EtY,KAAK8Y,OAAO3C,OACZnW,KAAK8Y,OAAOtG,SACP3B,KAAK,YAAa,iBAClBA,KAAK,WAAY7Q,KAAKue,WACtBzH,GAAG,SAAS,IAAM9W,KAAK6Y,WAAW+E,KAAK5d,KAAK2c,YAAa,CAAE6B,SAAUxe,KAAKue,YAAa,MA9BjFve,KAwCf,QAAQsf,GAIJ,MAAMC,EAAmB,wBAGzB,IAAIC,EAAmB,GACvB,IAAK,IAAIpb,EAAI,EAAGA,EAAIgW,SAASqF,YAAYpe,OAAQ+C,IAAK,CAClD,MAAMgL,EAAIgL,SAASqF,YAAYrb,GAC/B,IACI,IAAKgL,EAAEsQ,SACH,SAEN,MAAQ3O,GACN,GAAe,kBAAXA,EAAE5Q,KACF,MAAM4Q,EAEV,SAEJ,IAAI2O,EAAWtQ,EAAEsQ,SACjB,IAAK,IAAItb,EAAI,EAAGA,EAAIsb,EAASre,OAAQ+C,IAAK,CAItC,MAAMub,EAAOD,EAAStb,GACJub,EAAKC,cAAgBD,EAAKC,aAAa9X,MAAMyX,KAE3DC,GAAoBG,EAAKE,UAIrC,OAAOL,EAGX,WAAYK,EAASzM,GAEjB,IAAI0M,EAAe1F,SAAS2F,cAAc,SAC1CD,EAAaE,aAAa,OAAQ,YAClCF,EAAaG,UAAYJ,EACzB,IAAIK,EAAU9M,EAAQ+M,gBAAkB/M,EAAQgN,SAAS,GAAK,KAC9DhN,EAAQiN,aAAcP,EAAcI,GAUxC,iBACI,IAAI,MAAE1I,EAAK,OAAEH,GAAWrX,KAAKuW,YAAYC,IAAIC,OAAOyB,wBACpD,MACMoI,EADe,KACU9I,EAC/B,MAAO,CAAC8I,EAAU9I,EAAO8I,EAAUjJ,GAGvC,eACI,OAAO,IAAI3T,SAASC,IAEhB,IAAI4c,EAAOvgB,KAAKuW,YAAYC,IAAIC,OAAO+J,WAAU,GACjDD,EAAKP,aAAa,QAAS,gCAC3BO,EAAO,SAAUA,GAGjBA,EAAKE,UAAU,gBAAgB9I,SAC/B4I,EAAKE,UAAU,oBAAoB9I,SAEnC4I,EAAKE,UAAU,eAAeC,MAAK,WAC/B,MAAMC,EAAgE,IAAzD,SAAU3gB,MAAM6Q,KAAK,MAAMpB,WAAW,GAAG+B,MAAM,GAAI,GAChE,SAAUxR,MAAM6Q,KAAK,KAAM8P,MAI/B,MAAMC,EAAa,IAAIC,cAEvBN,EAAOA,EAAK9J,OAIZ,MAAOe,EAAOH,GAAUrX,KAAK8gB,iBAC7BP,EAAKP,aAAa,QAASxI,GAC3B+I,EAAKP,aAAa,SAAU3I,GAG5BrX,KAAK+gB,WAAW/gB,KAAKghB,QAAQT,GAAOA,GAEpC5c,EADiBid,EAAWK,kBAAkBV,OAStD,cACI,OAAOvgB,KAAKkhB,eAAehe,MAAMie,IAC7B,MAAMC,EAAO,IAAIC,KAAK,CAACF,GAAS,CAAErT,KAAM,kBACxC,OAAOqR,IAAImC,gBAAgBF,OAWvC,MAAMG,WAAoBjD,GAQtB,YAAY7J,EAAQtD,GAChB9K,SAASjF,WACTpB,KAAKue,UAAYve,KAAKyU,OAAO+J,UAAY,gBACzCxe,KAAKye,aAAeze,KAAKyU,OAAOiK,aAAe,WAC/C1e,KAAK2e,cAAgB3e,KAAKyU,OAAOmK,cAAgB,iBACjD5e,KAAK2c,YAAclI,EAAOmI,mBAAqB,kBAMnD,cACI,OAAOvW,MAAM4Y,cAAc/b,MAAMse,IAC7B,MAAMC,EAASrH,SAAS2F,cAAc,UAChClN,EAAU4O,EAAOC,WAAW,OAE3BlK,EAAOH,GAAUrX,KAAK8gB,iBAK7B,OAHAW,EAAOjK,MAAQA,EACfiK,EAAOpK,OAASA,EAET,IAAI3T,SAAQ,CAACC,EAASge,KACzB,MAAMC,EAAQ,IAAIC,MAClBD,EAAME,OAAS,KACXjP,EAAQkP,UAAUH,EAAO,EAAG,EAAGpK,EAAOH,GAEtC8H,IAAIC,gBAAgBoC,GACpBC,EAAOO,QAAQC,IACXte,EAAQwb,IAAImC,gBAAgBW,QAGpCL,EAAMM,IAAMV,SAa5B,MAAMW,WAAoBzJ,GACtB,SACI,OAAI1Y,KAAK8Y,SAGT9Y,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ,KACRC,SAAS,gBACT1D,YAAW,KACR,IAAKrb,KAAKyU,OAAO2N,mBAAqBC,QAAQ,sEAC1C,OAAO,EAEX,MAAMC,EAAQtiB,KAAK4Y,aAInB,OAHA0J,EAAMC,QAAQxL,MAAK,GACnB,SAAUuL,EAAMnR,OAAOqF,IAAIC,OAAOC,YAAYI,GAAG,aAAawL,EAAMtI,sBAAuB,MAC3F,SAAUsI,EAAMnR,OAAOqF,IAAIC,OAAOC,YAAYI,GAAG,YAAYwL,EAAMtI,sBAAuB,MACnFsI,EAAMnR,OAAOqR,YAAYF,EAAMrb,OAE9CjH,KAAK8Y,OAAO3C,QAhBDnW,MA2BnB,MAAMyiB,WAAoB/J,GACtB,SACI,GAAI1Y,KAAK8Y,OAAQ,CACb,MAAM4J,EAAkD,IAArC1iB,KAAK4Y,aAAanE,OAAOkO,QAE5C,OADA3iB,KAAK8Y,OAAO8J,QAAQF,GACb1iB,KAWX,OATAA,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ,KACRC,SAAS,iBACT1D,YAAW,KACRrb,KAAK4Y,aAAaiK,SAClB7iB,KAAKgX,YAEbhX,KAAK8Y,OAAO3C,OACLnW,KAAKgX,UAUpB,MAAM8L,WAAsBpK,GACxB,SACI,GAAI1Y,KAAK8Y,OAAQ,CACb,MAAMiK,EAAgB/iB,KAAK4Y,aAAanE,OAAOkO,UAAY3iB,KAAKuW,YAAYyM,qBAAqB3hB,OAAS,EAE1G,OADArB,KAAK8Y,OAAO8J,QAAQG,GACb/iB,KAWX,OATAA,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ,KACRC,SAAS,mBACT1D,YAAW,KACRrb,KAAK4Y,aAAaqK,WAClBjjB,KAAKgX,YAEbhX,KAAK8Y,OAAO3C,OACLnW,KAAKgX,UASpB,MAAMkM,WAAoBxK,GAMtB,YAAYjE,EAAQtD,GAYhB,IAXI9C,MAAMoG,EAAO0O,OAAyB,IAAhB1O,EAAO0O,QAC7B1O,EAAO0O,KAAO,KAEgB,iBAAvB1O,EAAOiK,cACdjK,EAAOiK,YAAcjK,EAAO0O,KAAO,EAAI,IAAM,KAGd,iBAAxB1O,EAAOmK,eACdnK,EAAOmK,aAAe,mBAAmBnK,EAAO0O,KAAO,EAAI,IAAM,MAAM9G,GAAoB/N,KAAKU,IAAIyF,EAAO0O,MAAO,MAAM,MAE5H9c,MAAMoO,EAAQtD,GACV9C,MAAMrO,KAAKuW,YAAY/T,MAAMM,QAAUuL,MAAMrO,KAAKuW,YAAY/T,MAAMO,KACpE,MAAM,IAAI1C,MAAM,qFAMxB,SACI,OAAIL,KAAK8Y,SAGT9Y,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ9e,KAAKyU,OAAOiK,aACpBK,SAAS/e,KAAKyU,OAAOmK,cACrBvD,YAAW,KACRrb,KAAKuW,YAAY6M,WAAW,CACxBtgB,MAAOwL,KAAK8J,IAAIpY,KAAKuW,YAAY/T,MAAMM,MAAQ9C,KAAKyU,OAAO0O,KAAM,GACjEpgB,IAAK/C,KAAKuW,YAAY/T,MAAMO,IAAM/C,KAAKyU,OAAO0O,UAG1DnjB,KAAK8Y,OAAO3C,QAZDnW,MAsBnB,MAAMqjB,WAAmB3K,GAMrB,YAAYjE,EAAQtD,GAYhB,IAXI9C,MAAMoG,EAAO0O,OAAyB,IAAhB1O,EAAO0O,QAC7B1O,EAAO0O,KAAO,IAEe,iBAAtB1O,EAAOiK,cACdjK,EAAOiK,YAAcjK,EAAO0O,KAAO,EAAI,KAAO,MAEhB,iBAAvB1O,EAAOmK,eACdnK,EAAOmK,aAAe,eAAenK,EAAO0O,KAAO,EAAI,MAAQ,YAAoC,IAAxB7U,KAAKU,IAAIyF,EAAO0O,OAAapW,QAAQ,OAGpH1G,MAAMoO,EAAQtD,GACV9C,MAAMrO,KAAKuW,YAAY/T,MAAMM,QAAUuL,MAAMrO,KAAKuW,YAAY/T,MAAMO,KACpE,MAAM,IAAI1C,MAAM,oFAIxB,SACI,GAAIL,KAAK8Y,OAAQ,CACb,IAAIwK,GAAW,EACf,MAAMC,EAAuBvjB,KAAKuW,YAAY/T,MAAMO,IAAM/C,KAAKuW,YAAY/T,MAAMM,MAQjF,OAPI9C,KAAKyU,OAAO0O,KAAO,IAAM9U,MAAMrO,KAAKuW,YAAY9B,OAAO+O,mBAAqBD,GAAwBvjB,KAAKuW,YAAY9B,OAAO+O,mBAC5HF,GAAW,GAEXtjB,KAAKyU,OAAO0O,KAAO,IAAM9U,MAAMrO,KAAKuW,YAAY9B,OAAOgP,mBAAqBF,GAAwBvjB,KAAKuW,YAAY9B,OAAOgP,mBAC5HH,GAAW,GAEftjB,KAAK8Y,OAAO8J,SAASU,GACdtjB,KAuBX,OArBAA,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ9e,KAAKyU,OAAOiK,aACpBK,SAAS/e,KAAKyU,OAAOmK,cACrBvD,YAAW,KACR,MAAMkI,EAAuBvjB,KAAKuW,YAAY/T,MAAMO,IAAM/C,KAAKuW,YAAY/T,MAAMM,MAEjF,IAAI4gB,EAAmBH,GADH,EAAIvjB,KAAKyU,OAAO0O,MAE/B9U,MAAMrO,KAAKuW,YAAY9B,OAAO+O,oBAC/BE,EAAmBpV,KAAK6J,IAAIuL,EAAkB1jB,KAAKuW,YAAY9B,OAAO+O,mBAErEnV,MAAMrO,KAAKuW,YAAY9B,OAAOgP,oBAC/BC,EAAmBpV,KAAK8J,IAAIsL,EAAkB1jB,KAAKuW,YAAY9B,OAAOgP,mBAE1E,MAAME,EAAQrV,KAAKW,OAAOyU,EAAmBH,GAAwB,GACrEvjB,KAAKuW,YAAY6M,WAAW,CACxBtgB,MAAOwL,KAAK8J,IAAIpY,KAAKuW,YAAY/T,MAAMM,MAAQ6gB,EAAO,GACtD5gB,IAAK/C,KAAKuW,YAAY/T,MAAMO,IAAM4gB,OAG9C3jB,KAAK8Y,OAAO3C,OACLnW,MAaf,MAAM4jB,WAAalL,GACf,SACI,OAAI1Y,KAAK8Y,SAGT9Y,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ9e,KAAKyU,OAAOiK,aACpBK,SAAS/e,KAAKyU,OAAOmK,cAC1B5e,KAAK8Y,OAAOK,KAAKgC,aAAY,KACzBnb,KAAK8Y,OAAOK,KAAKU,eAAehD,KAAK7W,KAAKyU,OAAOoP,cAErD7jB,KAAK8Y,OAAO3C,QATDnW,MAkBnB,MAAM8jB,WAAqBpL,GAKvB,YAAYjE,GACRpO,SAASjF,WAEb,SACI,OAAIpB,KAAK8Y,SAGT9Y,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBmG,QAAQ9e,KAAKyU,OAAOiK,aAAe,kBACnCK,SAAS/e,KAAKyU,OAAOmK,cAAgB,8DACrCvD,YAAW,KACRrb,KAAK4Y,aAAamL,oBAClB/jB,KAAKgX,YAEbhX,KAAK8Y,OAAO3C,QAVDnW,MAoBnB,MAAMgkB,WAAqBtL,GACvB,SACI,MAAM7B,EAAO7W,KAAK4Y,aAAaqL,OAAOxP,OAAOsF,OAAS,cAAgB,cACtE,OAAI/Z,KAAK8Y,QACL9Y,KAAK8Y,OAAOgG,QAAQjI,GAAMV,OAC1BnW,KAAKmR,OAAOjK,WACLlH,OAEXA,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAAS7e,KAAKyU,OAAOkE,OACrBoG,SAAS,0CACT1D,YAAW,KACRrb,KAAK4Y,aAAaqL,OAAOxP,OAAOsF,QAAU/Z,KAAK4Y,aAAaqL,OAAOxP,OAAOsF,OAC1E/Z,KAAK4Y,aAAaqL,OAAO5F,SACzBre,KAAKgX,YAENhX,KAAKgX,WAkCpB,MAAMkN,WAAuBxL,GAezB,YAAYjE,EAAQtD,GACiB,iBAAtBsD,EAAOiK,cACdjK,EAAOiK,YAAc,sBAES,iBAAvBjK,EAAOmK,eACdnK,EAAOmK,aAAe,wCAE1BvY,SAASjF,WACTpB,KAAK2c,YAAclI,EAAOmI,mBAAqB,gCAI/C,MAAMuH,EAAiB1P,EAAO2P,kBAAoB,CAAC,QAAS,eAAgB,UAAW,QAAS,SAC5F,cAAe,aAAc,UAAW,uBAEtCC,EAAYrkB,KAAK4Y,aAAa6D,YAAYhI,EAAOiI,YACvD,IAAK2H,EACD,MAAM,IAAIhkB,MAAM,+DAA+DoU,EAAOiI,eAE1F,MAAM4H,EAAkBD,EAAU5P,OAG5B8P,EAAgB,GACtBJ,EAAepf,SAAS5E,IACpB,MAAMqkB,EAAaF,EAAgBnkB,QAChBwR,IAAf6S,IACAD,EAAcpkB,GAAS+T,EAASsQ,OASxCxkB,KAAKykB,eAAiB,UAItBzkB,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAASpK,EAAOkE,OAChBmG,QAAQrK,EAAOiK,aACfK,SAAStK,EAAOmK,cAChBvD,YAAW,KACRrb,KAAK8Y,OAAOK,KAAKe,cAEzBla,KAAK8Y,OAAOK,KAAKgC,aAAY,KAEzB,MAAMuJ,EAAWpW,KAAKW,MAAsB,IAAhBX,KAAKqW,UAAgB9X,WAEjD7M,KAAK8Y,OAAOK,KAAKU,eAAehD,KAAK,IACrC,MAAM+N,EAAQ5kB,KAAK8Y,OAAOK,KAAKU,eAAejD,OAAO,SAE/CiO,EAAa7kB,KAAKyU,OAElBqQ,EAAY,CAACC,EAAcC,EAAiBC,KAC9C,MAAMC,EAAMN,EAAMhO,OAAO,MACnBuO,EAAU,GAAGT,IAAWO,IAC9BC,EAAItO,OAAO,MACNA,OAAO,SACP/F,KAAK,KAAMsU,GACXtU,KAAK,OAAQ,SACbA,KAAK,OAAQ,kBAAkB6T,KAC/B7T,KAAK,QAASoU,GACd1N,MAAM,SAAU,GAChB1D,SAAS,UAAYoR,IAAWjlB,KAAKykB,gBACrC3N,GAAG,SAAS,KAETqN,EAAepf,SAASqgB,IACpB,MAAMC,OAAoD,IAAhCL,EAAgBI,GAC1Cf,EAAU5P,OAAO2Q,GAAcC,EAAaL,EAAgBI,GAAcb,EAAca,MAG5FplB,KAAK6Y,WAAW+E,KAAK5d,KAAK2c,YAAa,CAAE2I,OAAQP,IAAgB,GACjE/kB,KAAKykB,eAAiBQ,EACtBjlB,KAAK4Y,aAAayF,SAClB,MAAM4F,EAASjkB,KAAK4Y,aAAaqL,OAC7BA,GACAA,EAAO5F,YAGnB6G,EAAItO,OAAO,MAAMA,OAAO,SACnBW,MAAM,cAAe,UACrB1G,KAAK,MAAOsU,GACZ7hB,KAAKyhB,IAGRQ,EAAcV,EAAWW,6BAA+B,gBAG9D,OAFAV,EAAUS,EAAahB,EAAe,WACtCM,EAAWY,QAAQ1gB,SAAQ,CAACzE,EAAMkd,IAAUsH,EAAUxkB,EAAKykB,aAAczkB,EAAKolB,QAASlI,KAChFxd,QAIf,SAEI,OADAA,KAAK8Y,OAAO3C,OACLnW,MAiCf,MAAM2lB,WAAiBjN,GACnB,YAAYjE,EAAQtD,GAUhB,GATiC,iBAAtBsD,EAAOiK,cACdjK,EAAOiK,YAAc,iBAES,iBAAvBjK,EAAOmK,eACdnK,EAAOmK,aAAe,0CAG1BvY,MAAMoO,EAAQtD,GAEVnR,KAAK4Y,aACL,MAAM,IAAIvY,MAAM,iGAEpB,IAAKoU,EAAOmR,YACR,MAAM,IAAIvlB,MAAM,4DAYpB,GATAL,KAAK2c,YAAclI,EAAOmI,mBAAqB,0BAQ/C5c,KAAKykB,eAAiBzkB,KAAKuW,YAAY/T,MAAMiS,EAAOmR,cAAgBnR,EAAOgR,QAAQ,GAAG3lB,OACjF2U,EAAOgR,QAAQpa,MAAM/K,GACfA,EAAKR,QAAUE,KAAKykB,iBAG3B,MAAM,IAAIpkB,MAAM,wFAIpBL,KAAK8Y,OAAS,IAAIS,GAAOvZ,MACpB6e,SAASpK,EAAOkE,OAChBmG,QAAQrK,EAAOiK,aAAejK,EAAOoR,cAAgB7lB,KAAKykB,eAAiB,KAC3E1F,SAAStK,EAAOmK,cAChBvD,YAAW,KACRrb,KAAK8Y,OAAOK,KAAKe,cAEzBla,KAAK8Y,OAAOK,KAAKgC,aAAY,KAEzB,MAAMuJ,EAAWpW,KAAKW,MAAsB,IAAhBX,KAAKqW,UAAgB9X,WAEjD7M,KAAK8Y,OAAOK,KAAKU,eAAehD,KAAK,IACrC,MAAM+N,EAAQ5kB,KAAK8Y,OAAOK,KAAKU,eAAejD,OAAO,SAE/CkO,EAAY,CAACC,EAAcjlB,EAAOmlB,KACpC,MAAMC,EAAMN,EAAMhO,OAAO,MACnBuO,EAAU,GAAGT,IAAWO,IAC9BC,EAAItO,OAAO,MACNA,OAAO,SACP/F,KAAK,KAAMsU,GACXtU,KAAK,OAAQ,SACbA,KAAK,OAAQ,aAAa6T,KAC1B7T,KAAK,QAASoU,GACd1N,MAAM,SAAU,GAChB1D,SAAS,UAAY/T,IAAUE,KAAKykB,gBACpC3N,GAAG,SAAS,KACT,MAAMgP,EAAY,GAClBA,EAAUrR,EAAOmR,aAAe9lB,EAChCE,KAAKykB,eAAiB3kB,EACtBE,KAAKuW,YAAY6M,WAAW0C,GAC5B9lB,KAAK8Y,OAAOgG,QAAQrK,EAAOiK,aAAejK,EAAOoR,cAAgB7lB,KAAKykB,eAAiB,KAEvFzkB,KAAK6Y,WAAW+E,KAAK5d,KAAK2c,YAAa,CAAEoJ,YAAahB,EAAciB,aAAclmB,EAAO8lB,YAAanR,EAAOmR,cAAe,MAEpIV,EAAItO,OAAO,MAAMA,OAAO,SACnBW,MAAM,cAAe,UACrB1G,KAAK,MAAOsU,GACZ7hB,KAAKyhB,IAGd,OADAtQ,EAAOgR,QAAQ1gB,SAAQ,CAACzE,EAAMkd,IAAUsH,EAAUxkB,EAAKykB,aAAczkB,EAAKR,MAAO0d,KAC1Exd,QAIf,SAEI,OADAA,KAAK8Y,OAAO3C,OACLnW,MClkDf,MAAM,GAAW,IAAIa,EAErB,IAAK,IAAKV,EAAM2N,KAAS3O,OAAO4O,QAAQ,GACpC,GAAStM,IAAItB,EAAM2N,GAIvB,YCDA,MAAMmY,GACF,YAAY9U,GAMRnR,KAAKmR,OAASA,EAGdnR,KAAKiH,GAAK,GAAGjH,KAAKmR,OAAO6I,sBAGzBha,KAAK8N,KAAQ9N,KAAKmR,OAAa,OAAI,QAAU,OAG7CnR,KAAKuW,YAAcvW,KAAKmR,OAAOoF,YAG/BvW,KAAKwS,SAAW,KAGhBxS,KAAKkmB,QAAU,GAMflmB,KAAKmmB,aAAe,KAOpBnmB,KAAK+Y,SAAU,EAEf/Y,KAAKiZ,aAQT,aAGI,MAAMwM,EAAWzlB,KAAKmR,OAAOsD,OAAO2R,WAAapmB,KAAKmR,OAAOsD,OAAO2R,UAAUC,YAAermB,KAAKmR,OAAOsD,OAAO8N,QAAQ2D,QA6BxH,OA5BIxlB,MAAMqD,QAAQ0hB,IACdA,EAAQ1gB,SAAS0P,IACb,IACI,MAAM6R,EAASJ,GAAQK,OAAO9R,EAAO3G,KAAM2G,EAAQzU,MACnDA,KAAKkmB,QAAQ3hB,KAAK+hB,GACpB,MAAOvV,GACL7P,QAAQC,KAAK,2BACbD,QAAQslB,MAAMzV,OAMR,UAAd/Q,KAAK8N,MACL,SAAU9N,KAAKmR,OAAOA,OAAOqF,IAAIC,OAAOC,YACnCI,GAAG,aAAa9W,KAAKiH,MAAM,KACxBgQ,aAAajX,KAAKmmB,cACbnmB,KAAKwS,UAAkD,WAAtCxS,KAAKwS,SAAS+E,MAAM,eACtCvX,KAAKmW,UAEVW,GAAG,YAAY9W,KAAKiH,MAAM,KACzBgQ,aAAajX,KAAKmmB,cAClBnmB,KAAKmmB,aAAezO,YAAW,KAC3B1X,KAAK+W,SACN,QAIR/W,KAQX,gBACI,GAAIA,KAAK+Y,QACL,OAAO,EAEX,IAAIA,GAAU,EAOd,OALA/Y,KAAKkmB,QAAQnhB,SAASuhB,IAClBvN,EAAUA,GAAWuN,EAAOlN,mBAGhCL,EAAUA,GAAY/Y,KAAKuW,YAAYkQ,iBAAiBC,UAAY1mB,KAAKuW,YAAYoQ,YAAYD,WACxF3N,EAOb,OACI,IAAK/Y,KAAKwS,SAAU,CAChB,OAAQxS,KAAK8N,MACb,IAAK,OACD9N,KAAKwS,SAAW,SAAUxS,KAAKmR,OAAOqF,IAAIC,OAAOC,YAC5CC,OAAO,MAAO,gBACnB,MACJ,IAAK,QACD3W,KAAKwS,SAAW,SAAUxS,KAAKmR,OAAOA,OAAOqF,IAAIC,OAAOC,YACnDC,OAAO,MAAO,yDAAyD2B,QAAQ,oBAAoB,GACxG,MACJ,QACI,MAAM,IAAIjY,MAAM,gCAAgCL,KAAK8N,QAGzD9N,KAAKwS,SACA8F,QAAQ,cAAc,GACtBA,QAAQ,MAAMtY,KAAK8N,gBAAgB,GACnC+C,KAAK,KAAM7Q,KAAKiH,IAIzB,OAFAjH,KAAKkmB,QAAQnhB,SAASuhB,GAAWA,EAAOnQ,SACxCnW,KAAKwS,SAAS+E,MAAM,aAAc,WAC3BvX,KAAKgX,SAQhB,SACI,OAAKhX,KAAKwS,UAGVxS,KAAKkmB,QAAQnhB,SAASuhB,GAAWA,EAAOtP,WACjChX,KAAKkH,YAHDlH,KAWf,WACI,IAAKA,KAAKwS,SACN,OAAOxS,KAGX,GAAkB,UAAdA,KAAK8N,KAAkB,CACvB,MAAMqJ,EAAcnX,KAAKmR,OAAOiG,iBAC1ByD,EAAM,IAAI1D,EAAYpE,EAAI,KAAKlG,eAC/B3C,EAAO,GAAGiN,EAAY3Q,EAAEqG,eACxB2K,EAAQ,IAAIxX,KAAKuW,YAAY9B,OAAO+C,MAAQ,GAAG3K,eACrD7M,KAAKwS,SACA+E,MAAM,WAAY,YAClBA,MAAM,MAAOsD,GACbtD,MAAM,OAAQrN,GACdqN,MAAM,QAASC,GAIxB,OADAxX,KAAKkmB,QAAQnhB,SAASuhB,GAAWA,EAAOpf,aACjClH,KAQX,OACI,OAAKA,KAAKwS,UAAYxS,KAAKoZ,kBAG3BpZ,KAAKkmB,QAAQnhB,SAASuhB,GAAWA,EAAOvP,SACxC/W,KAAKwS,SACA+E,MAAM,aAAc,WAJdvX,KAaf,QAAQqZ,GAIJ,YAHoB,IAATA,IACPA,GAAQ,GAEPrZ,KAAKwS,UAGNxS,KAAKoZ,kBAAoBC,IAG7BrZ,KAAKkmB,QAAQnhB,SAASuhB,GAAWA,EAAOhN,SAAQ,KAChDtZ,KAAKkmB,QAAU,GACflmB,KAAKwS,SAASmF,SACd3X,KAAKwS,SAAW,MALLxS,MAHAA,MCjMnB,MAAM+T,GAAiB,CACnB6S,YAAa,WACbC,OAAQ,CAAErgB,EAAG,EAAGuM,EAAG,GACnByE,MAAO,GACPH,OAAQ,GACRyP,QAAS,EACTC,WAAY,GACZhN,QAAQ,GAUZ,MAAMiN,GACF,YAAY7V,GAkCR,OA7BAnR,KAAKmR,OAASA,EAEdnR,KAAKiH,GAAK,GAAGjH,KAAKmR,OAAO6I,qBAEzBha,KAAKmR,OAAOsD,OAAOwP,OAASvQ,EAAM1T,KAAKmR,OAAOsD,OAAOwP,QAAU,GAAIlQ,IAEnE/T,KAAKyU,OAASzU,KAAKmR,OAAOsD,OAAOwP,OAGjCjkB,KAAKwS,SAAW,KAEhBxS,KAAKinB,gBAAkB,KAEvBjnB,KAAKknB,SAAW,GAMhBlnB,KAAKmnB,eAAiB,KAQtBnnB,KAAK+Z,QAAS,EAEP/Z,KAAKqe,SAMhB,SAESre,KAAKwS,WACNxS,KAAKwS,SAAWxS,KAAKmR,OAAOqF,IAAI4Q,MAAMxQ,OAAO,KACxC/F,KAAK,KAAM,GAAG7Q,KAAKmR,OAAO6I,sBAAsBnJ,KAAK,QAAS,cAIlE7Q,KAAKinB,kBACNjnB,KAAKinB,gBAAkBjnB,KAAKwS,SAASoE,OAAO,QACvC/F,KAAK,QAAS,KACdA,KAAK,SAAU,KACfA,KAAK,QAAS,yBAIlB7Q,KAAKmnB,iBACNnnB,KAAKmnB,eAAiBnnB,KAAKwS,SAASoE,OAAO,MAI/C5W,KAAKknB,SAASniB,SAASqO,GAAYA,EAAQuE,WAC3C3X,KAAKknB,SAAW,GAGhB,MAAMJ,GAAW9mB,KAAKyU,OAAOqS,SAAW,EACxC,IAAItgB,EAAIsgB,EACJ/T,EAAI+T,EACJO,EAAc,EAClBrnB,KAAKmR,OAAOmW,0BAA0B9V,QAAQ+V,UAAUxiB,SAASkC,IACzDvG,MAAMqD,QAAQ/D,KAAKmR,OAAOsL,YAAYxV,GAAIwN,OAAOwP,SACjDjkB,KAAKmR,OAAOsL,YAAYxV,GAAIwN,OAAOwP,OAAOlf,SAASqO,IAC/C,MAAMZ,EAAWxS,KAAKmnB,eAAevQ,OAAO,KACvC/F,KAAK,YAAa,aAAarK,MAAMuM,MACpCgU,GAAc3T,EAAQ2T,aAAe/mB,KAAKyU,OAAOsS,YAAc,GACrE,IAAIS,EAAU,EACVC,EAAWV,EAAa,EAAMD,EAAU,EAC5CO,EAAc/Y,KAAK8J,IAAIiP,EAAaN,EAAaD,GAEjD,MAAM1S,EAAQhB,EAAQgB,OAAS,GACzBsT,EAAgBvT,EAAaC,GACnC,GAAc,SAAVA,EAAkB,CAElB,MAAM/S,GAAU+R,EAAQ/R,QAAU,GAC5BsmB,EAAUZ,EAAa,EAAMD,EAAU,EAC7CtU,EACKoE,OAAO,QACP/F,KAAK,QAASuC,EAAQkJ,OAAS,IAC/BzL,KAAK,IAAK,MAAM8W,KAAUtmB,KAAUsmB,KACpChoB,KAAKuX,GAAa9D,EAAQmE,OAAS,IACxCiQ,EAAUnmB,EAASylB,OAChB,GAAc,SAAV1S,EAAkB,CAEzB,MAAMoD,GAASpE,EAAQoE,OAAS,GAC1BH,GAAUjE,EAAQiE,QAAUG,EAClChF,EACKoE,OAAO,QACP/F,KAAK,QAASuC,EAAQkJ,OAAS,IAC/BzL,KAAK,QAAS2G,GACd3G,KAAK,SAAUwG,GACfxG,KAAK,OAAQuC,EAAQuF,OAAS,IAC9BhZ,KAAKuX,GAAa9D,EAAQmE,OAAS,IAExCiQ,EAAUhQ,EAAQsP,EAClBO,EAAc/Y,KAAK8J,IAAIiP,EAAahQ,EAASyP,QAC1C,GAAIY,EAAe,CAEtB,MAAM5U,GAAQM,EAAQN,MAAQ,GACxB8U,EAAStZ,KAAKM,KAAKN,KAAKqE,KAAKG,EAAOxE,KAAKuZ,KAC/CrV,EACKoE,OAAO,QACP/F,KAAK,QAASuC,EAAQkJ,OAAS,IAC/BzL,KAAK,IAAK,WAAYiC,KAAKA,GAAMhF,KAAK4Z,IACtC7W,KAAK,YAAa,aAAa+W,MAAWA,EAAUd,EAAU,MAC9DjW,KAAK,OAAQuC,EAAQuF,OAAS,IAC9BhZ,KAAKuX,GAAa9D,EAAQmE,OAAS,IAExCiQ,EAAW,EAAII,EAAUd,EACzBW,EAAUnZ,KAAK8J,IAAK,EAAIwP,EAAWd,EAAU,EAAIW,GACjDJ,EAAc/Y,KAAK8J,IAAIiP,EAAc,EAAIO,EAAUd,GAGvDtU,EACKoE,OAAO,QACP/F,KAAK,cAAe,QACpBA,KAAK,QAAS,YACdA,KAAK,IAAK2W,GACV3W,KAAK,IAAK4W,GACVlQ,MAAM,YAAawP,GACnBzjB,KAAK8P,EAAQ0U,OAGlB,MAAMC,EAAMvV,EAASiE,OAAOyB,wBAC5B,GAAgC,aAA5BlY,KAAKyU,OAAOmS,YACZ7T,GAAKgV,EAAI1Q,OAASyP,EAClBO,EAAc,MACX,CAGH,MAAMW,EAAUhoB,KAAKyU,OAAOoS,OAAOrgB,EAAIA,EAAIuhB,EAAIvQ,MAC3ChR,EAAIsgB,GAAWkB,EAAUhoB,KAAKmR,OAAOA,OAAOsD,OAAO+C,QACnDzE,GAAKsU,EACL7gB,EAAIsgB,EACJtU,EAAS3B,KAAK,YAAa,aAAarK,MAAMuM,OAElDvM,GAAKuhB,EAAIvQ,MAAS,EAAIsP,EAG1B9mB,KAAKknB,SAAS3iB,KAAKiO,SAM/B,MAAMuV,EAAM/nB,KAAKmnB,eAAe1Q,OAAOyB,wBAYvC,OAXAlY,KAAKyU,OAAO+C,MAAQuQ,EAAIvQ,MAAS,EAAIxX,KAAKyU,OAAOqS,QACjD9mB,KAAKyU,OAAO4C,OAAS0Q,EAAI1Q,OAAU,EAAIrX,KAAKyU,OAAOqS,QACnD9mB,KAAKinB,gBACApW,KAAK,QAAS7Q,KAAKyU,OAAO+C,OAC1B3G,KAAK,SAAU7Q,KAAKyU,OAAO4C,QAIhCrX,KAAKwS,SACA+E,MAAM,aAAcvX,KAAKyU,OAAOsF,OAAS,SAAW,WAElD/Z,KAAKkH,WAQhB,WACI,IAAKlH,KAAKwS,SACN,OAAOxS,KAEX,MAAM+nB,EAAM/nB,KAAKwS,SAASiE,OAAOyB,wBAC5B7J,OAAOrO,KAAKyU,OAAOwT,mBACpBjoB,KAAKyU,OAAOoS,OAAO9T,EAAI/S,KAAKmR,OAAOsD,OAAO4C,OAAS0Q,EAAI1Q,QAAUrX,KAAKyU,OAAOwT,iBAE5E5Z,OAAOrO,KAAKyU,OAAOyT,kBACpBloB,KAAKyU,OAAOoS,OAAOrgB,EAAIxG,KAAKmR,OAAOA,OAAOsD,OAAO+C,MAAQuQ,EAAIvQ,OAASxX,KAAKyU,OAAOyT,gBAEtFloB,KAAKwS,SAAS3B,KAAK,YAAa,aAAa7Q,KAAKyU,OAAOoS,OAAOrgB,MAAMxG,KAAKyU,OAAOoS,OAAO9T,MAO7F,OACI/S,KAAKyU,OAAOsF,QAAS,EACrB/Z,KAAKqe,SAOT,OACIre,KAAKyU,OAAOsF,QAAS,EACrB/Z,KAAKqe,UC1Nb,MAAM,GAAiB,CACnBpX,GAAI,GACJwS,IAAK,mBACLC,MAAO,CAAEpW,KAAM,GAAIiU,MAAO,GAAI/Q,EAAG,GAAIuM,EAAG,IACxC4P,QAAS,KACTwF,WAAY,EACZ9Q,OAAQ,EACRwP,OAAQ,CAAErgB,EAAG,EAAGuM,EAAG,MACnBqV,OAAQ,CAAEvN,IAAK,EAAG1Q,MAAO,EAAG2Q,OAAQ,EAAG5Q,KAAM,GAC7Cme,iBAAkB,mBAClB9F,QAAS,CACL2D,QAAS,IAEboC,SAAU,CACNjR,OAAQ,EACRG,MAAO,EACPqP,OAAQ,CAAErgB,EAAG,EAAGuM,EAAG,IAEvBwV,KAAM,CACF/hB,EAAI,GACJgiB,GAAI,GACJC,GAAI,IAERxE,OAAQ,KACR0C,YAAa,CACT+B,wBAAwB,EACxBC,uBAAuB,EACvBC,wBAAwB,EACxBC,wBAAwB,EACxBC,gBAAgB,EAChBC,UAAU,EACVC,WAAW,EACXC,WAAW,GAEfC,wBAAwB,EACxBzM,YAAa,IAOjB,MAAM0M,GAgEF,YAAY1U,EAAQtD,GAChB,GAAsB,iBAAXsD,EACP,MAAM,IAAIpU,MAAM,0CAepB,GARAL,KAAKmR,OAASA,GAAU,KAKxBnR,KAAKuW,YAAcpF,EAGM,iBAAdsD,EAAOxN,IAAoBwN,EAAOxN,GAAG5F,QAazC,GAAIrB,KAAKmR,aACiC,IAAlCnR,KAAKmR,OAAOiY,OAAO3U,EAAOxN,IACjC,MAAM,IAAI5G,MAAM,gCAAgCoU,EAAOxN,+CAd3D,GAAKjH,KAAKmR,OAEH,CACH,MAAMkY,EAAa,KACf,IAAIpiB,EAAK,IAAIqH,KAAKW,MAAMX,KAAKqW,SAAWrW,KAAKQ,IAAI,GAAI,MAIrD,OAHW,OAAP7H,QAAgD,IAA1BjH,KAAKmR,OAAOiY,OAAOniB,KACzCA,EAAKoiB,KAEFpiB,GAEXwN,EAAOxN,GAAKoiB,SATZ5U,EAAOxN,GAAK,IAAIqH,KAAKW,MAAMX,KAAKqW,SAAWrW,KAAKQ,IAAI,GAAI,MAoBhE9O,KAAKiH,GAAKwN,EAAOxN,GAMjBjH,KAAKspB,aAAc,EAMnBtpB,KAAKupB,WAAa,KAKlBvpB,KAAKwW,IAAM,GAOXxW,KAAKyU,OAASf,EAAMe,GAAU,GAAI,IAG9BzU,KAAKmR,QAKLnR,KAAKwC,MAAQxC,KAAKmR,OAAO3O,MAMzBxC,KAAKwpB,SAAWxpB,KAAKiH,GACrBjH,KAAKwC,MAAMxC,KAAKwpB,UAAYxpB,KAAKwC,MAAMxC,KAAKwpB,WAAa,KAEzDxpB,KAAKwC,MAAQ,KACbxC,KAAKwpB,SAAW,MAQpBxpB,KAAKyc,YAAc,GAKnBzc,KAAKsnB,0BAA4B,GAOjCtnB,KAAKypB,cAAgB,GAMrBzpB,KAAK0pB,QAAW,KAKhB1pB,KAAK2pB,SAAW,KAKhB3pB,KAAK4pB,SAAW,KAMhB5pB,KAAK6pB,SAAY,KAKjB7pB,KAAK8pB,UAAY,KAKjB9pB,KAAK+pB,UAAY,KAMjB/pB,KAAKgqB,QAAW,GAKhBhqB,KAAKiqB,SAAW,GAKhBjqB,KAAKkqB,SAAW,GAOhBlqB,KAAKmqB,aAAe,KAQpBnqB,KAAKoqB,YAAc,GAGnBpqB,KAAKqqB,mBAoBT,GAAGC,EAAOC,GAEN,GAAqB,iBAAVD,EACP,MAAM,IAAIjqB,MAAM,+DAA+DiqB,EAAMzd,cAEzF,GAAmB,mBAAR0d,EACP,MAAM,IAAIlqB,MAAM,+DAOpB,OALKL,KAAKoqB,YAAYE,KAElBtqB,KAAKoqB,YAAYE,GAAS,IAE9BtqB,KAAKoqB,YAAYE,GAAO/lB,KAAKgmB,GACtBA,EAUX,IAAID,EAAOC,GACP,MAAMC,EAAaxqB,KAAKoqB,YAAYE,GACpC,GAAoB,iBAATA,IAAsB5pB,MAAMqD,QAAQymB,GAC3C,MAAM,IAAInqB,MAAM,+CAA+CiqB,EAAMzd,cAEzE,QAAa8E,IAAT4Y,EAGAvqB,KAAKoqB,YAAYE,GAAS,OACvB,CACH,MAAMG,EAAYD,EAAWhf,QAAQ+e,GACrC,IAAmB,IAAfE,EAGA,MAAM,IAAIpqB,MAAM,kFAFhBmqB,EAAW9M,OAAO+M,EAAW,GAKrC,OAAOzqB,KAgBX,KAAKsqB,EAAOI,EAAWC,GAKnB,GAJAA,EAASA,IAAU,EAIC,iBAATL,EACP,MAAM,IAAIjqB,MAAM,kDAAkDiqB,EAAMzd,cAEnD,kBAAd6d,GAAgD,IAArBtpB,UAAUC,SAE5CspB,EAASD,EACTA,EAAY,MAEhB,MACME,EAAe,CAAEC,SADN7qB,KAAKga,YACqB8Q,OAAQ9qB,KAAM8D,KAAM4mB,GAAa,MAe5E,OAbI1qB,KAAKoqB,YAAYE,IAEjBtqB,KAAKoqB,YAAYE,GAAOvlB,SAASgmB,IAG7BA,EAAUprB,KAAKK,KAAM4qB,MAIzBD,GAAU3qB,KAAKmR,QAEfnR,KAAKmR,OAAOyM,KAAK0M,EAAOM,GAErB5qB,KAiBX,SAAS0Z,GACL,GAAgC,iBAArB1Z,KAAKyU,OAAOiF,MAAmB,CACtC,MAAMpW,EAAOtD,KAAKyU,OAAOiF,MACzB1Z,KAAKyU,OAAOiF,MAAQ,CAAEpW,KAAMA,EAAMkD,EAAG,EAAGuM,EAAG,EAAGwE,MAAO,IAkBzD,MAhBoB,iBAATmC,EACP1Z,KAAKyU,OAAOiF,MAAMpW,KAAOoW,EACF,iBAATA,GAA+B,OAAVA,IACnC1Z,KAAKyU,OAAOiF,MAAQhG,EAAMgG,EAAO1Z,KAAKyU,OAAOiF,QAE7C1Z,KAAKyU,OAAOiF,MAAMpW,KAAKjC,OACvBrB,KAAK0Z,MACA7I,KAAK,UAAW,MAChBA,KAAK,IAAK/D,WAAW9M,KAAKyU,OAAOiF,MAAMlT,IACvCqK,KAAK,IAAK/D,WAAW9M,KAAKyU,OAAOiF,MAAM3G,IACvCzP,KAAKtD,KAAKyU,OAAOiF,MAAMpW,MACvB3D,KAAKuX,GAAalX,KAAKyU,OAAOiF,MAAMnC,OAGzCvX,KAAK0Z,MAAM7I,KAAK,UAAW,QAExB7Q,KAaX,aAAayU,GAGT,GAAsB,iBAAXA,GAA4C,iBAAdA,EAAOxN,KAAoBwN,EAAOxN,GAAG5F,OAC1E,MAAM,IAAIhB,MAAM,6BAEpB,QAA2C,IAAhCL,KAAKyc,YAAYhI,EAAOxN,IAC/B,MAAM,IAAI5G,MAAM,qCAAqCoU,EAAOxN,4DAEhE,GAA2B,iBAAhBwN,EAAO3G,KACd,MAAM,IAAIzN,MAAM,2BAIQ,iBAAjBoU,EAAOuW,aAAoD,IAAtBvW,EAAOuW,OAAOC,MAAwB,CAAC,EAAG,GAAGnpB,SAAS2S,EAAOuW,OAAOC,QAChHxW,EAAOuW,OAAOC,KAAO,GAIzB,MAAMC,EAAazO,GAAY8J,OAAO9R,EAAO3G,KAAM2G,EAAQzU,MAM3D,GAHAA,KAAKyc,YAAYyO,EAAWjkB,IAAMikB,EAGA,OAA9BA,EAAWzW,OAAO0W,UAAqB9c,MAAM6c,EAAWzW,OAAO0W,UAC5DnrB,KAAKsnB,0BAA0BjmB,OAAS,EAEvC6pB,EAAWzW,OAAO0W,QAAU,IAC5BD,EAAWzW,OAAO0W,QAAU7c,KAAK8J,IAAIpY,KAAKsnB,0BAA0BjmB,OAAS6pB,EAAWzW,OAAO0W,QAAS,IAE5GnrB,KAAKsnB,0BAA0B5J,OAAOwN,EAAWzW,OAAO0W,QAAS,EAAGD,EAAWjkB,IAC/EjH,KAAKsnB,0BAA0BviB,SAAQ,CAACqmB,EAAMC,KAC1CrrB,KAAKyc,YAAY2O,GAAM3W,OAAO0W,QAAUE,SAEzC,CACH,MAAMhqB,EAASrB,KAAKsnB,0BAA0B/iB,KAAK2mB,EAAWjkB,IAC9DjH,KAAKyc,YAAYyO,EAAWjkB,IAAIwN,OAAO0W,QAAU9pB,EAAS,EAK9D,IAAIkoB,EAAa,KAWjB,OAVAvpB,KAAKyU,OAAOgI,YAAY1X,SAAQ,CAACumB,EAAmBD,KAC5CC,EAAkBrkB,KAAOikB,EAAWjkB,KACpCsiB,EAAa8B,MAGF,OAAf9B,IACAA,EAAavpB,KAAKyU,OAAOgI,YAAYlY,KAAKvE,KAAKyc,YAAYyO,EAAWjkB,IAAIwN,QAAU,GAExFzU,KAAKyc,YAAYyO,EAAWjkB,IAAIsiB,WAAaA,EAEtCvpB,KAAKyc,YAAYyO,EAAWjkB,IASvC,gBAAgBA,GACZ,IAAKjH,KAAKyc,YAAYxV,GAClB,MAAM,IAAI5G,MAAM,8CAA8C4G,KAyBlE,OArBAjH,KAAKyc,YAAYxV,GAAIskB,qBAGjBvrB,KAAKyc,YAAYxV,GAAIuP,IAAIgV,WACzBxrB,KAAKyc,YAAYxV,GAAIuP,IAAIgV,UAAU7T,SAIvC3X,KAAKyU,OAAOgI,YAAYiB,OAAO1d,KAAKyc,YAAYxV,GAAIsiB,WAAY,UACzDvpB,KAAKwC,MAAMxC,KAAKyc,YAAYxV,GAAIuiB,iBAChCxpB,KAAKyc,YAAYxV,GAGxBjH,KAAKsnB,0BAA0B5J,OAAO1d,KAAKsnB,0BAA0B9b,QAAQvE,GAAK,GAGlFjH,KAAKyrB,2CACLzrB,KAAKyU,OAAOgI,YAAY1X,SAAQ,CAACumB,EAAmBD,KAChDrrB,KAAKyc,YAAY6O,EAAkBrkB,IAAIsiB,WAAa8B,KAGjDrrB,KAQX,kBAII,OAHAA,KAAKsnB,0BAA0BviB,SAASkC,IACpCjH,KAAKyc,YAAYxV,GAAIykB,oBAAoB,YAAY,MAElD1rB,KASX,SAGIA,KAAKwW,IAAIgV,UAAU3a,KAAK,YAAa,aAAa7Q,KAAKyU,OAAOoS,OAAOrgB,MAAMxG,KAAKyU,OAAOoS,OAAO9T,MAG9F/S,KAAKwW,IAAImV,SACJ9a,KAAK,QAAS7Q,KAAKuW,YAAY9B,OAAO+C,OACtC3G,KAAK,SAAU7Q,KAAKyU,OAAO4C,QAGhCrX,KAAK4rB,aACA/a,KAAK,IAAK7Q,KAAKyU,OAAO2T,OAAOle,MAC7B2G,KAAK,IAAK7Q,KAAKyU,OAAO2T,OAAOvN,KAC7BhK,KAAK,QAAS7Q,KAAKuW,YAAY9B,OAAO+C,OAASxX,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAO2T,OAAOje,QAC5F0G,KAAK,SAAU7Q,KAAKyU,OAAO4C,QAAUrX,KAAKyU,OAAO2T,OAAOvN,IAAM7a,KAAKyU,OAAO2T,OAAOtN,SAClF9a,KAAKyU,OAAOmX,cACZ5rB,KAAK4rB,aACArU,MAAM,eAAgB,GACtBA,MAAM,SAAUvX,KAAKyU,OAAOmX,cAIrC5rB,KAAK+e,WAGL/e,KAAK6rB,kBAIL,MAAMC,EAAY,SAAUhsB,EAAOisB,GAC/B,MAAMC,EAAU1d,KAAKQ,KAAK,GAAIid,GACxBE,EAAU3d,KAAKQ,KAAK,IAAKid,GACzBG,EAAU5d,KAAKQ,IAAI,IAAKid,GACxBI,EAAU7d,KAAKQ,IAAI,GAAIid,GAgB7B,OAfIjsB,IAAUssB,MACVtsB,EAAQqsB,GAERrsB,KAAWssB,MACXtsB,EAAQksB,GAEE,IAAVlsB,IACAA,EAAQosB,GAERpsB,EAAQ,IACRA,EAAQwO,KAAK8J,IAAI9J,KAAK6J,IAAIrY,EAAOqsB,GAAUD,IAE3CpsB,EAAQ,IACRA,EAAQwO,KAAK8J,IAAI9J,KAAK6J,IAAIrY,EAAOmsB,GAAUD,IAExClsB,GAILusB,EAAS,GACf,GAAIrsB,KAAK6pB,SAAU,CACf,MAAMyC,EAAe,CAAExpB,MAAO,EAAGC,IAAK/C,KAAKyU,OAAO6T,SAAS9Q,OACvDxX,KAAKyU,OAAO8T,KAAK/hB,EAAE+lB,QACnBD,EAAaxpB,MAAQ9C,KAAKyU,OAAO8T,KAAK/hB,EAAE+lB,MAAMzpB,OAASwpB,EAAaxpB,MACpEwpB,EAAavpB,IAAM/C,KAAKyU,OAAO8T,KAAK/hB,EAAE+lB,MAAMxpB,KAAOupB,EAAavpB,KAEpEspB,EAAO7lB,EAAI,CAAC8lB,EAAaxpB,MAAOwpB,EAAavpB,KAC7CspB,EAAOG,UAAY,CAACF,EAAaxpB,MAAOwpB,EAAavpB,KAEzD,GAAI/C,KAAK8pB,UAAW,CAChB,MAAM2C,EAAgB,CAAE3pB,MAAO9C,KAAKyU,OAAO6T,SAASjR,OAAQtU,IAAK,GAC7D/C,KAAKyU,OAAO8T,KAAKC,GAAG+D,QACpBE,EAAc3pB,MAAQ9C,KAAKyU,OAAO8T,KAAKC,GAAG+D,MAAMzpB,OAAS2pB,EAAc3pB,MACvE2pB,EAAc1pB,IAAM/C,KAAKyU,OAAO8T,KAAKC,GAAG+D,MAAMxpB,KAAO0pB,EAAc1pB,KAEvEspB,EAAO7D,GAAK,CAACiE,EAAc3pB,MAAO2pB,EAAc1pB,KAChDspB,EAAOK,WAAa,CAACD,EAAc3pB,MAAO2pB,EAAc1pB,KAE5D,GAAI/C,KAAK+pB,UAAW,CAChB,MAAM4C,EAAgB,CAAE7pB,MAAO9C,KAAKyU,OAAO6T,SAASjR,OAAQtU,IAAK,GAC7D/C,KAAKyU,OAAO8T,KAAKE,GAAG8D,QACpBI,EAAc7pB,MAAQ9C,KAAKyU,OAAO8T,KAAKE,GAAG8D,MAAMzpB,OAAS6pB,EAAc7pB,MACvE6pB,EAAc5pB,IAAM/C,KAAKyU,OAAO8T,KAAKE,GAAG8D,MAAMxpB,KAAO4pB,EAAc5pB,KAEvEspB,EAAO5D,GAAK,CAACkE,EAAc7pB,MAAO6pB,EAAc5pB,KAChDspB,EAAOO,WAAa,CAACD,EAAc7pB,MAAO6pB,EAAc5pB,KAI5D,GAAI/C,KAAKmR,OAAOwV,YAAYkG,WAAa7sB,KAAKmR,OAAOwV,YAAYkG,WAAa7sB,KAAKiH,IAAMjH,KAAKmR,OAAOwV,YAAYmG,iBAAiBhrB,SAAS9B,KAAKiH,KAAM,CAClJ,IAAI8lB,EAAQC,EAAS,KACrB,GAAIhtB,KAAKmR,OAAOwV,YAAYsG,SAAkC,mBAAhBjtB,KAAK0pB,QAAuB,CACtE,MAAMwD,EAAsB5e,KAAKU,IAAIhP,KAAK6pB,SAAS,GAAK7pB,KAAK6pB,SAAS,IAChEsD,EAA6B7e,KAAK8e,MAAMptB,KAAK0pB,QAAQ2D,OAAOhB,EAAOG,UAAU,KAAOle,KAAK8e,MAAMptB,KAAK0pB,QAAQ2D,OAAOhB,EAAOG,UAAU,KAC1I,IAAIc,EAActtB,KAAKmR,OAAOwV,YAAYsG,QAAQM,MAClD,MAAMC,EAAwBlf,KAAKW,MAAMke,GAA8B,EAAIG,IACvEA,EAAc,IAAMjf,MAAMrO,KAAKmR,OAAOsD,OAAO+O,kBAC7C8J,EAAc,GAAKhf,KAAK6J,IAAIqV,EAAuBxtB,KAAKmR,OAAOsD,OAAO+O,kBAAoB2J,GACnFG,EAAc,IAAMjf,MAAMrO,KAAKmR,OAAOsD,OAAOgP,oBACpD6J,EAAc,GAAKhf,KAAK8J,IAAIoV,EAAuBxtB,KAAKmR,OAAOsD,OAAOgP,kBAAoB0J,IAE9F,MAAMM,EAAkBnf,KAAKW,MAAMie,EAAsBI,GACzDP,EAAS/sB,KAAKmR,OAAOwV,YAAYsG,QAAQS,OAAS1tB,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAOoS,OAAOrgB,EAC/F,MAAMmnB,EAAeZ,EAAS/sB,KAAKyU,OAAO6T,SAAS9Q,MAC7CoW,EAAqBtf,KAAK8J,IAAI9J,KAAKW,MAAMjP,KAAK0pB,QAAQ2D,OAAOhB,EAAOG,UAAU,KAAQiB,EAAkBN,GAA8BQ,GAAgB,GAC5JtB,EAAOG,UAAY,CAAExsB,KAAK0pB,QAAQkE,GAAqB5tB,KAAK0pB,QAAQkE,EAAqBH,SACtF,GAAIztB,KAAKmR,OAAOwV,YAAYD,SAC/B,OAAQ1mB,KAAKmR,OAAOwV,YAAYD,SAAShd,QACzC,IAAK,aACD2iB,EAAOG,UAAU,IAAMxsB,KAAKmR,OAAOwV,YAAYD,SAASmH,UACxDxB,EAAOG,UAAU,GAAKxsB,KAAKyU,OAAO6T,SAAS9Q,MAAQxX,KAAKmR,OAAOwV,YAAYD,SAASmH,UACpF,MACJ,IAAK,SACG,SAAY,kBACZxB,EAAOG,UAAU,IAAMxsB,KAAKmR,OAAOwV,YAAYD,SAASmH,UACxDxB,EAAOG,UAAU,GAAKxsB,KAAKyU,OAAO6T,SAAS9Q,MAAQxX,KAAKmR,OAAOwV,YAAYD,SAASmH,YAEpFd,EAAS/sB,KAAKmR,OAAOwV,YAAYD,SAASoH,QAAU9tB,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAOoS,OAAOrgB,EACjGwmB,EAASlB,EAAUiB,GAAUA,EAAS/sB,KAAKmR,OAAOwV,YAAYD,SAASmH,WAAY,GACnFxB,EAAOG,UAAU,GAAK,EACtBH,EAAOG,UAAU,GAAKle,KAAK8J,IAAIpY,KAAKyU,OAAO6T,SAAS9Q,OAAS,EAAIwV,GAAS,IAE9E,MACJ,IAAK,UACL,IAAK,UAAW,CACZ,MAAMe,EAAY,IAAI/tB,KAAKmR,OAAOwV,YAAYD,SAAShd,OAAO,aAC1D,SAAY,kBACZ2iB,EAAO0B,GAAW,GAAK/tB,KAAKyU,OAAO6T,SAASjR,OAASrX,KAAKmR,OAAOwV,YAAYD,SAASsH,UACtF3B,EAAO0B,GAAW,IAAM/tB,KAAKmR,OAAOwV,YAAYD,SAASsH,YAEzDjB,EAAS/sB,KAAKyU,OAAO6T,SAASjR,QAAUrX,KAAKmR,OAAOwV,YAAYD,SAASuH,QAAUjuB,KAAKyU,OAAO2T,OAAOvN,IAAM7a,KAAKyU,OAAOoS,OAAO9T,GAC/Hia,EAASlB,EAAUiB,GAAUA,EAAS/sB,KAAKmR,OAAOwV,YAAYD,SAASsH,WAAY,GACnF3B,EAAO0B,GAAW,GAAK/tB,KAAKyU,OAAO6T,SAASjR,OAC5CgV,EAAO0B,GAAW,GAAK/tB,KAAKyU,OAAO6T,SAASjR,OAAUrX,KAAKyU,OAAO6T,SAASjR,QAAU,EAAI2V,MAiCzG,GAzBA,CAAC,IAAK,KAAM,MAAMjoB,SAASkmB,IAClBjrB,KAAK,GAAGirB,cAKbjrB,KAAK,GAAGirB,WAAgB,gBACnBiD,OAAOluB,KAAK,GAAGirB,aACfsB,MAAMF,EAAO,GAAGpB,cAGrBjrB,KAAK,GAAGirB,YAAiB,CACrBjrB,KAAK,GAAGirB,WAAcoC,OAAOhB,EAAOpB,GAAM,IAC1CjrB,KAAK,GAAGirB,WAAcoC,OAAOhB,EAAOpB,GAAM,KAI9CjrB,KAAK,GAAGirB,WAAgB,gBACnBiD,OAAOluB,KAAK,GAAGirB,aAAgBsB,MAAMF,EAAOpB,IAGjDjrB,KAAKmuB,WAAWlD,OAIhBjrB,KAAKyU,OAAOkS,YAAYmC,eAAgB,CACxC,MAAMsF,EAAe,KAGjB,IAAM,mBAAqB,eAIvB,YAHIpuB,KAAKmR,OAAOkd,aAAaruB,KAAKiH,KAC9BjH,KAAK+X,OAAO5B,KAAK,oEAAoEY,KAAK,MAKlG,GADA,0BACK/W,KAAKmR,OAAOkd,aAAaruB,KAAKiH,IAC/B,OAEJ,MAAMqnB,EAAS,QAAStuB,KAAKwW,IAAIgV,UAAU/U,QACrCkN,EAAQrV,KAAK8J,KAAK,EAAG9J,KAAK6J,IAAI,EAAI,qBAAwB,iBAAoB,iBACtE,IAAVwL,IAGJ3jB,KAAKmR,OAAOwV,YAAc,CACtBkG,SAAU7sB,KAAKiH,GACf6lB,iBAAkB9sB,KAAKuuB,kBAAkB,KACzCtB,QAAS,CACLM,MAAQ5J,EAAQ,EAAK,GAAM,IAC3B+J,OAAQY,EAAO,KAGvBtuB,KAAKqe,SACLre,KAAKmR,OAAOwV,YAAYmG,iBAAiB/nB,SAAS8nB,IAC9C7sB,KAAKmR,OAAOiY,OAAOyD,GAAUxO,YAEP,OAAtBre,KAAKmqB,cACLlT,aAAajX,KAAKmqB,cAEtBnqB,KAAKmqB,aAAezS,YAAW,KAC3B1X,KAAKmR,OAAOwV,YAAc,GAC1B3mB,KAAKmR,OAAOiS,WAAW,CAAEtgB,MAAO9C,KAAK6pB,SAAS,GAAI9mB,IAAK/C,KAAK6pB,SAAS,OACtE,OAGP7pB,KAAKwW,IAAIgV,UACJ1U,GAAG,aAAcsX,GACjBtX,GAAG,kBAAmBsX,GACtBtX,GAAG,sBAAuBsX,GAYnC,OARApuB,KAAKsnB,0BAA0BviB,SAASypB,IACpCxuB,KAAKyc,YAAY+R,GAAeC,OAAOpQ,YAIvCre,KAAKikB,QACLjkB,KAAKikB,OAAO5F,SAETre,KAiBX,eAAe0uB,GAAmB,GAC9B,OAAI1uB,KAAKyU,OAAOyU,wBAA0BlpB,KAAKspB,cAM3CoF,GACA1uB,KAAK+X,OAAO5B,KAAK,cAAckC,UAEnCrY,KAAK8W,GAAG,kBAAkB,KACtB9W,KAAK+X,OAAO5B,KAAK,cAAckC,aAEnCrY,KAAK8W,GAAG,iBAAiB,KACrB9W,KAAK+X,OAAOhB,UAIhB/W,KAAKyU,OAAOyU,wBAAyB,GAb1BlpB,KAmBf,2CACIA,KAAKsnB,0BAA0BviB,SAAQ,CAACqmB,EAAMC,KAC1CrrB,KAAKyc,YAAY2O,GAAM3W,OAAO0W,QAAUE,KAQhD,YACI,MAAO,GAAGrrB,KAAKmR,OAAOlK,MAAMjH,KAAKiH,KASrC,iBACI,MAAM0nB,EAAc3uB,KAAKmR,OAAOiG,iBAChC,MAAO,CACH5Q,EAAGmoB,EAAYnoB,EAAIxG,KAAKyU,OAAOoS,OAAOrgB,EACtCuM,EAAG4b,EAAY5b,EAAI/S,KAAKyU,OAAOoS,OAAO9T,GAU9C,mBA4BI,OA1BA/S,KAAK4uB,gBACL5uB,KAAK6uB,YACL7uB,KAAK8uB,YAIL9uB,KAAK+uB,QAAU,CAAC,EAAG/uB,KAAKyU,OAAO6T,SAAS9Q,OACxCxX,KAAKgvB,SAAW,CAAChvB,KAAKyU,OAAO6T,SAASjR,OAAQ,GAC9CrX,KAAKivB,SAAW,CAACjvB,KAAKyU,OAAO6T,SAASjR,OAAQ,GAG9C,CAAC,IAAK,KAAM,MAAMtS,SAASkmB,IAClB9rB,OAAOyB,KAAKZ,KAAKyU,OAAO8T,KAAK0C,IAAO5pB,SAA4C,IAAlCrB,KAAKyU,OAAO8T,KAAK0C,GAAM5M,QAItEre,KAAKyU,OAAO8T,KAAK0C,GAAM5M,QAAS,EAChCre,KAAKyU,OAAO8T,KAAK0C,GAAMnD,MAAQ9nB,KAAKyU,OAAO8T,KAAK0C,GAAMnD,OAAS,MAH/D9nB,KAAKyU,OAAO8T,KAAK0C,GAAM5M,QAAS,KAQxCre,KAAKyU,OAAOgI,YAAY1X,SAASumB,IAC7BtrB,KAAKkvB,aAAa5D,MAGftrB,KAaX,cAAcwX,EAAOH,GAwBjB,YAvBoB,IAATG,QAAyC,IAAVH,IACjChJ,MAAMmJ,IAAUA,GAAS,IAAMnJ,MAAMgJ,IAAWA,GAAU,IAC3DrX,KAAKmR,OAAOsD,OAAO+C,MAAQlJ,KAAK8e,OAAO5V,GAEvCxX,KAAKyU,OAAO4C,OAAS/I,KAAK8J,IAAI9J,KAAK8e,OAAO/V,GAASrX,KAAKyU,OAAO0T,aAGvEnoB,KAAKyU,OAAO6T,SAAS9Q,MAAQlJ,KAAK8J,IAAIpY,KAAKuW,YAAY9B,OAAO+C,OAASxX,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAO2T,OAAOje,OAAQ,GAC5HnK,KAAKyU,OAAO6T,SAASjR,OAAS/I,KAAK8J,IAAIpY,KAAKyU,OAAO4C,QAAUrX,KAAKyU,OAAO2T,OAAOvN,IAAM7a,KAAKyU,OAAO2T,OAAOtN,QAAS,GAC9G9a,KAAKwW,IAAImV,UACT3rB,KAAKwW,IAAImV,SACJ9a,KAAK,QAAS7Q,KAAKmR,OAAOsD,OAAO+C,OACjC3G,KAAK,SAAU7Q,KAAKyU,OAAO4C,QAEhCrX,KAAKspB,cACLtpB,KAAKqe,SACLre,KAAKsW,QAAQU,SACbhX,KAAK+X,OAAOf,SACZhX,KAAKuiB,QAAQvL,SACThX,KAAKikB,QACLjkB,KAAKikB,OAAO/c,YAGblH,KAWX,UAAUwG,EAAGuM,GAUT,OATK1E,MAAM7H,IAAMA,GAAK,IAClBxG,KAAKyU,OAAOoS,OAAOrgB,EAAI8H,KAAK8J,IAAI9J,KAAK8e,OAAO5mB,GAAI,KAE/C6H,MAAM0E,IAAMA,GAAK,IAClB/S,KAAKyU,OAAOoS,OAAO9T,EAAIzE,KAAK8J,IAAI9J,KAAK8e,OAAOra,GAAI,IAEhD/S,KAAKspB,aACLtpB,KAAKqe,SAEFre,KAYX,UAAU6a,EAAK1Q,EAAO2Q,EAAQ5Q,GAC1B,IAAIoG,EAmCJ,OAlCKjC,MAAMwM,IAAWA,GAAU,IAC5B7a,KAAKyU,OAAO2T,OAAOvN,IAAMvM,KAAK8J,IAAI9J,KAAK8e,OAAOvS,GAAM,KAEnDxM,MAAMlE,IAAWA,GAAU,IAC5BnK,KAAKyU,OAAO2T,OAAOje,MAAQmE,KAAK8J,IAAI9J,KAAK8e,OAAOjjB,GAAQ,KAEvDkE,MAAMyM,IAAWA,GAAU,IAC5B9a,KAAKyU,OAAO2T,OAAOtN,OAASxM,KAAK8J,IAAI9J,KAAK8e,OAAOtS,GAAS,KAEzDzM,MAAMnE,IAAWA,GAAU,IAC5BlK,KAAKyU,OAAO2T,OAAOle,KAAOoE,KAAK8J,IAAI9J,KAAK8e,OAAOljB,GAAO,IAGtDlK,KAAKyU,OAAO2T,OAAOvN,IAAM7a,KAAKyU,OAAO2T,OAAOtN,OAAS9a,KAAKyU,OAAO4C,SACjE/G,EAAQhC,KAAKW,OAAQjP,KAAKyU,OAAO2T,OAAOvN,IAAM7a,KAAKyU,OAAO2T,OAAOtN,OAAU9a,KAAKyU,OAAO4C,QAAU,GACjGrX,KAAKyU,OAAO2T,OAAOvN,KAAOvK,EAC1BtQ,KAAKyU,OAAO2T,OAAOtN,QAAUxK,GAE7BtQ,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAO2T,OAAOje,MAAQnK,KAAKuW,YAAY9B,OAAO+C,QAC7ElH,EAAQhC,KAAKW,OAAQjP,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAO2T,OAAOje,MAASnK,KAAKuW,YAAY9B,OAAO+C,OAAS,GAC5GxX,KAAKyU,OAAO2T,OAAOle,MAAQoG,EAC3BtQ,KAAKyU,OAAO2T,OAAOje,OAASmG,GAEhC,CAAC,MAAO,QAAS,SAAU,QAAQvL,SAAS6C,IACxC5H,KAAKyU,OAAO2T,OAAOxgB,GAAK0G,KAAK8J,IAAIpY,KAAKyU,OAAO2T,OAAOxgB,GAAI,MAE5D5H,KAAKyU,OAAO6T,SAAS9Q,MAAQlJ,KAAK8J,IAAIpY,KAAKuW,YAAY9B,OAAO+C,OAASxX,KAAKyU,OAAO2T,OAAOle,KAAOlK,KAAKyU,OAAO2T,OAAOje,OAAQ,GAC5HnK,KAAKyU,OAAO6T,SAASjR,OAAS/I,KAAK8J,IAAIpY,KAAKyU,OAAO4C,QAAUrX,KAAKyU,OAAO2T,OAAOvN,IAAM7a,KAAKyU,OAAO2T,OAAOtN,QAAS,GAClH9a,KAAKyU,OAAO6T,SAASzB,OAAOrgB,EAAIxG,KAAKyU,OAAO2T,OAAOle,KACnDlK,KAAKyU,OAAO6T,SAASzB,OAAO9T,EAAI/S,KAAKyU,OAAO2T,OAAOvN,IAE/C7a,KAAKspB,aACLtpB,KAAKqe,SAEFre,KASX,aAII,MAAMmvB,EAAUnvB,KAAKga,YACrBha,KAAKwW,IAAIgV,UAAYxrB,KAAKmR,OAAOqF,IAAII,OAAO,KACvC/F,KAAK,KAAM,GAAGse,qBACdte,KAAK,YAAa,aAAa7Q,KAAKyU,OAAOoS,OAAOrgB,GAAK,MAAMxG,KAAKyU,OAAOoS,OAAO9T,GAAK,MAG1F,MAAMqc,EAAWpvB,KAAKwW,IAAIgV,UAAU5U,OAAO,YACtC/F,KAAK,KAAM,GAAGse,UA8FnB,GA7FAnvB,KAAKwW,IAAImV,SAAWyD,EAASxY,OAAO,QAC/B/F,KAAK,QAAS7Q,KAAKuW,YAAY9B,OAAO+C,OACtC3G,KAAK,SAAU7Q,KAAKyU,OAAO4C,QAGhCrX,KAAKwW,IAAI4Q,MAAQpnB,KAAKwW,IAAIgV,UAAU5U,OAAO,KACtC/F,KAAK,KAAM,GAAGse,WACdte,KAAK,YAAa,QAAQse,WAO/BnvB,KAAKsW,QAAUP,EAAgBpW,KAAKK,MAKpCA,KAAK+X,OAASH,GAAejY,KAAKK,MAE9BA,KAAKyU,OAAOyU,wBAEZlpB,KAAKqvB,gBAAe,GAQxBrvB,KAAKuiB,QAAU,IAAI0D,GAAQjmB,MAG3BA,KAAK4rB,aAAe5rB,KAAKwW,IAAI4Q,MAAMxQ,OAAO,QACrC/F,KAAK,QAAS,uBACdiG,GAAG,SAAS,KAC4B,qBAAjC9W,KAAKyU,OAAO4T,kBACZroB,KAAKsvB,qBASjBtvB,KAAK0Z,MAAQ1Z,KAAKwW,IAAI4Q,MAAMxQ,OAAO,QAAQ/F,KAAK,QAAS,uBACzB,IAArB7Q,KAAKyU,OAAOiF,OACnB1Z,KAAK+e,WAIT/e,KAAKwW,IAAI+Y,OAASvvB,KAAKwW,IAAI4Q,MAAMxQ,OAAO,KACnC/F,KAAK,KAAM,GAAGse,YACdte,KAAK,QAAS,gBACf7Q,KAAKyU,OAAO8T,KAAK/hB,EAAE6X,SACnBre,KAAKwW,IAAIgZ,aAAexvB,KAAKwW,IAAI+Y,OAAO3Y,OAAO,QAC1C/F,KAAK,QAAS,yBACdA,KAAK,cAAe,WAE7B7Q,KAAKwW,IAAIiZ,QAAUzvB,KAAKwW,IAAI4Q,MAAMxQ,OAAO,KACpC/F,KAAK,KAAM,GAAGse,aAAmBte,KAAK,QAAS,sBAChD7Q,KAAKyU,OAAO8T,KAAKC,GAAGnK,SACpBre,KAAKwW,IAAIkZ,cAAgB1vB,KAAKwW,IAAIiZ,QAAQ7Y,OAAO,QAC5C/F,KAAK,QAAS,0BACdA,KAAK,cAAe,WAE7B7Q,KAAKwW,IAAImZ,QAAU3vB,KAAKwW,IAAI4Q,MAAMxQ,OAAO,KACpC/F,KAAK,KAAM,GAAGse,aACdte,KAAK,QAAS,sBACf7Q,KAAKyU,OAAO8T,KAAKE,GAAGpK,SACpBre,KAAKwW,IAAIoZ,cAAgB5vB,KAAKwW,IAAImZ,QAAQ/Y,OAAO,QAC5C/F,KAAK,QAAS,0BACdA,KAAK,cAAe,WAI7B7Q,KAAKsnB,0BAA0BviB,SAASkC,IACpCjH,KAAKyc,YAAYxV,GAAIgS,gBAQzBjZ,KAAKikB,OAAS,KACVjkB,KAAKyU,OAAOwP,SACZjkB,KAAKikB,OAAS,IAAI+C,GAAOhnB,OAIzBA,KAAKyU,OAAOkS,YAAY+B,uBAAwB,CAChD,MAAMzY,EAAY,IAAIjQ,KAAKmR,OAAOlK,MAAMjH,KAAKiH,sBACvC4oB,EAAY,IAAM7vB,KAAKmR,OAAO2e,UAAU9vB,KAAM,cACpDA,KAAKwW,IAAIgV,UAAUuE,OAAO,wBACrBjZ,GAAG,YAAY7G,eAAwB4f,GACvC/Y,GAAG,aAAa7G,eAAwB4f,GAGjD,OAAO7vB,KAOX,mBACI,MAAM2G,EAAO,GACb3G,KAAKsnB,0BAA0BviB,SAASkC,IACpCN,EAAKpC,KAAKvE,KAAKyc,YAAYxV,GAAIwN,OAAO0W,YAE1CnrB,KAAKwW,IAAI4Q,MACJ3G,UAAU,6BACV3c,KAAK6C,GACLA,KAAK,aACV3G,KAAKyrB,2CAST,kBAAkBR,GAEd,MAAM6B,EAAmB,GACzB,MAAK,CAAC,IAAK,KAAM,MAAMhrB,SAFvBmpB,EAAOA,GAAQ,OAKVjrB,KAAKyU,OAAOkS,YAAY,GAAGsE,aAGhCjrB,KAAKmR,OAAO6R,qBAAqBje,SAAS8nB,IAClCA,IAAa7sB,KAAKiH,IAAMjH,KAAKmR,OAAOiY,OAAOyD,GAAUpY,OAAOkS,YAAY,GAAGsE,aAC3E6B,EAAiBvoB,KAAKsoB,MAGvBC,GAVIA,EAkBf,SAOI,OANI9sB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,QAAU,KACvD3iB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,SAAW3iB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,QAAU,GAC/G3iB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,QAAU,GAAK3iB,KAAKiH,GACjEjH,KAAKmR,OAAO6e,mCACZhwB,KAAKmR,OAAO8e,kBAETjwB,KAQX,WAOI,OANIA,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,QAAU,KACvD3iB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,SAAW3iB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,QAAU,GAC/G3iB,KAAKmR,OAAO6R,qBAAqBhjB,KAAKyU,OAAOkO,QAAU,GAAK3iB,KAAKiH,GACjEjH,KAAKmR,OAAO6e,mCACZhwB,KAAKmR,OAAO8e,kBAETjwB,KAYX,QACIA,KAAK4d,KAAK,kBACV5d,KAAKypB,cAAgB,GAGrBzpB,KAAKsW,QAAQS,OAEb,IAAK,IAAI9P,KAAMjH,KAAKyc,YAChB,IACIzc,KAAKypB,cAAcllB,KAAKvE,KAAKyc,YAAYxV,GAAIipB,SAC/C,MAAO1J,GACLtlB,QAAQslB,MAAMA,GACdxmB,KAAKsW,QAAQH,KAAKqQ,EAAM2J,SAAW3J,GAI3C,OAAO9iB,QAAQ0sB,IAAIpwB,KAAKypB,eACnBvmB,MAAK,KACFlD,KAAKspB,aAAc,EACnBtpB,KAAKqe,SACLre,KAAK4d,KAAK,kBAAkB,GAC5B5d,KAAK4d,KAAK,oBAEbnR,OAAO+Z,IACJtlB,QAAQslB,MAAMA,GACdxmB,KAAKsW,QAAQH,KAAKqQ,EAAM2J,SAAW3J,MAS/C,kBAGI,CAAC,IAAK,KAAM,MAAMzhB,SAASkmB,IACvBjrB,KAAK,GAAGirB,YAAiB,QAI7B,IAAK,IAAIhkB,KAAMjH,KAAKyc,YAAa,CAE7B,MAAMyO,EAAalrB,KAAKyc,YAAYxV,GAQpC,GALIikB,EAAWzW,OAAO8a,SAAWrE,EAAWzW,OAAO8a,OAAOc,YACtDrwB,KAAK6pB,SAAW,UAAW7pB,KAAK6pB,UAAY,IAAI7e,OAAOkgB,EAAWoF,cAAc,QAIhFpF,EAAWzW,OAAOuW,SAAWE,EAAWzW,OAAOuW,OAAOqF,UAAW,CACjE,MAAMrF,EAAS,IAAIE,EAAWzW,OAAOuW,OAAOC,OAC5CjrB,KAAK,GAAGgrB,YAAmB,UAAWhrB,KAAK,GAAGgrB,aAAoB,IAAIhgB,OAAOkgB,EAAWoF,cAAc,QAS9G,OAHItwB,KAAKyU,OAAO8T,KAAK/hB,GAAmC,UAA9BxG,KAAKyU,OAAO8T,KAAK/hB,EAAE+pB,SACzCvwB,KAAK6pB,SAAW,CAAE7pB,KAAKwC,MAAMM,MAAO9C,KAAKwC,MAAMO,MAE5C/C,KAqBX,cAAcirB,GAGV,GAAIjrB,KAAKyU,OAAO8T,KAAK0C,GAAMuF,MAAO,CAC9B,MAEMC,EAFSzwB,KAAKyU,OAAO8T,KAAK0C,GAEFuF,MAC9B,GAAI9vB,MAAMqD,QAAQ0sB,GAEd,OAAOA,EAGX,GAA8B,iBAAnBA,EAA6B,CAIpC,MAAMC,EAAO1wB,KAGPgC,EAAS,CAAEkF,SAAUupB,EAAevpB,UAO1C,OALsBlH,KAAKsnB,0BAA0Brb,QAAO,CAACC,EAAKsiB,KAC9D,MAAMmC,EAAYD,EAAKjU,YAAY+R,GACnC,OAAOtiB,EAAIlB,OAAO2lB,EAAUC,SAAS3F,EAAMjpB,MAC5C,IAEkB4C,KAAKtE,IAEtB,IAAIuwB,EAAa,GAEjB,OADAA,EAAand,EAAMmd,EAAYJ,GACxB/c,EAAMmd,EAAYvwB,OAMrC,OAAIN,KAAK,GAAGirB,YC9sCpB,SAAqBsB,EAAOuE,EAAYC,SACJ,IAArBA,GAAoC1iB,MAAM2iB,SAASD,OAC1DA,EAAoB,GAIxB,MAAME,GAFNF,GAAqBA,GAEa,EAC5BG,EAAa,IACbC,EAAc,IACdC,EAAU,GAAM,IAAMD,EAEtBzf,EAAIpD,KAAKU,IAAIud,EAAM,GAAKA,EAAM,IACpC,IAAI8E,EAAI3f,EAAIqf,EACPziB,KAAKC,IAAImD,GAAKpD,KAAKE,MAAS,IAC7B6iB,EAAK/iB,KAAK8J,IAAI9J,KAAKU,IAAI0C,IAAMwf,EAAcD,GAG/C,MAAM3vB,EAAOgN,KAAKQ,IAAI,GAAIR,KAAKW,MAAMX,KAAKC,IAAI8iB,GAAK/iB,KAAKE,OACxD,IAAI8iB,EAAe,EACfhwB,EAAO,GAAc,IAATA,IACZgwB,EAAehjB,KAAKU,IAAIV,KAAK8e,MAAM9e,KAAKC,IAAIjN,GAAQgN,KAAKE,QAG7D,IAAI+iB,EAAOjwB,EACJ,EAAIA,EAAQ+vB,EAAMF,GAAeE,EAAIE,KACxCA,EAAO,EAAIjwB,EACJ,EAAIA,EAAQ+vB,EAAMD,GAAWC,EAAIE,KACpCA,EAAO,EAAIjwB,EACJ,GAAKA,EAAQ+vB,EAAMF,GAAeE,EAAIE,KACzCA,EAAO,GAAKjwB,KAKxB,IAAIkvB,EAAQ,GACRpsB,EAAI0I,YAAYwB,KAAKW,MAAMsd,EAAM,GAAKgF,GAAQA,GAAMxkB,QAAQukB,IAChE,KAAOltB,EAAImoB,EAAM,IACbiE,EAAMjsB,KAAKH,GACXA,GAAKmtB,EACDD,EAAe,IACfltB,EAAI0I,WAAW1I,EAAE2I,QAAQukB,KAGjCd,EAAMjsB,KAAKH,SAEc,IAAd0sB,IAAyF,IAA5D,CAAC,MAAO,OAAQ,OAAQ,WAAWtlB,QAAQslB,MAC/EA,EAAa,WAEE,QAAfA,GAAuC,SAAfA,GACpBN,EAAM,GAAKjE,EAAM,KACjBiE,EAAQA,EAAMhf,MAAM,IAGT,SAAfsf,GAAwC,SAAfA,GACrBN,EAAMA,EAAMnvB,OAAS,GAAKkrB,EAAM,IAChCiE,EAAMgB,MAId,OAAOhB,EDopCQiB,CAAYzxB,KAAK,GAAGirB,YAAgB,QAExC,GASX,WAAWA,GAEP,IAAK,CAAC,IAAK,KAAM,MAAMnpB,SAASmpB,GAC5B,MAAM,IAAI5qB,MAAM,mDAAmD4qB,KAGvE,MAAMyG,EAAY1xB,KAAKyU,OAAO8T,KAAK0C,GAAM5M,QACF,mBAAzBre,KAAK,GAAGirB,aACd5c,MAAMrO,KAAK,GAAGirB,WAAc,IASpC,GALIjrB,KAAK,GAAGirB,WACRjrB,KAAKwW,IAAIgV,UAAUuE,OAAO,gBAAgB9E,KACrC1T,MAAM,UAAWma,EAAY,KAAO,SAGxCA,EACD,OAAO1xB,KAIX,MAAM2xB,EAAc,CAChBnrB,EAAG,CACCU,SAAU,aAAalH,KAAKyU,OAAO2T,OAAOle,SAASlK,KAAKyU,OAAO4C,OAASrX,KAAKyU,OAAO2T,OAAOtN,UAC3F8L,YAAa,SACbY,QAASxnB,KAAKyU,OAAO6T,SAAS9Q,MAAQ,EACtCiQ,QAAUznB,KAAKyU,OAAO8T,KAAK0C,GAAM2G,cAAgB,EACjDC,aAAc,MAElBrJ,GAAI,CACAthB,SAAU,aAAalH,KAAKyU,OAAO2T,OAAOle,SAASlK,KAAKyU,OAAO2T,OAAOvN,OACtE+L,YAAa,OACbY,SAAU,GAAKxnB,KAAKyU,OAAO8T,KAAK0C,GAAM2G,cAAgB,GACtDnK,QAASznB,KAAKyU,OAAO6T,SAASjR,OAAS,EACvCwa,cAAe,IAEnBpJ,GAAI,CACAvhB,SAAU,aAAalH,KAAKuW,YAAY9B,OAAO+C,MAAQxX,KAAKyU,OAAO2T,OAAOje,UAAUnK,KAAKyU,OAAO2T,OAAOvN,OACvG+L,YAAa,QACbY,QAAUxnB,KAAKyU,OAAO8T,KAAK0C,GAAM2G,cAAgB,EACjDnK,QAASznB,KAAKyU,OAAO6T,SAASjR,OAAS,EACvCwa,cAAe,KAKvB7xB,KAAK,GAAGirB,WAAgBjrB,KAAK8xB,cAAc7G,GAG3C,MAAM8G,EAAqB,CAAEvB,IACzB,IAAK,IAAIpsB,EAAI,EAAGA,EAAIosB,EAAMnvB,OAAQ+C,IAC9B,GAAIiK,MAAMmiB,EAAMpsB,IACZ,OAAO,EAGf,OAAO,GANgB,CAOxBpE,KAAK,GAAGirB,YAGX,IAAI+G,EACJ,OAAQL,EAAY1G,GAAMrE,aAC1B,IAAK,QACDoL,EAAe,YACf,MACJ,IAAK,OACDA,EAAe,WACf,MACJ,IAAK,SACDA,EAAe,aACf,MACJ,QACI,MAAM,IAAI3xB,MAAM,iCAOpB,GAJAL,KAAK,GAAGirB,UAAe+G,EAAahyB,KAAK,GAAGirB,YACvCgH,YAAY,GAGbF,EACA/xB,KAAK,GAAGirB,UAAaiH,WAAWlyB,KAAK,GAAGirB,YACG,WAAvCjrB,KAAKyU,OAAO8T,KAAK0C,GAAMkH,aACvBnyB,KAAK,GAAGirB,UAAamH,YAAY1gB,GAAM2K,GAAoB3K,EAAG,SAE/D,CACH,IAAI8e,EAAQxwB,KAAK,GAAGirB,WAAcrmB,KAAKytB,GAC3BA,EAAEpH,EAAKra,OAAO,EAAG,MAE7B5Q,KAAK,GAAGirB,UAAaiH,WAAW1B,GAC3B4B,YAAW,CAACC,EAAGjuB,IACLpE,KAAK,GAAGirB,WAAc7mB,GAAGd,OAU5C,GALAtD,KAAKwW,IAAI,GAAGyU,UACPpa,KAAK,YAAa8gB,EAAY1G,GAAM/jB,UACpCvH,KAAKK,KAAK,GAAGirB,YAGb8G,EAAoB,CACrB,MAAMO,EAAgB,YAAa,KAAKtyB,KAAKga,YAAY1N,QAAQ,IAAK,YAAY2e,iBAC5E3I,EAAQtiB,KACdsyB,EAAc5R,MAAK,SAAUhP,EAAGtN,GAC5B,MAAMoO,EAAW,SAAUxS,MAAM+vB,OAAO,QACpCzN,EAAM,GAAG2I,WAAc7mB,GAAGmT,OAC1BL,GAAY1E,EAAU8P,EAAM,GAAG2I,WAAc7mB,GAAGmT,OAEhD+K,EAAM,GAAG2I,WAAc7mB,GAAGgM,WAC1BoC,EAAS3B,KAAK,YAAayR,EAAM,GAAG2I,WAAc7mB,GAAGgM,cAMjE,MAAM0X,EAAQ9nB,KAAKyU,OAAO8T,KAAK0C,GAAMnD,OAAS,KA8C9C,OA7Cc,OAAVA,IACA9nB,KAAKwW,IAAI,GAAGyU,gBACPpa,KAAK,IAAK8gB,EAAY1G,GAAMzD,SAC5B3W,KAAK,IAAK8gB,EAAY1G,GAAMxD,SAC5BnkB,KAAKivB,GAAYzK,EAAO9nB,KAAKwC,QAC7BqO,KAAK,OAAQ,gBACqB,OAAnC8gB,EAAY1G,GAAM4G,cAClB7xB,KAAKwW,IAAI,GAAGyU,gBACPpa,KAAK,YAAa,UAAU8gB,EAAY1G,GAAM4G,gBAAgBF,EAAY1G,GAAMzD,YAAYmK,EAAY1G,GAAMxD,aAK3H,CAAC,IAAK,KAAM,MAAM1iB,SAASkmB,IACvB,GAAIjrB,KAAKyU,OAAOkS,YAAY,QAAQsE,oBAAwB,CACxD,MAAMhb,EAAY,IAAIjQ,KAAKmR,OAAOlK,MAAMjH,KAAKiH,sBACvCurB,EAAiB,WACwB,mBAAhC,SAAUxyB,MAAMyW,OAAOgc,OAC9B,SAAUzyB,MAAMyW,OAAOgc,QAE3B,IAAIC,EAAmB,MAATzH,EAAgB,YAAc,YACxC,SAAY,mBACZyH,EAAS,QAEb,SAAU1yB,MACLuX,MAAM,cAAe,QACrBA,MAAM,SAAUmb,GAChB5b,GAAG,UAAU7G,IAAauiB,GAC1B1b,GAAG,QAAQ7G,IAAauiB,IAEjCxyB,KAAKwW,IAAIgV,UAAU/K,UAAU,eAAewK,gBACvCpa,KAAK,WAAY,GACjBiG,GAAG,YAAY7G,IAAauiB,GAC5B1b,GAAG,WAAW7G,KAAa,WACxB,SAAUjQ,MACLuX,MAAM,cAAe,UACrBT,GAAG,UAAU7G,IAAa,MAC1B6G,GAAG,QAAQ7G,IAAa,SAEhC6G,GAAG,YAAY7G,KAAa,KACzBjQ,KAAKmR,OAAO2e,UAAU9vB,KAAM,GAAGirB,iBAKxCjrB,KAUX,kBAAkB2yB,GAEQ,QADtBA,GAAiBA,GAAiB,OAE9B3yB,KAAKsnB,0BAA0BviB,SAASkC,IACpC,MAAM2rB,EAAK5yB,KAAKyc,YAAYxV,GAAI4rB,yBAC3BD,IAEGD,EADkB,OAAlBA,GACiBC,EAEDtkB,KAAK8J,IAAIua,GAAgBC,QAKpDD,IACDA,IAAkB3yB,KAAKyU,OAAO2T,OAAOvN,MAAO7a,KAAKyU,OAAO2T,OAAOtN,OAE/D9a,KAAK4uB,cAAc5uB,KAAKuW,YAAY9B,OAAO+C,MAAOmb,GAClD3yB,KAAKmR,OAAOyd,gBACZ5uB,KAAKmR,OAAO8e,kBAUpB,oBAAoB/W,EAAQ4Z,GACxB9yB,KAAKsnB,0BAA0BviB,SAASkC,IACpCjH,KAAKyc,YAAYxV,GAAIykB,oBAAoBxS,EAAQ4Z,OAK7D7kB,EAASC,MAAMnJ,SAAQ,CAACguB,EAAM1H,KAC1B,MAAM2H,EAAY/kB,EAASE,WAAWkd,GAChC4H,EAAW,KAAKF,IAmBtB5J,GAAM1pB,UAAU,GAAGszB,gBAAqB,WAEpC,OADA/yB,KAAK0rB,oBAAoBsH,GAAW,GAC7BhzB,MAmBXmpB,GAAM1pB,UAAU,GAAGwzB,gBAAyB,WAExC,OADAjzB,KAAK0rB,oBAAoBsH,GAAW,GAC7BhzB,SE/gDf,MAAM,GAAiB,CACnBwC,MAAO,GACPgV,MAAO,IACP0b,UAAW,IACXzP,iBAAkB,KAClBD,iBAAkB,KAClB2P,mBAAmB,EACnB/J,OAAQ,GACR7G,QAAS,CACL2D,QAAS,IAEbO,kBAAkB,EAClB2M,aAAa,GAmKjB,MAAMC,GAyBF,YAAYpsB,EAAIqsB,EAAY7e,GAKxBzU,KAAKspB,aAAc,EAMnBtpB,KAAKuW,YAAcvW,KAMnBA,KAAKiH,GAAKA,EAMVjH,KAAKwrB,UAAY,KAMjBxrB,KAAKwW,IAAM,KAOXxW,KAAKopB,OAAS,GAMdppB,KAAKgjB,qBAAuB,GAS5BhjB,KAAKuzB,eAAiB,GAStBvzB,KAAKyU,OAASA,EACdf,EAAM1T,KAAKyU,OAAQ,IAUnBzU,KAAKwzB,aAAetf,EAASlU,KAAKyU,QAUlCzU,KAAKwC,MAAQxC,KAAKyU,OAAOjS,MAMzBxC,KAAKyzB,IAAM,IAAI,EAAUH,GAOzBtzB,KAAK0zB,oBAAsB,IAAIxzB,IAQ/BF,KAAKoqB,YAAc,GAkBnBpqB,KAAK2mB,YAAc,GAGnB3mB,KAAKqqB,mBAoBT,GAAGC,EAAOC,GACN,GAAqB,iBAAVD,EACP,MAAM,IAAIjqB,MAAM,+DAA+DiqB,EAAMzd,cAEzF,GAAmB,mBAAR0d,EACP,MAAM,IAAIlqB,MAAM,+DAOpB,OALKL,KAAKoqB,YAAYE,KAElBtqB,KAAKoqB,YAAYE,GAAS,IAE9BtqB,KAAKoqB,YAAYE,GAAO/lB,KAAKgmB,GACtBA,EAWX,IAAID,EAAOC,GACP,MAAMC,EAAaxqB,KAAKoqB,YAAYE,GACpC,GAAoB,iBAATA,IAAsB5pB,MAAMqD,QAAQymB,GAC3C,MAAM,IAAInqB,MAAM,+CAA+CiqB,EAAMzd,cAEzE,QAAa8E,IAAT4Y,EAGAvqB,KAAKoqB,YAAYE,GAAS,OACvB,CACH,MAAMG,EAAYD,EAAWhf,QAAQ+e,GACrC,IAAmB,IAAfE,EAGA,MAAM,IAAIpqB,MAAM,kFAFhBmqB,EAAW9M,OAAO+M,EAAW,GAKrC,OAAOzqB,KAWX,KAAKsqB,EAAOI,GAGR,MAAMiJ,EAAc3zB,KAAKoqB,YAAYE,GACrC,GAAoB,iBAATA,EACP,MAAM,IAAIjqB,MAAM,kDAAkDiqB,EAAMzd,cACrE,IAAK8mB,IAAgB3zB,KAAKoqB,YAA0B,aAEvD,OAAOpqB,KAEX,MAAM6qB,EAAW7qB,KAAKga,YACtB,IAAI4Q,EAsBJ,GAlBIA,EAHAF,GAAaA,EAAUG,SAGRH,EAEA,CAACG,SAAUA,EAAUC,OAAQ9qB,KAAM8D,KAAM4mB,GAAa,MAErEiJ,GAEAA,EAAY5uB,SAASgmB,IAIjBA,EAAUprB,KAAKK,KAAM4qB,MAQf,iBAAVN,EAA0B,CAC1B,MAAMsJ,EAAez0B,OAAOqC,OAAO,CAAEqyB,WAAYvJ,GAASM,GAC1D5qB,KAAK4d,KAAK,eAAgBgW,GAE9B,OAAO5zB,KASX,SAASyU,GAEL,GAAsB,iBAAXA,EACP,MAAM,IAAIpU,MAAM,wBAIpB,MAAMiiB,EAAQ,IAAI6G,GAAM1U,EAAQzU,MAMhC,GAHAA,KAAKopB,OAAO9G,EAAMrb,IAAMqb,EAGK,OAAzBA,EAAM7N,OAAOkO,UAAqBtU,MAAMiU,EAAM7N,OAAOkO,UAClD3iB,KAAKgjB,qBAAqB3hB,OAAS,EAElCihB,EAAM7N,OAAOkO,QAAU,IACvBL,EAAM7N,OAAOkO,QAAUrU,KAAK8J,IAAIpY,KAAKgjB,qBAAqB3hB,OAASihB,EAAM7N,OAAOkO,QAAS,IAE7F3iB,KAAKgjB,qBAAqBtF,OAAO4E,EAAM7N,OAAOkO,QAAS,EAAGL,EAAMrb,IAChEjH,KAAKgwB,uCACF,CACH,MAAM3uB,EAASrB,KAAKgjB,qBAAqBze,KAAK+d,EAAMrb,IACpDjH,KAAKopB,OAAO9G,EAAMrb,IAAIwN,OAAOkO,QAAUthB,EAAS,EAKpD,IAAIkoB,EAAa,KAqBjB,OApBAvpB,KAAKyU,OAAO2U,OAAOrkB,SAAQ,CAAC+uB,EAAczI,KAClCyI,EAAa7sB,KAAOqb,EAAMrb,KAC1BsiB,EAAa8B,MAGF,OAAf9B,IACAA,EAAavpB,KAAKyU,OAAO2U,OAAO7kB,KAAKvE,KAAKopB,OAAO9G,EAAMrb,IAAIwN,QAAU,GAEzEzU,KAAKopB,OAAO9G,EAAMrb,IAAIsiB,WAAaA,EAG/BvpB,KAAKspB,cACLtpB,KAAKiwB,iBAELjwB,KAAKopB,OAAO9G,EAAMrb,IAAIgS,aACtBjZ,KAAKopB,OAAO9G,EAAMrb,IAAIipB,QAGtBlwB,KAAK4uB,cAAc5uB,KAAKyU,OAAO+C,MAAOxX,KAAKsX,gBAExCtX,KAAKopB,OAAO9G,EAAMrb,IAgB7B,eAAe8sB,EAASC,GAIpB,IAAIC,EAmBJ,OAtBAD,EAAOA,GAAQ,OAKXC,EADAF,EACa,CAACA,GAED50B,OAAOyB,KAAKZ,KAAKopB,QAGlC6K,EAAWlvB,SAASmvB,IAChBl0B,KAAKopB,OAAO8K,GAAK5M,0BAA0BviB,SAASqmB,IAChD,MAAM+I,EAAQn0B,KAAKopB,OAAO8K,GAAKzX,YAAY2O,GAC3C+I,EAAM5I,4BAEC4I,EAAMC,mBACNp0B,KAAKyU,OAAOjS,MAAM2xB,EAAM3K,UAClB,UAATwK,GACAG,EAAME,yBAIXr0B,KAUX,YAAYiH,GACR,IAAKjH,KAAKopB,OAAOniB,GACb,MAAM,IAAI5G,MAAM,yCAAyC4G,KA2C7D,OAvCAjH,KAAKymB,iBAAiB1P,OAGtB/W,KAAKs0B,eAAertB,GAGpBjH,KAAKopB,OAAOniB,GAAI8Q,OAAOhB,OACvB/W,KAAKopB,OAAOniB,GAAIsb,QAAQjJ,SAAQ,GAChCtZ,KAAKopB,OAAOniB,GAAIqP,QAAQS,OAGpB/W,KAAKopB,OAAOniB,GAAIuP,IAAIgV,WACpBxrB,KAAKopB,OAAOniB,GAAIuP,IAAIgV,UAAU7T,SAIlC3X,KAAKyU,OAAO2U,OAAO1L,OAAO1d,KAAKopB,OAAOniB,GAAIsiB,WAAY,UAC/CvpB,KAAKopB,OAAOniB,UACZjH,KAAKyU,OAAOjS,MAAMyE,GAGzBjH,KAAKyU,OAAO2U,OAAOrkB,SAAQ,CAAC+uB,EAAczI,KACtCrrB,KAAKopB,OAAO0K,EAAa7sB,IAAIsiB,WAAa8B,KAI9CrrB,KAAKgjB,qBAAqBtF,OAAO1d,KAAKgjB,qBAAqBxX,QAAQvE,GAAK,GACxEjH,KAAKgwB,mCAGDhwB,KAAKspB,cACLtpB,KAAKiwB,iBAGLjwB,KAAK4uB,cAAc5uB,KAAKyU,OAAO+C,MAAOxX,KAAKsX,gBAG/CtX,KAAK4d,KAAK,gBAAiB3W,GAEpBjH,KAQX,UACI,OAAOA,KAAKojB,aAqChB,gBAAgB1gB,EAAQ6xB,EAAkBC,GAItC,MAAMC,GAHND,EAAOA,GAAQ,IAGaE,SAAW,SAAUhoB,GAC7CxL,QAAQqN,IAAI,yDAA0D7B,IAGpEioB,EAAW,KACb,IACI30B,KAAKyzB,IAAI5d,QAAQ7V,KAAKwC,MAAOE,GACxBQ,MAAM0xB,GAAaL,EAAiBC,EAAKrvB,SAAWyvB,EAASzvB,SAAWyvB,EAAS7uB,KAAM/F,QACvFyM,MAAMgoB,GACb,MAAOjO,GAELiO,EAAejO,KAIvB,OADAxmB,KAAK8W,GAAG,gBAAiB6d,GAClBA,EAeX,WAAWE,GAEP,GAA4B,iBAD5BA,EAAgBA,GAAiB,IAE7B,MAAM,IAAIx0B,MAAM,6CAA6Cw0B,WAIjE,IAAIC,EAAO,CAAEjyB,IAAK7C,KAAKwC,MAAMK,IAAKC,MAAO9C,KAAKwC,MAAMM,MAAOC,IAAK/C,KAAKwC,MAAMO,KAC3E,IAAK,IAAI8Q,KAAYghB,EACjBC,EAAKjhB,GAAYghB,EAAchhB,GAEnCihB,EA7iBR,SAA8BhP,EAAWrR,GAGrCA,EAASA,GAAU,GAInB,IAEIsgB,EAFAC,GAAmB,EACnBC,EAAqB,KAEzB,QAA4B,KAR5BnP,EAAYA,GAAa,IAQJjjB,UAAgD,IAAnBijB,EAAUhjB,YAAgD,IAAjBgjB,EAAU/iB,IAAoB,CAIrH,GAFA+iB,EAAUhjB,MAAQwL,KAAK8J,IAAI4Y,SAASlL,EAAUhjB,OAAQ,GACtDgjB,EAAU/iB,IAAMuL,KAAK8J,IAAI4Y,SAASlL,EAAU/iB,KAAM,GAC9CsL,MAAMyX,EAAUhjB,QAAUuL,MAAMyX,EAAU/iB,KAC1C+iB,EAAUhjB,MAAQ,EAClBgjB,EAAU/iB,IAAM,EAChBkyB,EAAqB,GACrBF,EAAkB,OACf,GAAI1mB,MAAMyX,EAAUhjB,QAAUuL,MAAMyX,EAAU/iB,KACjDkyB,EAAqBnP,EAAUhjB,OAASgjB,EAAU/iB,IAClDgyB,EAAkB,EAClBjP,EAAUhjB,MAASuL,MAAMyX,EAAUhjB,OAASgjB,EAAU/iB,IAAM+iB,EAAUhjB,MACtEgjB,EAAU/iB,IAAOsL,MAAMyX,EAAU/iB,KAAO+iB,EAAUhjB,MAAQgjB,EAAU/iB,QACjE,CAGH,GAFAkyB,EAAqB3mB,KAAK8e,OAAOtH,EAAUhjB,MAAQgjB,EAAU/iB,KAAO,GACpEgyB,EAAkBjP,EAAU/iB,IAAM+iB,EAAUhjB,MACxCiyB,EAAkB,EAAG,CACrB,MAAMG,EAAOpP,EAAUhjB,MACvBgjB,EAAU/iB,IAAM+iB,EAAUhjB,MAC1BgjB,EAAUhjB,MAAQoyB,EAClBH,EAAkBjP,EAAU/iB,IAAM+iB,EAAUhjB,MAE5CmyB,EAAqB,IACrBnP,EAAUhjB,MAAQ,EAClBgjB,EAAU/iB,IAAM,EAChBgyB,EAAkB,GAG1BC,GAAmB,EAevB,OAXIvgB,EAAOgP,kBAAoBuR,GAAoBD,EAAkBtgB,EAAOgP,mBACxEqC,EAAUhjB,MAAQwL,KAAK8J,IAAI6c,EAAqB3mB,KAAKW,MAAMwF,EAAOgP,iBAAmB,GAAI,GACzFqC,EAAU/iB,IAAM+iB,EAAUhjB,MAAQ2R,EAAOgP,kBAIzChP,EAAO+O,kBAAoBwR,GAAoBD,EAAkBtgB,EAAO+O,mBACxEsC,EAAUhjB,MAAQwL,KAAK8J,IAAI6c,EAAqB3mB,KAAKW,MAAMwF,EAAO+O,iBAAmB,GAAI,GACzFsC,EAAU/iB,IAAM+iB,EAAUhjB,MAAQ2R,EAAO+O,kBAGtCsC,EAufIqP,CAAqBL,EAAM90B,KAAKyU,QAGvC,IAAK,IAAIZ,KAAYihB,EACjB90B,KAAKwC,MAAMqR,GAAYihB,EAAKjhB,GAIhC7T,KAAK4d,KAAK,kBACV5d,KAAKuzB,eAAiB,GACtBvzB,KAAKo1B,cAAe,EACpB,IAAK,IAAInuB,KAAMjH,KAAKopB,OAChBppB,KAAKuzB,eAAehvB,KAAKvE,KAAKopB,OAAOniB,GAAIipB,SAG7C,OAAOxsB,QAAQ0sB,IAAIpwB,KAAKuzB,gBACnB9mB,OAAO+Z,IACJtlB,QAAQslB,MAAMA,GACdxmB,KAAKsW,QAAQH,KAAKqQ,EAAM2J,SAAW3J,GACnCxmB,KAAKo1B,cAAe,KAEvBlyB,MAAK,KAEFlD,KAAKuiB,QAAQvL,SAGbhX,KAAKgjB,qBAAqBje,SAAS8nB,IAC/B,MAAMvK,EAAQtiB,KAAKopB,OAAOyD,GAC1BvK,EAAMC,QAAQvL,SAEdsL,EAAMgF,0BAA0BviB,SAASypB,IACrClM,EAAM7F,YAAY+R,GAAe6G,8BAKzCr1B,KAAK4d,KAAK,kBACV5d,KAAK4d,KAAK,iBACV5d,KAAK4d,KAAK,gBAAiBiX,GAK3B,MAAM,IAAEhyB,EAAG,MAAEC,EAAK,IAAEC,GAAQ/C,KAAKwC,MACRrD,OAAOyB,KAAKi0B,GAChCS,MAAMr2B,GAAQ,CAAC,MAAO,QAAS,OAAO6C,SAAS7C,MAGhDe,KAAK4d,KAAK,iBAAkB,CAAE/a,MAAKC,QAAOC,QAG9C/C,KAAKo1B,cAAe,KAYhC,sBAAsBtK,EAAQ+I,EAAYc,GACjC30B,KAAK0zB,oBAAoBtzB,IAAI0qB,IAC9B9qB,KAAK0zB,oBAAoBlzB,IAAIsqB,EAAQ,IAAI5qB,KAE7C,MAAMsrB,EAAYxrB,KAAK0zB,oBAAoBp0B,IAAIwrB,GAEzCyK,EAAU/J,EAAUlsB,IAAIu0B,IAAe,GACxC0B,EAAQzzB,SAAS6yB,IAClBY,EAAQhxB,KAAKowB,GAEjBnJ,EAAUhrB,IAAIqzB,EAAY0B,GAS9B,UACI,IAAK,IAAKzK,EAAQ0K,KAAsBx1B,KAAK0zB,oBAAoB3lB,UAC7D,IAAK,IAAK8lB,EAAY4B,KAAcD,EAChC,IAAK,IAAIb,KAAYc,EACjB3K,EAAO4K,oBAAoB7B,EAAYc,GAMnD,MAAMxjB,EAASnR,KAAKwW,IAAIC,OAAOC,WAC/B,IAAKvF,EACD,MAAM,IAAI9Q,MAAM,iCAEpB,KAAO8Q,EAAOwkB,kBACVxkB,EAAOykB,YAAYzkB,EAAOwkB,kBAK9BxkB,EAAO0kB,UAAY1kB,EAAO0kB,UAE1B71B,KAAKspB,aAAc,EAEnBtpB,KAAKwW,IAAM,KACXxW,KAAKopB,OAAS,KAUlB,aAAayD,GAET,OADAA,EAAWA,GAAY,YAE0B,IAA7B7sB,KAAK2mB,YAAYkG,UAA2B7sB,KAAK2mB,YAAYkG,WAAaA,KAAc7sB,KAAKo1B,eAEpGp1B,KAAK2mB,YAAYD,UAAY1mB,KAAK2mB,YAAYsG,SAAWjtB,KAAKo1B,cAW/E,iBACI,MAAMU,EAAuB91B,KAAKwW,IAAIC,OAAOyB,wBAC7C,IAAI6d,EAAW3b,SAASC,gBAAgB2b,YAAc5b,SAASrU,KAAKiwB,WAChEC,EAAW7b,SAASC,gBAAgBJ,WAAaG,SAASrU,KAAKkU,UAC/DuR,EAAYxrB,KAAKwW,IAAIC,OACzB,KAAgC,OAAzB+U,EAAU9U,YAIb,GADA8U,EAAYA,EAAU9U,WAClB8U,IAAcpR,UAAuD,WAA3C,SAAUoR,GAAWjU,MAAM,YAA0B,CAC/Ewe,GAAY,EAAIvK,EAAUtT,wBAAwBhO,KAClD+rB,GAAY,EAAIzK,EAAUtT,wBAAwB2C,IAClD,MAGR,MAAO,CACHrU,EAAGuvB,EAAWD,EAAqB5rB,KACnC6I,EAAGkjB,EAAWH,EAAqBjb,IACnCrD,MAAOse,EAAqBte,MAC5BH,OAAQye,EAAqBze,QASrC,qBACI,MAAM6e,EAAS,CAAErb,IAAK,EAAG3Q,KAAM,GAC/B,IAAIshB,EAAYxrB,KAAKwrB,UAAU2K,cAAgB,KAC/C,KAAqB,OAAd3K,GACH0K,EAAOrb,KAAO2Q,EAAU4K,UACxBF,EAAOhsB,MAAQshB,EAAU6K,WACzB7K,EAAYA,EAAU2K,cAAgB,KAE1C,OAAOD,EAOX,mCACIl2B,KAAKgjB,qBAAqBje,SAAQ,CAACmvB,EAAK7I,KACpCrrB,KAAKopB,OAAO8K,GAAKzf,OAAOkO,QAAU0I,KAS1C,YACI,OAAOrrB,KAAKiH,GAQhB,aACI,MAAMqvB,EAAat2B,KAAKwW,IAAIC,OAAOyB,wBAEnC,OADAlY,KAAK4uB,cAAc0H,EAAW9e,MAAO8e,EAAWjf,QACzCrX,KAQX,mBAGI,GAAIqO,MAAMrO,KAAKyU,OAAO+C,QAAUxX,KAAKyU,OAAO+C,OAAS,EACjD,MAAM,IAAInX,MAAM,2DAOpB,GAHAL,KAAKyU,OAAO0e,oBAAsBnzB,KAAKyU,OAAO0e,kBAG1CnzB,KAAKyU,OAAO0e,kBAAmB,CAC/B,MAAMoD,EAAkB,IAAMv2B,KAAKw2B,aACnCC,OAAOC,iBAAiB,SAAUH,GAClCv2B,KAAK22B,sBAAsBF,OAAQ,SAAUF,GAI7C,MAAMK,EAAgB,IAAM52B,KAAK4uB,gBACjC6H,OAAOC,iBAAiB,OAAQE,GAChC52B,KAAK22B,sBAAsBF,OAAQ,OAAQG,GAQ/C,OAJA52B,KAAKyU,OAAO2U,OAAOrkB,SAAS+uB,IACxB9zB,KAAK62B,SAAS/C,MAGX9zB,KAeX,cAAcwX,EAAOH,GAGjB,IAAKhJ,MAAMmJ,IAAUA,GAAS,IAAMnJ,MAAMgJ,IAAWA,GAAU,EAAG,CAE9D,MAAMyf,EAAwBzf,EAASrX,KAAKsX,cAE5CtX,KAAKyU,OAAO+C,MAAQlJ,KAAK8J,IAAI9J,KAAK8e,OAAO5V,GAAQxX,KAAKyU,OAAOye,WAEzDlzB,KAAKyU,OAAO0e,mBAERnzB,KAAKwW,MACLxW,KAAKyU,OAAO+C,MAAQlJ,KAAK8J,IAAIpY,KAAKwW,IAAIC,OAAOC,WAAWwB,wBAAwBV,MAAOxX,KAAKyU,OAAOye,YAI3G,IAAI+C,EAAW,EACfj2B,KAAKgjB,qBAAqBje,SAAS8nB,IAC/B,MAAMvK,EAAQtiB,KAAKopB,OAAOyD,GACpBkK,EAAc/2B,KAAKyU,OAAO+C,MAE1Bwf,EAAe1U,EAAM7N,OAAO4C,OAASyf,EAC3CxU,EAAMsM,cAAcmI,EAAaC,GACjC1U,EAAMuM,UAAU,EAAGoH,GACnBA,GAAYe,EACZ1U,EAAMC,QAAQvL,YAKtB,MAAMigB,EAAej3B,KAAKsX,cAoB1B,OAjBiB,OAAbtX,KAAKwW,MAELxW,KAAKwW,IAAI3F,KAAK,UAAW,OAAO7Q,KAAKyU,OAAO+C,SAASyf,KAErDj3B,KAAKwW,IACA3F,KAAK,QAAS7Q,KAAKyU,OAAO+C,OAC1B3G,KAAK,SAAUomB,IAIpBj3B,KAAKspB,cACLtpB,KAAKymB,iBAAiBvf,WACtBlH,KAAKuiB,QAAQvL,SACbhX,KAAKsW,QAAQU,SACbhX,KAAK+X,OAAOf,UAGThX,KAAK4d,KAAK,kBAUrB,iBAII,MAAMsZ,EAAmB,CAAEhtB,KAAM,EAAGC,MAAO,GAK3C,IAAK,IAAIlD,KAAMjH,KAAKopB,OACZppB,KAAKopB,OAAOniB,GAAIwN,OAAOkS,YAAYoC,WACnCmO,EAAiBhtB,KAAOoE,KAAK8J,IAAI8e,EAAiBhtB,KAAMlK,KAAKopB,OAAOniB,GAAIwN,OAAO2T,OAAOle,MACtFgtB,EAAiB/sB,MAAQmE,KAAK8J,IAAI8e,EAAiB/sB,MAAOnK,KAAKopB,OAAOniB,GAAIwN,OAAO2T,OAAOje,QAMhG,IAAI8rB,EAAW,EA4Bf,OA3BAj2B,KAAKgjB,qBAAqBje,SAAS8nB,IAC/B,MAAMvK,EAAQtiB,KAAKopB,OAAOyD,GAG1B,GAFAvK,EAAMuM,UAAU,EAAGoH,GACnBA,GAAYj2B,KAAKopB,OAAOyD,GAAUpY,OAAO4C,OACrCiL,EAAM7N,OAAOkS,YAAYoC,SAAU,CACnC,MAAMpF,EAAQrV,KAAK8J,IAAI8e,EAAiBhtB,KAAOoY,EAAM7N,OAAO2T,OAAOle,KAAM,GACnEoE,KAAK8J,IAAI8e,EAAiB/sB,MAAQmY,EAAM7N,OAAO2T,OAAOje,MAAO,GACnEmY,EAAM7N,OAAO+C,OAASmM,EACtBrB,EAAM7N,OAAO2T,OAAOle,KAAOgtB,EAAiBhtB,KAC5CoY,EAAM7N,OAAO2T,OAAOje,MAAQ+sB,EAAiB/sB,MAC7CmY,EAAM7N,OAAO6T,SAASzB,OAAOrgB,EAAI0wB,EAAiBhtB,SAM1DlK,KAAK4uB,gBAGL5uB,KAAKgjB,qBAAqBje,SAAS8nB,IAC/B,MAAMvK,EAAQtiB,KAAKopB,OAAOyD,GAC1BvK,EAAMsM,cACF5uB,KAAKyU,OAAO+C,MACZ8K,EAAM7N,OAAO4C,WAIdrX,KASX,aAQI,GALIA,KAAKyU,OAAO0e,mBACZ,SAAUnzB,KAAKwrB,WAAWlT,QAAQ,2BAA2B,GAI7DtY,KAAKyU,OAAO2e,YAAa,CACzB,MAAM+D,EAAkBn3B,KAAKwW,IAAII,OAAO,KACnC/F,KAAK,QAAS,kBACdA,KAAK,KAAM,GAAG7Q,KAAKiH,kBAClBmwB,EAA2BD,EAAgBvgB,OAAO,QACnD/F,KAAK,QAAS,2BACdA,KAAK,KAAM,GACVwmB,EAA6BF,EAAgBvgB,OAAO,QACrD/F,KAAK,QAAS,6BACdA,KAAK,KAAM,GAChB7Q,KAAKozB,YAAc,CACf5c,IAAK2gB,EACLG,SAAUF,EACVG,WAAYF,GAKpBr3B,KAAKsW,QAAUP,EAAgBpW,KAAKK,MACpCA,KAAK+X,OAASH,GAAejY,KAAKK,MAGlCA,KAAKymB,iBAAmB,CACpBtV,OAAQnR,KACRmmB,aAAc,KACdnQ,SAAS,EACT0Q,UAAU,EACVrV,UAAW,GACXmmB,gBAAiB,KACjBrhB,KAAM,WAEF,IAAKnW,KAAKgW,UAAYhW,KAAKmR,OAAOmF,QAAQN,QAAS,CAC/ChW,KAAKgW,SAAU,EAEfhW,KAAKmR,OAAO6R,qBAAqBje,SAAQ,CAAC8nB,EAAU4K,KAChD,MAAMjlB,EAAW,SAAUxS,KAAKmR,OAAOqF,IAAIC,OAAOC,YAAYC,OAAO,MAAO,0BACvE9F,KAAK,QAAS,qBACdA,KAAK,QAAS,gBACnB2B,EAASoE,OAAO,QAChB,MAAM8gB,EAAoB,SAC1BA,EAAkB5gB,GAAG,SAAS,KAC1B9W,KAAK0mB,UAAW,KAEpBgR,EAAkB5gB,GAAG,OAAO,KACxB9W,KAAK0mB,UAAW,KAEpBgR,EAAkB5gB,GAAG,QAAQ,KAEzB,MAAM6gB,EAAa33B,KAAKmR,OAAOiY,OAAOppB,KAAKmR,OAAO6R,qBAAqByU,IACjEG,EAAwBD,EAAWljB,OAAO4C,OAChDsgB,EAAW/I,cAAc5uB,KAAKmR,OAAOsD,OAAO+C,MAAOmgB,EAAWljB,OAAO4C,OAAS,YAC9E,MAAMwgB,EAAsBF,EAAWljB,OAAO4C,OAASugB,EAIvD53B,KAAKmR,OAAO6R,qBAAqBje,SAAQ,CAAC+yB,EAAeC,KACrD,MAAMC,EAAah4B,KAAKmR,OAAOiY,OAAOppB,KAAKmR,OAAO6R,qBAAqB+U,IACnEA,EAAiBN,IACjBO,EAAWnJ,UAAUmJ,EAAWvjB,OAAOoS,OAAOrgB,EAAGwxB,EAAWvjB,OAAOoS,OAAO9T,EAAI8kB,GAC9EG,EAAWzV,QAAQrb,eAI3BlH,KAAKmR,OAAO8e,iBACZjwB,KAAKkH,cAETsL,EAAS7S,KAAK+3B,GACd13B,KAAKmR,OAAOsV,iBAAiBpV,UAAU9M,KAAKiO,MAGhD,MAAMglB,EAAkB,SAAUx3B,KAAKmR,OAAOqF,IAAIC,OAAOC,YACpDC,OAAO,MAAO,0BACd9F,KAAK,QAAS,4BACdA,KAAK,QAAS,eAEnB2mB,EACK5gB,OAAO,QACP/F,KAAK,QAAS,kCACnB2mB,EACK5gB,OAAO,QACP/F,KAAK,QAAS,kCAEnB,MAAMonB,EAAc,SACpBA,EAAYnhB,GAAG,SAAS,KACpB9W,KAAK0mB,UAAW,KAEpBuR,EAAYnhB,GAAG,OAAO,KAClB9W,KAAK0mB,UAAW,KAEpBuR,EAAYnhB,GAAG,QAAQ,KACnB9W,KAAKmR,OAAOyd,cAAc5uB,KAAKmR,OAAOsD,OAAO+C,MAAQ,WAAaxX,KAAKmR,OAAOmG,cAAgB,eAElGkgB,EAAgB73B,KAAKs4B,GACrBj4B,KAAKmR,OAAOsV,iBAAiB+Q,gBAAkBA,EAEnD,OAAOx3B,KAAKkH,YAEhBA,SAAU,WACN,IAAKlH,KAAKgW,QACN,OAAOhW,KAGX,MAAMk4B,EAAmBl4B,KAAKmR,OAAOiG,iBACrCpX,KAAKqR,UAAUtM,SAAQ,CAACyN,EAAUilB,KAC9B,MAAMnV,EAAQtiB,KAAKmR,OAAOiY,OAAOppB,KAAKmR,OAAO6R,qBAAqByU,IAC5DU,EAAoB7V,EAAMlL,iBAC1BlN,EAAOguB,EAAiB1xB,EACxBqU,EAAMsd,EAAkBplB,EAAIuP,EAAM7N,OAAO4C,OAAS,GAClDG,EAAQxX,KAAKmR,OAAOsD,OAAO+C,MAAQ,EACzChF,EACK+E,MAAM,MAAO,GAAGsD,OAChBtD,MAAM,OAAQ,GAAGrN,OACjBqN,MAAM,QAAS,GAAGC,OACvBhF,EAASud,OAAO,QACXxY,MAAM,QAAS,GAAGC,UAQ3B,OAHAxX,KAAKw3B,gBACAjgB,MAAM,MAAU2gB,EAAiBnlB,EAAI/S,KAAKmR,OAAOmG,cAH/B,GACH,GAEF,MACbC,MAAM,OAAW2gB,EAAiB1xB,EAAIxG,KAAKmR,OAAOsD,OAAO+C,MAJvC,GACH,GAGD,MACZxX,MAEX+W,KAAM,WACF,OAAK/W,KAAKgW,SAGVhW,KAAKgW,SAAU,EAEfhW,KAAKqR,UAAUtM,SAASyN,IACpBA,EAASmF,YAEb3X,KAAKqR,UAAY,GAEjBrR,KAAKw3B,gBAAgB7f,SACrB3X,KAAKw3B,gBAAkB,KAChBx3B,MAXIA,OAgBfA,KAAKyU,OAAOgS,kBACZ,SAAUzmB,KAAKwW,IAAIC,OAAOC,YACrBI,GAAG,aAAa9W,KAAKiH,uBAAuB,KACzCgQ,aAAajX,KAAKymB,iBAAiBN,cACnCnmB,KAAKymB,iBAAiBtQ,UAEzBW,GAAG,YAAY9W,KAAKiH,uBAAuB,KACxCjH,KAAKymB,iBAAiBN,aAAezO,YAAW,KAC5C1X,KAAKymB,iBAAiB1P,SACvB,QAKf/W,KAAKuiB,QAAU,IAAI0D,GAAQjmB,MAAMmW,OAGjC,IAAK,IAAIlP,KAAMjH,KAAKopB,OAChBppB,KAAKopB,OAAOniB,GAAIgS,aAIpB,MAAMhJ,EAAY,IAAIjQ,KAAKiH,KAC3B,GAAIjH,KAAKyU,OAAO2e,YAAa,CACzB,MAAMgF,EAAuB,KACzBp4B,KAAKozB,YAAYkE,SAASzmB,KAAK,KAAM,GACrC7Q,KAAKozB,YAAYmE,WAAW1mB,KAAK,KAAM,IAErCwnB,EAAwB,KAC1B,MAAM/J,EAAS,QAAStuB,KAAKwW,IAAIC,QACjCzW,KAAKozB,YAAYkE,SAASzmB,KAAK,IAAKyd,EAAO,IAC3CtuB,KAAKozB,YAAYmE,WAAW1mB,KAAK,IAAKyd,EAAO,KAEjDtuB,KAAKwW,IACAM,GAAG,WAAW7G,gBAAyBmoB,GACvCthB,GAAG,aAAa7G,gBAAyBmoB,GACzCthB,GAAG,YAAY7G,gBAAyBooB,GAEjD,MAAMC,EAAU,KACZt4B,KAAKu4B,YAEHC,EAAY,KACd,GAAIx4B,KAAK2mB,YAAYD,SAAU,CAC3B,MAAM4H,EAAS,QAAStuB,KAAKwW,IAAIC,QAC7B,SACA,yBAEJzW,KAAK2mB,YAAYD,SAASmH,UAAYS,EAAO,GAAKtuB,KAAK2mB,YAAYD,SAASoH,QAC5E9tB,KAAK2mB,YAAYD,SAASsH,UAAYM,EAAO,GAAKtuB,KAAK2mB,YAAYD,SAASuH,QAC5EjuB,KAAKopB,OAAOppB,KAAK2mB,YAAYkG,UAAUxO,SACvCre,KAAK2mB,YAAYmG,iBAAiB/nB,SAAS8nB,IACvC7sB,KAAKopB,OAAOyD,GAAUxO,cAIlCre,KAAKwW,IACAM,GAAG,UAAU7G,IAAaqoB,GAC1BxhB,GAAG,WAAW7G,IAAaqoB,GAC3BxhB,GAAG,YAAY7G,IAAauoB,GAC5B1hB,GAAG,YAAY7G,IAAauoB,GAIjC,MACMC,EADgB,SAAU,QACAhiB,OAC5BgiB,IACAA,EAAU/B,iBAAiB,UAAW4B,GACtCG,EAAU/B,iBAAiB,WAAY4B,GAEvCt4B,KAAK22B,sBAAsB8B,EAAW,UAAWH,GACjDt4B,KAAK22B,sBAAsB8B,EAAW,WAAYH,IAGtDt4B,KAAK8W,GAAG,mBAAoB4T,IAGxB,MAAM5mB,EAAO4mB,EAAU5mB,KACjB40B,EAAW50B,EAAK60B,OAAS70B,EAAKhE,MAAQ,KACtC84B,EAAalO,EAAUI,OAAO7jB,GAKpC9H,OAAO8S,OAAOjS,KAAKopB,QAAQrkB,SAASud,IAC5BA,EAAMrb,KAAO2xB,GACbz5B,OAAO8S,OAAOqQ,EAAM7F,aAAa1X,SAASovB,GAAUA,EAAM5I,oBAAmB,QAIrFvrB,KAAKojB,WAAW,CAAEyV,eAAgBH,OAGtC14B,KAAKspB,aAAc,EAInB,MAAMwP,EAAc94B,KAAKwW,IAAIC,OAAOyB,wBAC9BV,EAAQshB,EAAYthB,MAAQshB,EAAYthB,MAAQxX,KAAKyU,OAAO+C,MAC5DH,EAASyhB,EAAYzhB,OAASyhB,EAAYzhB,OAASrX,KAAKsX,cAG9D,OAFAtX,KAAK4uB,cAAcpX,EAAOH,GAEnBrX,KAUX,UAAUsiB,EAAO5Y,GACb4Y,EAAQA,GAAS,KAGjB,IAAI2I,EAAO,KACX,OAHAvhB,EAASA,GAAU,MAInB,IAAK,aACL,IAAK,SACDuhB,EAAO,IACP,MACJ,IAAK,UACDA,EAAO,KACP,MACJ,IAAK,UACDA,EAAO,KAIX,KAAM3I,aAAiB6G,IAAW8B,GAASjrB,KAAKquB,gBAC5C,OAAOruB,KAAKu4B,WAGhB,MAAMjK,EAAS,QAAStuB,KAAKwW,IAAIC,QAgBjC,OAfAzW,KAAK2mB,YAAc,CACfkG,SAAUvK,EAAMrb,GAChB6lB,iBAAkBxK,EAAMiM,kBAAkBtD,GAC1CvE,SAAU,CACNhd,OAAQA,EACRokB,QAASQ,EAAO,GAChBL,QAASK,EAAO,GAChBT,UAAW,EACXG,UAAW,EACX/C,KAAMA,IAIdjrB,KAAKwW,IAAIe,MAAM,SAAU,cAElBvX,KASX,WAEI,IAAKA,KAAK2mB,YAAYD,SAClB,OAAO1mB,KAGX,GAAqD,iBAA1CA,KAAKopB,OAAOppB,KAAK2mB,YAAYkG,UAEpC,OADA7sB,KAAK2mB,YAAc,GACZ3mB,KAEX,MAAMsiB,EAAQtiB,KAAKopB,OAAOppB,KAAK2mB,YAAYkG,UAKrCkM,EAAqB,CAAC9N,EAAM+N,EAAazI,KAC3CjO,EAAMgF,0BAA0BviB,SAASkC,IACrC,MAAMgyB,EAAc3W,EAAM7F,YAAYxV,GAAIwN,OAAO,GAAGwW,UAChDgO,EAAYhO,OAAS+N,IACrBC,EAAYhqB,MAAQshB,EAAO,GAC3B0I,EAAYC,QAAU3I,EAAO,UACtB0I,EAAYE,oBACZF,EAAYG,oBACZH,EAAYI,kBACZJ,EAAYzI,WAK/B,OAAQxwB,KAAK2mB,YAAYD,SAAShd,QAClC,IAAK,aACL,IAAK,SAC2C,IAAxC1J,KAAK2mB,YAAYD,SAASmH,YAC1BkL,EAAmB,IAAK,EAAGzW,EAAMuH,UACjC7pB,KAAKojB,WAAW,CAAEtgB,MAAOwf,EAAMuH,SAAS,GAAI9mB,IAAKuf,EAAMuH,SAAS,MAEpE,MACJ,IAAK,UACL,IAAK,UACD,GAA4C,IAAxC7pB,KAAK2mB,YAAYD,SAASsH,UAAiB,CAC3C,MAAMsL,EAAgBtI,SAAShxB,KAAK2mB,YAAYD,SAAShd,OAAO,IAChEqvB,EAAmB,IAAKO,EAAehX,EAAM,IAAIgX,cAQzD,OAHAt5B,KAAK2mB,YAAc,GACnB3mB,KAAKwW,IAAIe,MAAM,SAAU,MAElBvX,KAIX,oBAEI,OAAOA,KAAKyU,OAAO2U,OAAOnd,QAAO,CAACC,EAAK5L,IAASA,EAAK+W,OAASnL,GAAK,IDt3C3E,SAASmQ,GAAoBnT,EAAKyF,EAAK4qB,GACnC,MAAMC,EAAc,CAAEC,EAAG,GAAIC,EAAG,IAAKC,EAAG,IAAKC,EAAG,KAEhD,GADAL,EAASA,IAAU,EACflrB,MAAMM,IAAgB,OAARA,EAAc,CAC5B,MAAMJ,EAAMD,KAAKC,IAAIrF,GAAOoF,KAAKE,KACjCG,EAAML,KAAK6J,IAAI7J,KAAK8J,IAAI7J,EAAOA,EAAM,EAAI,GAAI,GAEjD,MAAMsrB,EAAalrB,EAAML,KAAKW,OAAOX,KAAKC,IAAIrF,GAAOoF,KAAKE,MAAMzB,QAAQ4B,EAAM,IACxEmrB,EAAUxrB,KAAK6J,IAAI7J,KAAK8J,IAAIzJ,EAAK,GAAI,GACrCorB,EAASzrB,KAAK6J,IAAI7J,KAAK8J,IAAIyhB,EAAYC,GAAU,IACvD,IAAIhkB,EAAM,IAAI5M,EAAMoF,KAAKQ,IAAI,GAAIH,IAAM5B,QAAQgtB,KAI/C,OAHIR,QAAsC,IAArBC,EAAY7qB,KAC7BmH,GAAO,IAAI0jB,EAAY7qB,OAEpBmH,EAQX,SAASkkB,GAAoBpoB,GACzB,IAAI9M,EAAM8M,EAAE2C,cACZzP,EAAMA,EAAIwH,QAAQ,KAAM,IACxB,MAAM2tB,EAAW,eACXV,EAASU,EAASlqB,KAAKjL,GAC7B,IAAIo1B,EAAO,EAYX,OAXIX,IAEIW,EADc,MAAdX,EAAO,GACA,IACc,MAAdA,EAAO,GACP,IAEA,IAEXz0B,EAAMA,EAAIwH,QAAQ2tB,EAAU,KAEhCn1B,EAAMgZ,OAAOhZ,GAAOo1B,EACbp1B,EA6FX,SAASytB,GAAY1b,EAAM/S,EAAMwM,GAC7B,GAAmB,iBAARxM,EACP,MAAM,IAAIzD,MAAM,4CAEpB,GAAmB,iBAARwW,EACP,MAAM,IAAIxW,MAAM,2CAIpB,MAAM85B,EAAS,GACTxyB,EAAQ,kDACd,KAAOkP,EAAKxV,OAAS,GAAG,CACpB,MAAMuG,EAAID,EAAMoI,KAAK8G,GAChBjP,EAGkB,IAAZA,EAAE4V,OACT2c,EAAO51B,KAAK,CAACjB,KAAMuT,EAAKrF,MAAM,EAAG5J,EAAE4V,SACnC3G,EAAOA,EAAKrF,MAAM5J,EAAE4V,QACJ,SAAT5V,EAAE,IACTuyB,EAAO51B,KAAK,CAAC61B,UAAWxyB,EAAE,KAC1BiP,EAAOA,EAAKrF,MAAM5J,EAAE,GAAGvG,SAChBuG,EAAE,IACTuyB,EAAO51B,KAAK,CAAC81B,SAAUzyB,EAAE,KACzBiP,EAAOA,EAAKrF,MAAM5J,EAAE,GAAGvG,SACP,UAATuG,EAAE,IACTuyB,EAAO51B,KAAK,CAAC+1B,OAAQ,SACrBzjB,EAAOA,EAAKrF,MAAM5J,EAAE,GAAGvG,SACP,QAATuG,EAAE,IACTuyB,EAAO51B,KAAK,CAACg2B,MAAO,OACpB1jB,EAAOA,EAAKrF,MAAM5J,EAAE,GAAGvG,UAEvBH,QAAQslB,MAAM,uDAAuDnhB,KAAKkH,UAAUsK,8BAAiCxR,KAAKkH,UAAU4tB,iCAAsC90B,KAAKkH,UAAU,CAAC3E,EAAE,GAAIA,EAAE,GAAIA,EAAE,QACxMiP,EAAOA,EAAKrF,MAAM5J,EAAE,GAAGvG,UAnBvB84B,EAAO51B,KAAK,CAACjB,KAAMuT,IACnBA,EAAO,IAqBf,MAAM2jB,EAAS,WACX,MAAMC,EAAQN,EAAOO,QACrB,QAA0B,IAAfD,EAAMn3B,MAAwBm3B,EAAMJ,SAC3C,OAAOI,EACJ,GAAIA,EAAML,UAAW,CACxB,IAAIO,EAAOF,EAAMv3B,KAAO,GAGxB,IAFAu3B,EAAMG,KAAO,GAENT,EAAO94B,OAAS,GAAG,CACtB,GAAwB,OAApB84B,EAAO,GAAGI,MAAgB,CAC1BJ,EAAOO,QACP,MAEqB,SAArBP,EAAO,GAAGG,SACVH,EAAOO,QACPC,EAAOF,EAAMG,MAEjBD,EAAKp2B,KAAKi2B,KAEd,OAAOC,EAGP,OADAv5B,QAAQslB,MAAM,iDAAiDnhB,KAAKkH,UAAUkuB,MACvE,CAAEn3B,KAAM,KAKjBu3B,EAAM,GACZ,KAAOV,EAAO94B,OAAS,GACnBw5B,EAAIt2B,KAAKi2B,KAGb,MAAM72B,EAAU,SAAU02B,GAItB,OAHKl7B,OAAOM,UAAUC,eAAeC,KAAKgE,EAAQm3B,MAAOT,KACrD12B,EAAQm3B,MAAMT,GAAY,IAAKzqB,EAAMyqB,GAAW12B,QAAQG,EAAMwM,IAE3D3M,EAAQm3B,MAAMT,IAEzB12B,EAAQm3B,MAAQ,GAChB,MAAMC,EAAc,SAAUtkB,GAC1B,QAAyB,IAAdA,EAAKnT,KACZ,OAAOmT,EAAKnT,KACT,GAAImT,EAAK4jB,SAAU,CACtB,IACI,MAAMv6B,EAAQ6D,EAAQ8S,EAAK4jB,UAC3B,IAA+D,IAA3D,CAAC,SAAU,SAAU,WAAW7uB,eAAe1L,GAC/C,OAAOA,EAEX,GAAc,OAAVA,EACA,MAAO,GAEb,MAAO0mB,GACLtlB,QAAQslB,MAAM,mCAAmCnhB,KAAKkH,UAAUkK,EAAK4jB,aAEzE,MAAO,KAAK5jB,EAAK4jB,aACd,GAAI5jB,EAAK2jB,UAAW,CACvB,IAEI,GADkBz2B,EAAQ8S,EAAK2jB,WAE3B,OAAO3jB,EAAKvT,KAAK0B,IAAIm2B,GAAah0B,KAAK,IACpC,GAAI0P,EAAKmkB,KACZ,OAAOnkB,EAAKmkB,KAAKh2B,IAAIm2B,GAAah0B,KAAK,IAE7C,MAAOyf,GACLtlB,QAAQslB,MAAM,oCAAoCnhB,KAAKkH,UAAUkK,EAAK4jB,aAE1E,MAAO,GAEPn5B,QAAQslB,MAAM,mDAAmDnhB,KAAKkH,UAAUkK,OAGxF,OAAOokB,EAAIj2B,IAAIm2B,GAAah0B,KAAK,IEzOrC,MAAM,GAAW,IAAIhH,EAYrB,GAAS0B,IAAI,KAAK,CAACu5B,EAAYC,IAAiBD,IAAeC,IAU/D,GAASx5B,IAAI,MAAM,CAACmF,EAAGC,IAAMD,GAAKC,IASlC,GAASpF,IAAI,KAAK,CAACmF,EAAGC,IAAMD,EAAIC,IAShC,GAASpF,IAAI,MAAM,CAACmF,EAAGC,IAAMD,GAAKC,IASlC,GAASpF,IAAI,KAAK,CAACmF,EAAGC,IAAMD,EAAIC,IAShC,GAASpF,IAAI,MAAM,CAACmF,EAAGC,IAAMD,GAAKC,IASlC,GAASpF,IAAI,KAAK,CAACmF,EAAGC,IAAMD,EAAIC,IAYhC,GAASpF,IAAI,MAAM,CAACmF,EAAGC,IAAMA,GAAKA,EAAE/E,SAAS8E,KAS7C,GAASnF,IAAI,SAAS,CAACmF,EAAGC,IAAMD,GAAKA,EAAE9E,SAAS+E,KAGhD,YC/FMq0B,GAAW,CAACC,EAAYC,SACN,IAATA,GAAwBD,EAAWE,cAAgBD,OAC5B,IAAnBD,EAAWP,KACXO,EAAWP,KAEX,KAGJO,EAAWj4B,KAmBpBo4B,GAAgB,CAACH,EAAYC,KAC/B,MAAMG,EAASJ,EAAWI,QAAU,GAC9BtpB,EAASkpB,EAAWlpB,QAAU,GACpC,GAAI,MAAOmpB,GAA0C/sB,OAAO+sB,GACxD,OAAQD,EAAWK,WAAaL,EAAWK,WAAa,KAE5D,MAAMC,EAAYF,EAAOtvB,QAAO,SAAUyvB,EAAMC,GAC5C,OAAKP,EAAQM,IAAUN,GAASM,IAASN,EAAQO,EACtCD,EAEAC,KAGf,OAAO1pB,EAAOspB,EAAO/vB,QAAQiwB,KAgB3BG,GAAkB,CAACT,EAAYr7B,SACb,IAATA,GAAyBq7B,EAAWU,WAAW/5B,SAAShC,GAGxDq7B,EAAWlpB,OAAOkpB,EAAWU,WAAWrwB,QAAQ1L,IAF/Cq7B,EAAWK,WAAaL,EAAWK,WAAa,KAiB1DM,GAAgB,CAACX,EAAYr7B,EAAO0d,KACtC,MAAMiI,EAAU0V,EAAWlpB,OAC3B,OAAOwT,EAAQjI,EAAQiI,EAAQpkB,SAyBnC,IAAI06B,GAAgB,CAACZ,EAAYr7B,EAAO0d,KAGpC,MAAMsd,EAAQK,EAAWa,OAASb,EAAWa,QAAU,IAAI97B,IACrD+7B,EAAiBd,EAAWc,gBAAkB,IAMpD,GAJInB,EAAMhoB,MAAQmpB,GAEdnB,EAAMoB,QAENpB,EAAM16B,IAAIN,GACV,OAAOg7B,EAAMx7B,IAAIQ,GAKrB,IAAIq8B,EAAO,EACXr8B,EAAQs8B,OAAOt8B,GACf,IAAK,IAAIsE,EAAI,EAAGA,EAAItE,EAAMuB,OAAQ+C,IAAK,CAEnC+3B,GAAUA,GAAQ,GAAKA,EADbr8B,EAAMu8B,WAAWj4B,GAE3B+3B,GAAQ,EAGZ,MAAM1W,EAAU0V,EAAWlpB,OACrBsL,EAASkI,EAAQnX,KAAKU,IAAImtB,GAAQ1W,EAAQpkB,QAEhD,OADAy5B,EAAMt6B,IAAIV,EAAOyd,GACVA,GAkBX,MAAM+e,GAAc,CAACnB,EAAYC,KAC7B,IAAIG,EAASJ,EAAWI,QAAU,GAC9BtpB,EAASkpB,EAAWlpB,QAAU,GAC9BsqB,EAAWpB,EAAWK,WAAaL,EAAWK,WAAa,KAC/D,GAAID,EAAOl6B,OAAS,GAAKk6B,EAAOl6B,SAAW4Q,EAAO5Q,OAC9C,OAAOk7B,EAEX,GAAI,MAAOnB,GAA0C/sB,OAAO+sB,GACxD,OAAOmB,EAEX,IAAKnB,GAASD,EAAWI,OAAO,GAC5B,OAAOtpB,EAAO,GACX,IAAKmpB,GAASD,EAAWI,OAAOJ,EAAWI,OAAOl6B,OAAS,GAC9D,OAAO4Q,EAAOspB,EAAOl6B,OAAS,GAC3B,CACH,IAAIm7B,EAAY,KAShB,GARAjB,EAAOx2B,SAAQ,SAAU03B,EAAKpR,GACrBA,GAGDkQ,EAAOlQ,EAAM,KAAO+P,GAASG,EAAOlQ,KAAS+P,IAC7CoB,EAAYnR,MAGF,OAAdmR,EACA,OAAOD,EAEX,MAAMG,IAAqBtB,EAAQG,EAAOiB,EAAY,KAAOjB,EAAOiB,GAAajB,EAAOiB,EAAY,IACpG,OAAKG,SAASD,GAGP,cAAezqB,EAAOuqB,EAAY,GAAIvqB,EAAOuqB,GAA7C,CAAyDE,GAFrDH,IC1Lb,GAAW,IAAIx8B,EACrB,IAAK,IAAKI,EAAM2N,KAAS3O,OAAO4O,QAAQ,GACpC,GAAStM,IAAItB,EAAM2N,GAIvB,GAASrM,IAAI,KAAM,IAGnB,YC6DM,GAAiB,CACnBwF,GAAI,GACJ6G,KAAM,GACN2L,IAAK,mBACL/W,OAAQ,GACR6D,SAAU,KACV+W,QAAS,KACTxV,MAAO,GACPynB,OAAQ,GACRvE,OAAQ,GACR/G,OAAQ,KACR2Y,QAAS,GACTC,oBAAqB,aACrBC,UAAW,IAOf,MAAMC,GA8DF,YAAYtoB,EAAQtD,GAKhBnR,KAAKspB,aAAc,EAKnBtpB,KAAKupB,WAAa,KAOlBvpB,KAAKiH,GAAS,KAOdjH,KAAKg9B,SAAW,KAMhBh9B,KAAKmR,OAASA,GAAU,KAKxBnR,KAAKwW,IAAS,GAMdxW,KAAKuW,YAAc,KACfpF,IACAnR,KAAKuW,YAAcpF,EAAOA,QAW9BnR,KAAKyU,OAASf,EAAMe,GAAU,GAAI,IAC9BzU,KAAKyU,OAAOxN,KACZjH,KAAKiH,GAAKjH,KAAKyU,OAAOxN,IAS1BjH,KAAKi9B,aAAe,KAGhBj9B,KAAKyU,OAAO8a,SAAW,IAAyC,iBAA5BvvB,KAAKyU,OAAO8a,OAAOtE,OAEvDjrB,KAAKyU,OAAO8a,OAAOtE,KAAO,GAE1BjrB,KAAKyU,OAAOuW,SAAW,IAAyC,iBAA5BhrB,KAAKyU,OAAOuW,OAAOC,OACvDjrB,KAAKyU,OAAOuW,OAAOC,KAAO,GAW9BjrB,KAAKwzB,aAAetf,EAASlU,KAAKyU,QAMlCzU,KAAKwC,MAAQ,GAKbxC,KAAKwpB,SAAW,KAMhBxpB,KAAKo0B,YAAc,KAEnBp0B,KAAKq0B,mBAULr0B,KAAK8D,KAAO,GACR9D,KAAKyU,OAAOmoB,UAKZ58B,KAAKk9B,SAAW,IAIpBl9B,KAAKm9B,gBAAkB,CACnB,aAAe,EACf,UAAY,EACZ,OAAS,EACT,QAAU,GASlB,SACI,MAAM,IAAI98B,MAAM,8BAQpB,cAMI,OALIL,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,QAAU,KAC5DnrB,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,SAAWnrB,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,QAAU,GACzHnrB,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,QAAU,GAAKnrB,KAAKiH,GACtEjH,KAAKmR,OAAOisB,oBAETp9B,KAQX,WAMI,OALIA,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,QAAU,KAC5DnrB,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,SAAWnrB,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,QAAU,GACzHnrB,KAAKmR,OAAOmW,0BAA0BtnB,KAAKyU,OAAO0W,QAAU,GAAKnrB,KAAKiH,GACtEjH,KAAKmR,OAAOisB,oBAETp9B,KAgBX,qBAAsBoT,EAASnU,EAAKa,GAChC,MAAMmH,EAAKjH,KAAKq9B,aAAajqB,GAK7B,OAJKpT,KAAKo0B,YAAYkJ,aAAar2B,KAC/BjH,KAAKo0B,YAAYkJ,aAAar2B,GAAM,IAExCjH,KAAKo0B,YAAYkJ,aAAar2B,GAAIhI,GAAOa,EAClCE,KASX,UAAU0P,GACNxO,QAAQC,KAAK,yIACbnB,KAAKi9B,aAAevtB,EAcxB,eAAgB5L,EAAMy5B,GAGlB,OAFAz5B,EAAOA,GAAQ9D,KAAK8D,KAEb,SAAUA,GAAO4N,IACV,IAAI9B,EAAM2tB,EAAY1tB,OACtBlM,QAAQ+N,KAW1B,aAAc0B,GAEV,MAAMoqB,EAAS59B,OAAO69B,IAAI,QAC1B,GAAIrqB,EAAQoqB,GACR,OAAOpqB,EAAQoqB,GAGnB,MAAMj3B,EAAWvG,KAAKyU,OAAOlO,UAAY,KACzC,QAAgC,IAArB6M,EAAQ7M,GACf,MAAM,IAAIlG,MAAM,iCAEpB,MAAMq9B,EAAatqB,EAAQ7M,GAAUsG,WAAWP,QAAQ,MAAO,IAGzDrN,EAAM,GAAIe,KAAKga,eAAe0jB,IAAcpxB,QAAQ,cAAe,KAEzE,OADA8G,EAAQoqB,GAAUv+B,EACXA,EAaX,uBAAwBmU,GACpB,OAAO,KAYX,eAAenM,GACX,MAAMuL,EAAW,SAAU,IAAIvL,EAAGqF,QAAQ,cAAe,WACzD,OAAKkG,EAASmrB,SAAWnrB,EAAS1O,QAAU0O,EAAS1O,OAAOzC,OACjDmR,EAAS1O,OAAO,GAEhB,KAcf,mBACI,MAAM85B,EAAkB59B,KAAKyU,OAAO3M,OAAS9H,KAAKyU,OAAO3M,MAAM+1B,QACzDC,EAAiB,OAAa99B,KAAKyU,OAAO3M,OAAS9H,KAAKyU,OAAO3M,MAAMmV,UAAY,KACjF8gB,EAAkB/9B,KAAKuW,YAAY/T,MAAMq2B,eAEzCmF,EAAiBJ,EAAiB,IAAIhuB,EAAMguB,GAAkB,KAiCpE,OAhCA59B,KAAK8D,KAAKiB,SAAQ,CAACzE,EAAM8D,KAKjBw5B,SAAkBG,IAClBz9B,EAAK29B,YAAeH,EAAeE,EAAer6B,QAAQrD,GAAOy9B,IAGrEz9B,EAAK49B,OAAS,KACV,MAAM33B,EAAWvG,KAAKyU,OAAOlO,UAAY,KACzC,IAAIsQ,EAAO,GAIX,OAHIvW,EAAKiG,KACLsQ,EAAOvW,EAAKiG,GAAUsG,YAEnBgK,GAGXvW,EAAK69B,aAAe,IAAMn+B,KAC1BM,EAAK89B,SAAW,IAAMp+B,KAAKmR,QAAU,KACrC7Q,EAAK+9B,QAAU,KAEX,MAAM/b,EAAQtiB,KAAKmR,OACnB,OAAOmR,EAAQA,EAAMnR,OAAS,MAGlC7Q,EAAKg+B,SAAW,KACOt+B,KAAKm+B,eACbI,gBAAgBv+B,UAGnCA,KAAKw+B,yBACEx+B,KASX,yBACI,OAAOA,KAiBX,yBAA0By+B,EAAeC,EAAcC,GACnD,IAAI7oB,EAAM,KACV,GAAIpV,MAAMqD,QAAQ06B,GAAgB,CAC9B,IAAIpT,EAAM,EACV,KAAe,OAARvV,GAAgBuV,EAAMoT,EAAcp9B,QACvCyU,EAAM9V,KAAK4+B,yBAAyBH,EAAcpT,GAAMqT,EAAcC,GACtEtT,SAGJ,cAAeoT,GACf,IAAK,SACL,IAAK,SACD3oB,EAAM2oB,EACN,MACJ,IAAK,SACD,GAAIA,EAAcI,eAAgB,CAC9B,MAAMnvB,EAAO,OAAa+uB,EAAcI,gBACxC,GAAIJ,EAAc5uB,MAAO,CACrB,MAAMivB,EAAI,IAAIlvB,EAAM6uB,EAAc5uB,OAClC,IAAIS,EACJ,IACIA,EAAQtQ,KAAK++B,qBAAqBL,GACpC,MAAO3tB,GACLT,EAAQ,KAEZwF,EAAMpG,EAAK+uB,EAActD,YAAc,GAAI2D,EAAEn7B,QAAQ+6B,EAAcpuB,GAAQquB,QAE3E7oB,EAAMpG,EAAK+uB,EAActD,YAAc,GAAIuD,EAAcC,IAMzE,OAAO7oB,EASX,cAAekpB,GAEX,IAAK,CAAC,IAAK,KAAKl9B,SAASk9B,GACrB,MAAM,IAAI3+B,MAAM,gCAGpB,MAAM4+B,EAAY,GAAGD,SACf/F,EAAcj5B,KAAKyU,OAAOwqB,GAGhC,IAAK5wB,MAAM4qB,EAAYhqB,SAAWZ,MAAM4qB,EAAYC,SAChD,MAAO,EAAED,EAAYhqB,OAAQgqB,EAAYC,SAI7C,IAAIgG,EAAc,GAClB,GAAIjG,EAAYppB,OAAS7P,KAAK8D,KAAM,CAChC,GAAK9D,KAAK8D,KAAKzC,OAKR,CACH69B,EAAcl/B,KAAKm/B,eAAen/B,KAAK8D,KAAMm1B,GAG7C,MAAMmG,EAAuBF,EAAY,GAAKA,EAAY,GAQ1D,GAPK7wB,MAAM4qB,EAAYE,gBACnB+F,EAAY,IAAME,EAAuBnG,EAAYE,cAEpD9qB,MAAM4qB,EAAYG,gBACnB8F,EAAY,IAAME,EAAuBnG,EAAYG,cAGpB,iBAA1BH,EAAYI,WAAwB,CAE3C,MAAMgG,EAAYpG,EAAYI,WAAW,GACnCiG,EAAYrG,EAAYI,WAAW,GACpChrB,MAAMgxB,IAAehxB,MAAMixB,KAC5BJ,EAAY,GAAK5wB,KAAK6J,IAAI+mB,EAAY,GAAIG,IAEzChxB,MAAMixB,KACPJ,EAAY,GAAK5wB,KAAK8J,IAAI8mB,EAAY,GAAII,IAIlD,MAAO,CACHjxB,MAAM4qB,EAAYhqB,OAASiwB,EAAY,GAAKjG,EAAYhqB,MACxDZ,MAAM4qB,EAAYC,SAAWgG,EAAY,GAAKjG,EAAYC,SA3B9D,OADAgG,EAAcjG,EAAYI,YAAc,GACjC6F,EAkCf,MAAkB,MAAdF,GAAsB3wB,MAAMrO,KAAKwC,MAAMM,QAAWuL,MAAMrO,KAAKwC,MAAMO,KAKhE,GAJI,CAAC/C,KAAKwC,MAAMM,MAAO9C,KAAKwC,MAAMO,KA0B7C,SAAUi8B,EAAWh9B,GACjB,IAAK,CAAC,IAAK,KAAM,MAAMF,SAASk9B,GAC5B,MAAM,IAAI3+B,MAAM,gCAAgC2+B,KAEpD,MAAO,GAcX,oBAAoBpC,GAChB,MAAMta,EAAQtiB,KAAKmR,OAEbouB,EAAUjd,EAAM,IAAItiB,KAAKyU,OAAOuW,OAAOC,cACvCuU,EAAWld,EAAM,IAAItiB,KAAKyU,OAAOuW,OAAOC,eAExCzkB,EAAI8b,EAAMoH,QAAQpH,EAAMuH,SAAS,IACjC9W,EAAIwsB,EAAQC,EAAS,IAE3B,MAAO,CAAEC,MAAOj5B,EAAGk5B,MAAOl5B,EAAGm5B,MAAO5sB,EAAG6sB,MAAO7sB,GAmBlD,aAAa6pB,EAAS11B,EAAUu4B,EAAOC,EAAOC,EAAOC,GACjD,MAAM9L,EAAe9zB,KAAKmR,OAAOsD,OAC3BorB,EAAc7/B,KAAKuW,YAAY9B,OAC/BqrB,EAAe9/B,KAAKyU,OASpB0C,EAAcnX,KAAKoX,iBACnB2oB,EAAcnD,EAAQpqB,SAASiE,OAAOyB,wBACtC8nB,EAAoBlM,EAAazc,QAAUyc,EAAa1L,OAAOvN,IAAMiZ,EAAa1L,OAAOtN,QACzFmlB,EAAmBJ,EAAYroB,OAASsc,EAAa1L,OAAOle,KAAO4pB,EAAa1L,OAAOje,OAQvF+1B,IALNT,EAAQnxB,KAAK8J,IAAIqnB,EAAO,KACxBC,EAAQpxB,KAAK6J,IAAIunB,EAAOO,KAIW,EAC7BE,IAJNR,EAAQrxB,KAAK8J,IAAIunB,EAAO,KACxBC,EAAQtxB,KAAK6J,IAAIynB,EAAOI,KAGW,EAEnC,IAMII,EAAaC,EAAcC,EAAYC,EAAWC,EANlDzK,EAAW2J,EAAQQ,EACnBjK,EAAW2J,EAAQO,EACnBM,EAAYX,EAAajD,oBAyB7B,GAlBkB,aAAd4D,GAEA1K,EAAW,EAEP0K,EADAV,EAAY1oB,OA9BAqpB,EA8BuBV,GAAqBG,EAAWlK,GACvD,MAEA,UAEK,eAAdwK,IAEPxK,EAAW,EAEPwK,EADAP,GAAYL,EAAYroB,MAAQ,EACpB,OAEA,SAIF,QAAdipB,GAAqC,WAAdA,EAAwB,CAE/C,MAAME,EAAeryB,KAAK8J,IAAK2nB,EAAYvoB,MAAQ,EAAK0oB,EAAU,GAC5DU,EAActyB,KAAK8J,IAAK2nB,EAAYvoB,MAAQ,EAAK0oB,EAAWD,EAAkB,GACpFI,EAAelpB,EAAY3Q,EAAI05B,EAAYH,EAAYvoB,MAAQ,EAAKopB,EAAcD,EAClFH,EAAcrpB,EAAY3Q,EAAI05B,EAAWG,EApD1B,EAsDG,QAAdI,GACAL,EAAcjpB,EAAYpE,EAAIotB,GAAYlK,EAAW8J,EAAY1oB,OArDrDqpB,GAsDZJ,EAAa,OACbC,EAAYR,EAAY1oB,OAxDX,IA0Db+oB,EAAcjpB,EAAYpE,EAAIotB,EAAWlK,EAzD7ByK,EA0DZJ,EAAa,KACbC,GAAY,OAEb,IAAkB,SAAdE,GAAsC,UAAdA,EAuB/B,MAAM,IAAIpgC,MAAM,gCArBE,SAAdogC,GACAJ,EAAelpB,EAAY3Q,EAAI05B,EAAWnK,EAhE9B2K,EAiEZJ,EAAa,OACbE,GAAa,IAEbH,EAAelpB,EAAY3Q,EAAI05B,EAAWH,EAAYvoB,MAAQue,EApElD2K,EAqEZJ,EAAa,QACbE,EAAaT,EAAYvoB,MAvEZ,GA0Eb2oB,EAAYJ,EAAY1oB,OAAS,GAAM,GACvC+oB,EAAcjpB,EAAYpE,EAAIotB,EAAW,KAxEzB,EAyEhBI,EAzEgB,GA0ETJ,EAAYJ,EAAY1oB,OAAS,GAAM2oB,GAC9CI,EAAcjpB,EAAYpE,EAAIotB,EA/EnB,EAIK,EA2EwDJ,EAAY1oB,OACpFkpB,EAAYR,EAAY1oB,OAAS,GA5EjB,IA8EhB+oB,EAAcjpB,EAAYpE,EAAIotB,EAAYJ,EAAY1oB,OAAS,EAC/DkpB,EAAaR,EAAY1oB,OAAS,EAnFvB,GAsGnB,OAZAulB,EAAQpqB,SACH+E,MAAM,OAAQ,GAAG8oB,OACjB9oB,MAAM,MAAO,GAAG6oB,OAEhBxD,EAAQiE,QACTjE,EAAQiE,MAAQjE,EAAQpqB,SAASoE,OAAO,OACnCW,MAAM,WAAY,aAE3BqlB,EAAQiE,MACHhwB,KAAK,QAAS,+BAA+ByvB,KAC7C/oB,MAAM,OAAQ,GAAGipB,OACjBjpB,MAAM,MAAO,GAAGgpB,OACdvgC,KAgBX,OAAO8gC,EAAcxgC,EAAMkd,EAAOujB,GAC9B,IAAIC,GAAW,EAcf,OAbAF,EAAa/7B,SAAS8C,IAClB,MAAM,MAACgI,EAAK,SAAEoN,EAAUnd,MAAOgrB,GAAUjjB,EACnCo5B,EAAY,OAAahkB,GAKzB3M,EAAQtQ,KAAK++B,qBAAqBz+B,GAEnC2gC,EADepxB,EAAQ,IAAKD,EAAMC,GAAQlM,QAAQrD,EAAMgQ,GAAShQ,EAC1CwqB,KACxBkW,GAAW,MAGZA,EAWX,qBAAsB5tB,EAASnU,GAC3B,MAAMgI,EAAKjH,KAAKq9B,aAAajqB,GACvB9C,EAAQtQ,KAAKo0B,YAAYkJ,aAAar2B,GAC5C,OAAOhI,EAAOqR,GAASA,EAAMrR,GAAQqR,EAezC,cAAcxM,GAQV,OAPAA,EAAOA,GAAQ9D,KAAK8D,KAEhB9D,KAAKi9B,aACLn5B,EAAOA,EAAK+D,OAAO7H,KAAKi9B,cACjBj9B,KAAKyU,OAAO6I,UACnBxZ,EAAOA,EAAK+D,OAAO7H,KAAK6H,OAAOq5B,KAAKlhC,KAAMA,KAAKyU,OAAO6I,WAEnDxZ,EAWX,mBAII,MAAMswB,EAAc,CAAE+M,aAAc,GAAI7D,aAAc,IAChD6D,EAAe/M,EAAY+M,aACjClzB,EAASE,WAAWpJ,SAASmU,IACzBioB,EAAajoB,GAAUioB,EAAajoB,IAAW,IAAIkoB,OAGvDD,EAA0B,YAAIA,EAA0B,aAAK,IAAIC,IAE7DphC,KAAKmR,SAELnR,KAAKwpB,SAAW,GAAGxpB,KAAKmR,OAAOlK,MAAMjH,KAAKiH,KAC1CjH,KAAKwC,MAAQxC,KAAKmR,OAAO3O,MACzBxC,KAAKwC,MAAMxC,KAAKwpB,UAAY4K,GAEhCp0B,KAAKo0B,YAAcA,EASvB,YACI,OAAIp0B,KAAKg9B,SACEh9B,KAAKg9B,SAGZh9B,KAAKmR,OACE,GAAGnR,KAAKuW,YAAYtP,MAAMjH,KAAKmR,OAAOlK,MAAMjH,KAAKiH,MAEhDjH,KAAKiH,IAAM,IAAI4F,WAY/B,wBAEI,OADgB7M,KAAKwW,IAAI4Q,MAAM3Q,OAAOyB,wBACvBb,OAQnB,aACIrX,KAAKg9B,SAAWh9B,KAAKga,YAGrB,MAAMmV,EAAUnvB,KAAKga,YAerB,OAdAha,KAAKwW,IAAIgV,UAAYxrB,KAAKmR,OAAOqF,IAAI4Q,MAAMxQ,OAAO,KAC7C/F,KAAK,QAAS,2BACdA,KAAK,KAAM,GAAGse,0BAGnBnvB,KAAKwW,IAAImV,SAAW3rB,KAAKwW,IAAIgV,UAAU5U,OAAO,YACzC/F,KAAK,KAAM,GAAGse,UACdvY,OAAO,QAGZ5W,KAAKwW,IAAI4Q,MAAQpnB,KAAKwW,IAAIgV,UAAU5U,OAAO,KACtC/F,KAAK,KAAM,GAAGse,gBACdte,KAAK,YAAa,QAAQse,WAExBnvB,KASX,cAAe8D,GACX,GAAkC,iBAAvB9D,KAAKyU,OAAOmoB,QACnB,MAAM,IAAIv8B,MAAM,cAAcL,KAAKiH,wCAEvC,MAAMA,EAAKjH,KAAKq9B,aAAav5B,GAC7B,IAAI9D,KAAKk9B,SAASj2B,GAalB,OATAjH,KAAKk9B,SAASj2B,GAAM,CAChBnD,KAAMA,EACN+8B,MAAO,KACPruB,SAAU,SAAUxS,KAAKuW,YAAYC,IAAIC,OAAOC,YAAYE,OAAO,OAC9D/F,KAAK,QAAS,yBACdA,KAAK,KAAM,GAAG5J,cAEvBjH,KAAKo0B,YAAY+M,aAA0B,YAAE1/B,IAAIwF,GACjDjH,KAAKqhC,cAAcv9B,GACZ9D,KAZHA,KAAKshC,gBAAgBr6B,GAsB7B,cAAcyK,EAAGzK,GA0Bb,YAzBiB,IAANA,IACPA,EAAKjH,KAAKq9B,aAAa3rB,IAG3B1R,KAAKk9B,SAASj2B,GAAIuL,SAASqE,KAAK,IAChC7W,KAAKk9B,SAASj2B,GAAI45B,MAAQ,KAEtB7gC,KAAKyU,OAAOmoB,QAAQ/lB,MACpB7W,KAAKk9B,SAASj2B,GAAIuL,SAASqE,KAAK0b,GAAYvyB,KAAKyU,OAAOmoB,QAAQ/lB,KAAMnF,EAAG1R,KAAK++B,qBAAqBrtB,KAInG1R,KAAKyU,OAAOmoB,QAAQ2E,UACpBvhC,KAAKk9B,SAASj2B,GAAIuL,SAASmE,OAAO,SAAU,gBACvC9F,KAAK,QAAS,2BACdA,KAAK,QAAS,SACdvN,KAAK,KACLwT,GAAG,SAAS,KACT9W,KAAKwhC,eAAev6B,MAIhCjH,KAAKk9B,SAASj2B,GAAIuL,SAAS1O,KAAK,CAAC4N,IAEjC1R,KAAKshC,gBAAgBr6B,GACdjH,KAYX,eAAeyhC,EAAeC,GAC1B,IAAIz6B,EAaJ,GAXIA,EADwB,iBAAjBw6B,EACFA,EAEAzhC,KAAKq9B,aAAaoE,GAEvBzhC,KAAKk9B,SAASj2B,KAC2B,iBAA9BjH,KAAKk9B,SAASj2B,GAAIuL,UACzBxS,KAAKk9B,SAASj2B,GAAIuL,SAASmF,gBAExB3X,KAAKk9B,SAASj2B,KAGpBy6B,EAAW,CACU1hC,KAAKo0B,YAAY+M,aAA0B,YACnD1gC,OAAOwG,GAEzB,OAAOjH,KASX,mBAAmB0hC,GAAY,GAC3B,IAAK,IAAIz6B,KAAMjH,KAAKk9B,SAChBl9B,KAAKwhC,eAAev6B,EAAIy6B,GAE5B,OAAO1hC,KAcX,gBAAgBiH,GACZ,GAAiB,iBAANA,EACP,MAAM,IAAI5G,MAAM,kDAEpB,IAAKL,KAAKk9B,SAASj2B,GACf,MAAM,IAAI5G,MAAM,oEAEpB,MAAMu8B,EAAU58B,KAAKk9B,SAASj2B,GACxBqnB,EAAStuB,KAAK2hC,oBAAoB/E,GAExC,IAAKtO,EAID,OAAO,KAEXtuB,KAAK4hC,aAAahF,EAAS58B,KAAKyU,OAAOooB,oBAAqBvO,EAAOmR,MAAOnR,EAAOoR,MAAOpR,EAAOqR,MAAOrR,EAAOsR,OASjH,sBACI,IAAK,IAAI34B,KAAMjH,KAAKk9B,SAChBl9B,KAAKshC,gBAAgBr6B,GAEzB,OAAOjH,KAYX,kBAAkBoT,EAASyuB,GACvB,GAAkC,iBAAvB7hC,KAAKyU,OAAOmoB,QACnB,OAAO58B,KAEX,MAAMiH,EAAKjH,KAAKq9B,aAAajqB,GASvB0uB,EAAgB,CAACC,EAAUC,EAAW/kB,KACxC,IAAI/D,EAAS,KACb,GAAuB,iBAAZ6oB,GAAqC,OAAbA,EAC/B,OAAO,KAEX,GAAIrhC,MAAMqD,QAAQi+B,GAEd/kB,EAAWA,GAAY,MAEnB/D,EADqB,IAArB8oB,EAAU3gC,OACD0gC,EAASC,EAAU,IAEnBA,EAAU/1B,QAAO,CAACg2B,EAAeC,IACrB,QAAbjlB,EACO8kB,EAASE,IAAkBF,EAASG,GACvB,OAAbjlB,EACA8kB,EAASE,IAAkBF,EAASG,GAExC,WAGZ,IAAwB,iBAAbF,EAad,OAAO,EAb8B,CACrC,IAAIG,EACJ,IAAK,IAAIC,KAAgBJ,EACrBG,EAAaL,EAAcC,EAAUC,EAAUI,GAAeA,GAC/C,OAAXlpB,EACAA,EAASipB,EACW,QAAbllB,EACP/D,EAASA,GAAUipB,EACC,OAAbllB,IACP/D,EAASA,GAAUipB,IAM/B,OAAOjpB,GAGX,IAAImpB,EAAiB,GACkB,iBAA5BriC,KAAKyU,OAAOmoB,QAAQzmB,KAC3BksB,EAAiB,CAAEC,IAAK,CAAEtiC,KAAKyU,OAAOmoB,QAAQzmB,OACJ,iBAA5BnW,KAAKyU,OAAOmoB,QAAQzmB,OAClCksB,EAAiBriC,KAAKyU,OAAOmoB,QAAQzmB,MAGzC,IAAIosB,EAAiB,GACkB,iBAA5BviC,KAAKyU,OAAOmoB,QAAQ7lB,KAC3BwrB,EAAiB,CAAED,IAAK,CAAEtiC,KAAKyU,OAAOmoB,QAAQ7lB,OACJ,iBAA5B/W,KAAKyU,OAAOmoB,QAAQ7lB,OAClCwrB,EAAiBviC,KAAKyU,OAAOmoB,QAAQ7lB,MAIzC,MAAMqd,EAAcp0B,KAAKo0B,YACzB,IAAI+M,EAAe,GACnBlzB,EAASE,WAAWpJ,SAASmU,IACzB,MAAMspB,EAAa,KAAKtpB,IACxBioB,EAAajoB,GAAWkb,EAAY+M,aAAajoB,GAAQ9Y,IAAI6G,GAC7Dk6B,EAAaqB,IAAerB,EAAajoB,MAI7C,MAAMupB,EAAgBX,EAAcX,EAAckB,GAC5CK,EAAgBZ,EAAcX,EAAcoB,GAK5CI,EAAevO,EAAY+M,aAA0B,YAAE/gC,IAAI6G,GAQjE,OANIw7B,IADuBZ,IAAsBc,GACJD,EAGzC1iC,KAAKwhC,eAAepuB,GAFpBpT,KAAK4iC,cAAcxvB,GAKhBpT,KAgBX,iBAAiBkZ,EAAQ9F,EAASulB,EAAQkK,GACtC,GAAe,gBAAX3pB,EAGA,OAAOlZ,KAOX,IAAI09B,OALiB,IAAV/E,IACPA,GAAS,GAKb,IACI+E,EAAa19B,KAAKq9B,aAAajqB,GACjC,MAAO0vB,GACL,OAAO9iC,KAIP6iC,GACA7iC,KAAK0rB,oBAAoBxS,GAASyf,GAItC,SAAU,IAAI+E,KAAcplB,QAAQ,iBAAiBtY,KAAKyU,OAAO3G,QAAQoL,IAAUyf,GACnF,MAAMoK,EAAyB/iC,KAAKgjC,uBAAuB5vB,GAC5B,OAA3B2vB,GACA,SAAU,IAAIA,KAA0BzqB,QAAQ,iBAAiBtY,KAAKyU,OAAO3G,mBAAmBoL,IAAUyf,GAI9G,MAAMsK,GAAgBjjC,KAAKo0B,YAAY+M,aAAajoB,GAAQ9Y,IAAIs9B,GAC5D/E,GAAUsK,GACVjjC,KAAKo0B,YAAY+M,aAAajoB,GAAQzX,IAAIi8B,GAEzC/E,GAAWsK,GACZjjC,KAAKo0B,YAAY+M,aAAajoB,GAAQzY,OAAOi9B,GAIjD19B,KAAKkjC,kBAAkB9vB,EAAS6vB,GAG5BA,GACAjjC,KAAKmR,OAAOyM,KAAK,kBAAkB,GAGvC,MAAMulB,EAA0B,aAAXjqB,GACjBiqB,IAAgBF,GAAiBtK,GAEjC34B,KAAKmR,OAAOyM,KAAK,oBAAqB,CAAExK,QAASA,EAASulB,OAAQA,IAAU,GAGhF,MAAMyK,EAAsBpjC,KAAKyU,OAAO3M,OAAS9H,KAAKyU,OAAO3M,MAAMu7B,KASnE,OARIF,QAA8C,IAAvBC,IAAwCH,GAAiBtK,GAChF34B,KAAKmR,OAAOyM,KAER,kBACA,CAAE9d,MAAO,IAAI8P,EAAMwzB,GAAoBz/B,QAAQyP,GAAUulB,OAAQA,IACjE,GAGD34B,KAWX,oBAAoBkZ,EAAQ4Z,GAGxB,QAAqB,IAAV5Z,IAA0BjL,EAASE,WAAWrM,SAASoX,GAC9D,MAAM,IAAI7Y,MAAM,kBAEpB,QAAoD,IAAzCL,KAAKo0B,YAAY+M,aAAajoB,GACrC,OAAOlZ,KAOX,QALqB,IAAV8yB,IACPA,GAAS,GAITA,EACA9yB,KAAK8D,KAAKiB,SAASqO,GAAYpT,KAAKsjC,iBAAiBpqB,EAAQ9F,GAAS,SACnE,CACgB,IAAIguB,IAAIphC,KAAKo0B,YAAY+M,aAAajoB,IAC9CnU,SAASkC,IAChB,MAAMmM,EAAUpT,KAAKujC,eAAet8B,GACd,iBAAXmM,GAAmC,OAAZA,GAC9BpT,KAAKsjC,iBAAiBpqB,EAAQ9F,GAAS,MAG/CpT,KAAKo0B,YAAY+M,aAAajoB,GAAU,IAAIkoB,IAMhD,OAFAphC,KAAKm9B,gBAAgBjkB,GAAU4Z,EAExB9yB,KASX,eAAewY,GACyB,iBAAzBxY,KAAKyU,OAAOqoB,WAGvB39B,OAAOyB,KAAKZ,KAAKyU,OAAOqoB,WAAW/3B,SAASi9B,IACxC,MAAMwB,EAAc,6BAA6BzzB,KAAKiyB,GACjDwB,GAGLhrB,EAAU1B,GAAG,GAAG0sB,EAAY,MAAMxB,IAAahiC,KAAKyjC,iBAAiBzB,EAAWhiC,KAAKyU,OAAOqoB,UAAUkF,QAkB9G,iBAAiBA,EAAWlF,GAGxB,MAAM4G,EACO1B,EAAUlgC,SAAS,QAD1B4hC,EAEQ1B,EAAUlgC,SAAS,SAE3B4uB,EAAO1wB,KACb,OAAO,SAASoT,GAIZA,EAAUA,GAAW,SAAU,gBAAiBuwB,QAG5CD,MAA6B,iBAAoBA,MAA8B,kBAKnF5G,EAAU/3B,SAAS6+B,IAGf,GAAuB,iBAAZA,GAAqC,OAAbA,EAInC,OAAQA,EAASC,QAGjB,IAAK,MACDnT,EAAK4S,iBAAiBM,EAAS1qB,OAAQ9F,GAAS,EAAMwwB,EAASf,WAC/D,MAGJ,IAAK,QACDnS,EAAK4S,iBAAiBM,EAAS1qB,OAAQ9F,GAAS,EAAOwwB,EAASf,WAChE,MAGJ,IAAK,SACD,IAAIiB,EAA0BpT,EAAK0D,YAAY+M,aAAayC,EAAS1qB,QAAQ9Y,IAAIswB,EAAK2M,aAAajqB,IAC/FyvB,EAAYe,EAASf,YAAciB,EAEvCpT,EAAK4S,iBAAiBM,EAAS1qB,OAAQ9F,GAAU0wB,EAAwBjB,GACzE,MAGJ,IAAK,OACD,GAA4B,iBAAjBe,EAASG,KAAkB,CAClC,MAAM/gC,EAAMuvB,GAAYqR,EAASG,KAAM3wB,EAASsd,EAAKqO,qBAAqB3rB,IAC5C,iBAAnBwwB,EAAS9Y,OAChB2L,OAAOuN,KAAKhhC,EAAK4gC,EAAS9Y,QAE1B2L,OAAOwN,SAASF,KAAO/gC,QAoB/C,iBACI,MAAMkhC,EAAelkC,KAAKmR,OAAOiG,iBACjC,MAAO,CACH5Q,EAAG09B,EAAa19B,EAAIxG,KAAKmR,OAAOsD,OAAO2T,OAAOle,KAC9C6I,EAAGmxB,EAAanxB,EAAI/S,KAAKmR,OAAOsD,OAAO2T,OAAOvN,KAStD,wBACI,MAAMsmB,EAAenhC,KAAKo0B,YAAY+M,aAChCzQ,EAAO1wB,KACb,IAAK,IAAI6T,KAAYstB,EACZhiC,OAAOM,UAAUC,eAAeC,KAAKwhC,EAActtB,IAGxDstB,EAAattB,GAAU9O,SAAS24B,IAC5B,IACI19B,KAAKsjC,iBAAiBzvB,EAAU7T,KAAKujC,eAAe7F,IAAa,GACnE,MAAO3sB,GACL7P,QAAQC,KAAK,0BAA0BuvB,EAAKlH,aAAa3V,KACzD3S,QAAQslB,MAAMzV,OAY9B,OAOI,OANA/Q,KAAKwW,IAAIgV,UACJ3a,KAAK,YAAa,aAAa7Q,KAAKmR,OAAOsD,OAAO6T,SAASzB,OAAOrgB,MAAMxG,KAAKmR,OAAOsD,OAAO6T,SAASzB,OAAO9T,MAChH/S,KAAKwW,IAAImV,SACJ9a,KAAK,QAAS7Q,KAAKmR,OAAOsD,OAAO6T,SAAS9Q,OAC1C3G,KAAK,SAAU7Q,KAAKmR,OAAOsD,OAAO6T,SAASjR,QAChDrX,KAAKmkC,sBACEnkC,KAWX,QAKI,OAJAA,KAAKurB,qBAIEvrB,KAAKuW,YAAYkd,IAAI5d,QAAQ7V,KAAKwC,MAAOxC,KAAKyU,OAAO/R,QACvDQ,MAAM0xB,IACH50B,KAAK8D,KAAO8wB,EAAS7uB,KACrB/F,KAAKokC,mBACLpkC,KAAKspB,aAAc,MAKnCrb,EAASC,MAAMnJ,SAAQ,CAACguB,EAAM1H,KAC1B,MAAM2H,EAAY/kB,EAASE,WAAWkd,GAChC4H,EAAW,KAAKF,IAmBtBgK,GAAct9B,UAAU,GAAGszB,YAAiB,SAAS3f,EAASyvB,GAAY,GAGtE,OAFAA,IAAcA,EACd7iC,KAAKsjC,iBAAiBtQ,EAAW5f,GAAS,EAAMyvB,GACzC7iC,MAmBX+8B,GAAct9B,UAAU,GAAGwzB,YAAqB,SAAS7f,EAASyvB,GAO9D,OALIA,OADoB,IAAbA,KAGOA,EAElB7iC,KAAKsjC,iBAAiBtQ,EAAW5f,GAAS,EAAOyvB,GAC1C7iC,MAoBX+8B,GAAct9B,UAAU,GAAGszB,gBAAqB,WAE5C,OADA/yB,KAAK0rB,oBAAoBsH,GAAW,GAC7BhzB,MAmBX+8B,GAAct9B,UAAU,GAAGwzB,gBAAyB,WAEhD,OADAjzB,KAAK0rB,oBAAoBsH,GAAW,GAC7BhzB,SCljDf,MAAM,GAAiB,CACnB2Y,MAAO,UACP2E,QAAS,KACTuf,oBAAqB,WACrBwH,cAAe,GAUnB,MAAMC,WAAwBvH,GAQ1B,YAAYtoB,GACR,IAAK/T,MAAMqD,QAAQ0Q,EAAO6I,SACtB,MAAM,IAAIjd,MAAM,mFAEpBqT,EAAMe,EAAQ,IACdpO,SAASjF,WAGb,aACIiF,MAAM4S,aACNjZ,KAAKukC,gBAAkBvkC,KAAKwW,IAAI4Q,MAAMxQ,OAAO,KACxC/F,KAAK,QAAS,iBAAiB7Q,KAAKyU,OAAO3G,kBAEhD9N,KAAKwkC,qBAAuBxkC,KAAKwW,IAAI4Q,MAAMxQ,OAAO,KAC7C/F,KAAK,QAAS,iBAAiB7Q,KAAKyU,OAAO3G,sBAGpD,SAEI,MAAM22B,EAAazkC,KAAK0kC,gBAElBC,EAAsB3kC,KAAKukC,gBAAgB9jB,UAAU,sBAAsBzgB,KAAKyU,OAAO3G,QACxFhK,KAAK2gC,GAAa/yB,GAAMA,EAAE1R,KAAKyU,OAAOlO,YAGrCq+B,EAAQ,CAAClzB,EAAGtN,KAGd,MAAM87B,EAAWlgC,KAAKmR,OAAgB,QAAEO,EAAE1R,KAAKyU,OAAO8a,OAAO1f,QAC7D,IAAIg1B,EAAS3E,EAAWlgC,KAAKyU,OAAO4vB,cAAgB,EACpD,GAAIjgC,GAAK,EAAG,CAER,MAAM0gC,EAAYL,EAAWrgC,EAAI,GAC3B2gC,EAAqB/kC,KAAKmR,OAAgB,QAAE2zB,EAAU9kC,KAAKyU,OAAO8a,OAAO1f,QAC/Eg1B,EAASv2B,KAAK8J,IAAIysB,GAAS3E,EAAW6E,GAAsB,GAEhE,MAAO,CAACF,EAAQ3E,IAIpByE,EAAoBK,QACfpuB,OAAO,QACP/F,KAAK,QAAS,iBAAiB7Q,KAAKyU,OAAO3G,QAE3C4F,MAAMixB,GACN9zB,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpCb,KAAK,SAAU7Q,KAAKmR,OAAOsD,OAAO4C,QAClCxG,KAAK,UAAW,GAChBA,KAAK,KAAK,CAACa,EAAGtN,IACEwgC,EAAMlzB,EAAGtN,GACV,KAEfyM,KAAK,SAAS,CAACa,EAAGtN,KACf,MAAM6gC,EAAOL,EAAMlzB,EAAGtN,GACtB,OAAQ6gC,EAAK,GAAKA,EAAK,GAAMjlC,KAAKyU,OAAO4vB,cAAgB,KAGjE,MACM7rB,EAAYxY,KAAKwkC,qBAAqB/jB,UAAU,sBAAsBzgB,KAAKyU,OAAO3G,QACnFhK,KAAK2gC,GAAa/yB,GAAMA,EAAE1R,KAAKyU,OAAOlO,YAE3CiS,EAAUwsB,QACLpuB,OAAO,QACP/F,KAAK,QAAS,iBAAiB7Q,KAAKyU,OAAO3G,QAC3C4F,MAAM8E,GACN3H,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpCb,KAAK,KAAMa,GAAM1R,KAAKmR,OAAgB,QAAEO,EAAE1R,KAAKyU,OAAO8a,OAAO1f,QAAU2H,KACvE3G,KAAK,QAVI,GAWTA,KAAK,SAAU7Q,KAAKmR,OAAOsD,OAAO4C,QAClCxG,KAAK,QAAQ,CAACa,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOkE,MAAOjH,EAAGtN,KAGhFoU,EAAU0sB,OACLvtB,SAGL3X,KAAKwW,IAAI4Q,MACJznB,KAAKK,KAAKmlC,eAAejE,KAAKlhC,OAGnC2kC,EAAoBO,OACfvtB,SAST,oBAAoBilB,GAChB,MAAMta,EAAQtiB,KAAKmR,OACb6uB,EAAoB1d,EAAM7N,OAAO4C,QAAUiL,EAAM7N,OAAO2T,OAAOvN,IAAMyH,EAAM7N,OAAO2T,OAAOtN,QAGzFolB,EAAW5d,EAAMoH,QAAQkT,EAAQ94B,KAAK9D,KAAKyU,OAAO8a,OAAO1f,QACzDswB,EAAWH,EAAoB,EACrC,MAAO,CACHP,MAAOS,EALU,EAMjBR,MAAOQ,EANU,EAOjBP,MAAOQ,EAAW7d,EAAM7N,OAAO2T,OAAOvN,IACtC+kB,MAAOO,EAAW7d,EAAM7N,OAAO2T,OAAOtN,SCzHlD,MAAM,GAAiB,CACnBnC,MAAO,UACPysB,aAAc,GAEd9nB,QAAS,KAGT+nB,QAAS,GACT9+B,SAAU,KACV++B,YAAa,QACbC,UAAW,MACXC,YAAa,MAoBjB,MAAMC,WAAyB1I,GAa3B,YAAYtoB,GAER,GADAf,EAAMe,EAAQ,IACVA,EAAOkS,aAAelS,EAAOqoB,UAC7B,MAAM,IAAIz8B,MAAM,yDAGpB,GAAIoU,EAAO4wB,SAAW5wB,EAAO4wB,QAAQhkC,QAAUoT,EAAO/R,QAAU+R,EAAO/R,OAAOrB,OAC1E,MAAM,IAAIhB,MAAM,oGAEpBgG,SAASjF,WAab,YAAY0C,GACR,MAAM,UAAEyhC,EAAS,YAAEC,EAAW,YAAEF,GAAgBtlC,KAAKyU,OACrD,IAAK+wB,EACD,OAAO1hC,EAIXA,EAAK6C,MAAK,CAACC,EAAGC,IAEH,YAAaD,EAAE4+B,GAAc3+B,EAAE2+B,KAAiB,YAAa5+B,EAAE0+B,GAAcz+B,EAAEy+B,MAG1F,IAAIb,EAAa,GAYjB,OAXA3gC,EAAKiB,SAAQ,SAAU2gC,EAAUloB,GAC7B,MAAMmoB,EAAYlB,EAAWA,EAAWpjC,OAAS,IAAMqkC,EACvD,GAAIA,EAASF,KAAiBG,EAAUH,IAAgBE,EAASJ,IAAgBK,EAAUJ,GAAY,CAEnG,MAAMK,EAAYt3B,KAAK6J,IAAIwtB,EAAUL,GAAcI,EAASJ,IACtDO,EAAUv3B,KAAK8J,IAAIutB,EAAUJ,GAAYG,EAASH,IACxDG,EAAWvmC,OAAOqC,OAAO,GAAImkC,EAAWD,EAAU,CAAE,CAACJ,GAAcM,EAAW,CAACL,GAAYM,IAC3FpB,EAAWjT,MAEfiT,EAAWlgC,KAAKmhC,MAEbjB,EAGX,SACI,MAAM,QAAE/a,GAAY1pB,KAAKmR,OAEzB,IAAIszB,EAAazkC,KAAKyU,OAAO4wB,QAAQhkC,OAASrB,KAAKyU,OAAO4wB,QAAUrlC,KAAK8D,KAGzE2gC,EAAW1/B,SAAQ,CAAC2M,EAAGtN,IAAMsN,EAAEzK,KAAOyK,EAAEzK,GAAK7C,KAC7CqgC,EAAazkC,KAAK0kC,cAAcD,GAChCA,EAAazkC,KAAK8lC,YAAYrB,GAE9B,MAAMjsB,EAAYxY,KAAKwW,IAAI4Q,MAAM3G,UAAU,sBAAsBzgB,KAAKyU,OAAO3G,QACxEhK,KAAK2gC,GAGVjsB,EAAUwsB,QACLpuB,OAAO,QACP/F,KAAK,QAAS,iBAAiB7Q,KAAKyU,OAAO3G,QAC3C4F,MAAM8E,GACN3H,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpCb,KAAK,KAAMa,GAAMgY,EAAQhY,EAAE1R,KAAKyU,OAAO6wB,gBACvCz0B,KAAK,SAAUa,GAAMgY,EAAQhY,EAAE1R,KAAKyU,OAAO8wB,YAAc7b,EAAQhY,EAAE1R,KAAKyU,OAAO6wB,gBAC/Ez0B,KAAK,SAAU7Q,KAAKmR,OAAOsD,OAAO4C,QAClCxG,KAAK,QAAQ,CAACa,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOkE,MAAOjH,EAAGtN,KAC3EyM,KAAK,gBAAgB,CAACa,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAO2wB,aAAc1zB,EAAGtN,KAG/FoU,EAAU0sB,OACLvtB,SAGL3X,KAAKwW,IAAI4Q,MAAM7P,MAAM,iBAAkB,QAG3C,oBAAoBqlB,GAEhB,MAAM,IAAIv8B,MAAM,yCC/HxB,MAAM,GAAiB,CACnBsY,MAAO,WACP0rB,cAAe,OACf9sB,MAAO,CACHwuB,KAAM,OACN,eAAgB,MAChB,iBAAkB,QAEtBlJ,oBAAqB,OAWzB,MAAMmJ,WAAajJ,GAaf,YAAYtoB,GACRA,EAASf,EAAMe,EAAQ,IACvBpO,SAASjF,WAIb,SACI,MAAMsvB,EAAO1wB,KACPyU,EAASic,EAAKjc,OACdiV,EAAUgH,EAAKvf,OAAgB,QAC/BouB,EAAU7O,EAAKvf,OAAO,IAAIsD,EAAOuW,OAAOC,cAGxCwZ,EAAazkC,KAAK0kC,gBAGxB,SAASuB,EAAWv0B,GAChB,MAAMw0B,EAAKx0B,EAAE+C,EAAO8a,OAAO4W,QACrBC,EAAK10B,EAAE+C,EAAO8a,OAAO8W,QACrBC,GAAQJ,EAAKE,GAAM,EACnB9X,EAAS,CACX,CAAC5E,EAAQwc,GAAK3G,EAAQ,IACtB,CAAC7V,EAAQ4c,GAAO/G,EAAQ7tB,EAAE+C,EAAOuW,OAAOnb,SACxC,CAAC6Z,EAAQ0c,GAAK7G,EAAQ,KAO1B,OAJa,SACR/4B,GAAGkL,GAAMA,EAAE,KACXqB,GAAGrB,GAAMA,EAAE,KACX60B,MAAM,eACJC,CAAKlY,GAIhB,MAAMmY,EAAWzmC,KAAKwW,IAAI4Q,MACrB3G,UAAU,mCACV3c,KAAK2gC,GAAa/yB,GAAM1R,KAAKq9B,aAAa3rB,KAEzC8G,EAAYxY,KAAKwW,IAAI4Q,MACtB3G,UAAU,2BACV3c,KAAK2gC,GAAa/yB,GAAM1R,KAAKq9B,aAAa3rB,KAsC/C,OApCA1R,KAAKwW,IAAI4Q,MACJznB,KAAKuX,GAAazC,EAAO8C,OAE9BkvB,EACKzB,QACApuB,OAAO,QACP/F,KAAK,QAAS,8BACd6C,MAAM+yB,GACN51B,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpC6F,MAAM,OAAQ,QACdA,MAAM,eAAgB9C,EAAO4vB,eAC7B9sB,MAAM,iBAAkB,GACxBA,MAAM,SAAU,eAChB1G,KAAK,KAAMa,GAAMu0B,EAAWv0B,KAGjC8G,EACKwsB,QACApuB,OAAO,QACP/F,KAAK,QAAS,sBACd6C,MAAM8E,GACN3H,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpCb,KAAK,UAAU,CAACa,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOkE,MAAOjH,EAAGtN,KAC7EyM,KAAK,KAAK,CAACa,EAAGtN,IAAM6hC,EAAWv0B,KAGpC8G,EAAU0sB,OACLvtB,SAEL8uB,EAASvB,OACJvtB,SAGL3X,KAAKwW,IAAI4Q,MACJznB,KAAKK,KAAKmlC,eAAejE,KAAKlhC,OAE5BA,KAGX,oBAAoB48B,GAGhB,MAAMta,EAAQtiB,KAAKmR,OACbsD,EAASzU,KAAKyU,OAEdyxB,EAAKtJ,EAAQ94B,KAAK2Q,EAAO8a,OAAO4W,QAChCC,EAAKxJ,EAAQ94B,KAAK2Q,EAAO8a,OAAO8W,QAEhC9G,EAAUjd,EAAM,IAAI7N,EAAOuW,OAAOC,cAExC,MAAO,CACHwU,MAAOnd,EAAMoH,QAAQpb,KAAK6J,IAAI+tB,EAAIE,IAClC1G,MAAOpd,EAAMoH,QAAQpb,KAAK8J,IAAI8tB,EAAIE,IAClCzG,MAAOJ,EAAQ3C,EAAQ94B,KAAK2Q,EAAOuW,OAAOnb,QAC1C+vB,MAAOL,EAAQ,KChI3B,MAAM,GAAiB,CAEnBmH,OAAQ,mBACR/tB,MAAO,UACPguB,gBAAiB,GACjBC,mBAAoB,EACpBC,YAAa,GACbC,qBAAsB,EACtBC,uBAAwB,EACxBlK,oBAAqB,OAUzB,MAAMmK,WAAcjK,GAWhB,YAAYtoB,GACRA,EAASf,EAAMe,EAAQ,IACvBpO,SAASjF,WAOTpB,KAAKinC,eAAiB,EAQtBjnC,KAAKknC,OAAS,EAMdlnC,KAAKmnC,iBAAmB,CAAEC,EAAG,IAQjC,uBAAuBh0B,GACnB,MAAO,GAAGpT,KAAKq9B,aAAajqB,gBAOhC,iBACI,OAAO,EAAIpT,KAAKyU,OAAOqyB,qBACjB9mC,KAAKyU,OAAOkyB,gBACZ3mC,KAAKyU,OAAOmyB,mBACZ5mC,KAAKyU,OAAOoyB,YACZ7mC,KAAKyU,OAAOsyB,uBAQtB,aAAajjC,GAOT,MAAMujC,EAAiB,CAACj7B,EAAWk7B,KAC/B,IACI,MAAMC,EAAYvnC,KAAKwW,IAAI4Q,MAAMxQ,OAAO,QACnC/F,KAAK,IAAK,GACVA,KAAK,IAAK,GACVA,KAAK,QAAS,gCACd0G,MAAM,YAAa+vB,GACnBhkC,KAAK,GAAG8I,MACPo7B,EAAcD,EAAU9wB,OAAOgxB,UAAUjwB,MAE/C,OADA+vB,EAAU5vB,SACH6vB,EACT,MAAOz2B,GACL,OAAO,IAQf,OAHA/Q,KAAKknC,OAAS,EACdlnC,KAAKmnC,iBAAmB,CAAEC,EAAG,IAEtBtjC,EAGF+D,QAAQvH,KAAWA,EAAKyC,IAAM/C,KAAKwC,MAAMM,OAAYxC,EAAKwC,MAAQ9C,KAAKwC,MAAMO,OAC7E6B,KAAKtE,IAGF,GAAIA,EAAKonC,SAAWpnC,EAAKonC,QAAQl8B,QAAQ,KAAM,CAC3C,MAAM2E,EAAQ7P,EAAKonC,QAAQv3B,MAAM,KACjC7P,EAAKonC,QAAUv3B,EAAM,GACrB7P,EAAKqnC,aAAex3B,EAAM,GAgB9B,GAZA7P,EAAKsnC,cAAgBtnC,EAAKunC,YAAY7nC,KAAKinC,gBAAgBW,cAI3DtnC,EAAKwnC,cAAgB,CACjBhlC,MAAO9C,KAAKmR,OAAOuY,QAAQpb,KAAK8J,IAAI9X,EAAKwC,MAAO9C,KAAKwC,MAAMM,QAC3DC,IAAO/C,KAAKmR,OAAOuY,QAAQpb,KAAK6J,IAAI7X,EAAKyC,IAAK/C,KAAKwC,MAAMO,OAE7DzC,EAAKwnC,cAAcN,YAAcH,EAAe/mC,EAAK8L,UAAWpM,KAAKyU,OAAOkyB,iBAC5ErmC,EAAKwnC,cAActwB,MAAQlX,EAAKwnC,cAAc/kC,IAAMzC,EAAKwnC,cAAchlC,MAEvExC,EAAKwnC,cAAcC,YAAc,SAC7BznC,EAAKwnC,cAActwB,MAAQlX,EAAKwnC,cAAcN,YAAa,CAC3D,GAAIlnC,EAAKwC,MAAQ9C,KAAKwC,MAAMM,MACxBxC,EAAKwnC,cAAc/kC,IAAMzC,EAAKwnC,cAAchlC,MACtCxC,EAAKwnC,cAAcN,YACnBxnC,KAAKyU,OAAOkyB,gBAClBrmC,EAAKwnC,cAAcC,YAAc,aAC9B,GAAIznC,EAAKyC,IAAM/C,KAAKwC,MAAMO,IAC7BzC,EAAKwnC,cAAchlC,MAAQxC,EAAKwnC,cAAc/kC,IACxCzC,EAAKwnC,cAAcN,YACnBxnC,KAAKyU,OAAOkyB,gBAClBrmC,EAAKwnC,cAAcC,YAAc,UAC9B,CACH,MAAMC,GAAoB1nC,EAAKwnC,cAAcN,YAAclnC,EAAKwnC,cAActwB,OAAS,EACjFxX,KAAKyU,OAAOkyB,gBACbrmC,EAAKwnC,cAAchlC,MAAQklC,EAAmBhoC,KAAKmR,OAAOuY,QAAQ1pB,KAAKwC,MAAMM,QAC9ExC,EAAKwnC,cAAchlC,MAAQ9C,KAAKmR,OAAOuY,QAAQ1pB,KAAKwC,MAAMM,OAC1DxC,EAAKwnC,cAAc/kC,IAAMzC,EAAKwnC,cAAchlC,MAAQxC,EAAKwnC,cAAcN,YACvElnC,EAAKwnC,cAAcC,YAAc,SACzBznC,EAAKwnC,cAAc/kC,IAAMilC,EAAmBhoC,KAAKmR,OAAOuY,QAAQ1pB,KAAKwC,MAAMO,MACnFzC,EAAKwnC,cAAc/kC,IAAM/C,KAAKmR,OAAOuY,QAAQ1pB,KAAKwC,MAAMO,KACxDzC,EAAKwnC,cAAchlC,MAAQxC,EAAKwnC,cAAc/kC,IAAMzC,EAAKwnC,cAAcN,YACvElnC,EAAKwnC,cAAcC,YAAc,QAEjCznC,EAAKwnC,cAAchlC,OAASklC,EAC5B1nC,EAAKwnC,cAAc/kC,KAAOilC,GAGlC1nC,EAAKwnC,cAActwB,MAAQlX,EAAKwnC,cAAc/kC,IAAMzC,EAAKwnC,cAAchlC,MAG3ExC,EAAKwnC,cAAchlC,OAAS9C,KAAKyU,OAAOqyB,qBACxCxmC,EAAKwnC,cAAc/kC,KAAS/C,KAAKyU,OAAOqyB,qBACxCxmC,EAAKwnC,cAActwB,OAAS,EAAIxX,KAAKyU,OAAOqyB,qBAG5CxmC,EAAK2nC,eAAiB,CAClBnlC,MAAO9C,KAAKmR,OAAOuY,QAAQ2D,OAAO/sB,EAAKwnC,cAAchlC,OACrDC,IAAO/C,KAAKmR,OAAOuY,QAAQ2D,OAAO/sB,EAAKwnC,cAAc/kC,MAEzDzC,EAAK2nC,eAAezwB,MAAQlX,EAAK2nC,eAAellC,IAAMzC,EAAK2nC,eAAenlC,MAG1ExC,EAAK4nC,MAAQ,KACb,IAAIC,EAAkB,EACtB,KAAsB,OAAf7nC,EAAK4nC,OAAgB,CACxB,IAAIE,GAA+B,EACnCpoC,KAAKmnC,iBAAiBgB,GAAiBvjC,KAAKyjC,IACxC,IAAKD,EAA8B,CAC/B,MAAME,EAAYh6B,KAAK6J,IAAIkwB,EAAYP,cAAchlC,MAAOxC,EAAKwnC,cAAchlC,OAC/DwL,KAAK8J,IAAIiwB,EAAYP,cAAc/kC,IAAKzC,EAAKwnC,cAAc/kC,KAC5DulC,EAAcD,EAAYP,cAActwB,MAAQlX,EAAKwnC,cAActwB,QAC9E4wB,GAA+B,OAItCA,GAIDD,IACIA,EAAkBnoC,KAAKknC,SACvBlnC,KAAKknC,OAASiB,EACdnoC,KAAKmnC,iBAAiBgB,GAAmB,MAN7C7nC,EAAK4nC,MAAQC,EACbnoC,KAAKmnC,iBAAiBgB,GAAiB5jC,KAAKjE,IAgBpD,OALAA,EAAK6Q,OAASnR,KACdM,EAAKunC,YAAYjjC,KAAI,CAAC8M,EAAG2gB,KACrB/xB,EAAKunC,YAAYxV,GAAGlhB,OAAS7Q,EAC7BA,EAAKunC,YAAYxV,GAAGkW,MAAM3jC,KAAI,CAAC8M,EAAGX,IAAMzQ,EAAKunC,YAAYxV,GAAGkW,MAAMx3B,GAAGI,OAAS7Q,EAAKunC,YAAYxV,QAE5F/xB,KAOnB,SACI,MAAMowB,EAAO1wB,KAEb,IAEIqX,EAFAotB,EAAazkC,KAAK0kC,gBACtBD,EAAazkC,KAAKwoC,aAAa/D,GAI/B,MAAMjsB,EAAYxY,KAAKwW,IAAI4Q,MAAM3G,UAAU,yBACtC3c,KAAK2gC,GAAa/yB,GAAMA,EAAEtF,YAE/BoM,EAAUwsB,QACLpuB,OAAO,KACP/F,KAAK,QAAS,uBACd6C,MAAM8E,GACN3H,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpCgP,MAAK,SAASvU,GACX,MAAM+e,EAAa/e,EAAKgF,OAGlBs3B,EAAS,SAAUzoC,MAAMygB,UAAU,2DACpC3c,KAAK,CAACqI,IAAQuF,GAAMwZ,EAAW8X,uBAAuBtxB,KAE3D2F,EAAS6T,EAAWwd,iBAAmBxd,EAAWzW,OAAOsyB,uBAEzD0B,EAAOzD,QACFpuB,OAAO,QACP/F,KAAK,QAAS,sDACd6C,MAAM+0B,GACN53B,KAAK,MAAOa,GAAMwZ,EAAW8X,uBAAuBtxB,KACpDb,KAAK,KAAMqa,EAAWzW,OAAOqyB,sBAC7Bj2B,KAAK,KAAMqa,EAAWzW,OAAOqyB,sBAC7Bj2B,KAAK,SAAUa,GAAMA,EAAEo2B,cAActwB,QACrC3G,KAAK,SAAUwG,GACfxG,KAAK,KAAMa,GAAMA,EAAEo2B,cAAchlC,QACjC+N,KAAK,KAAMa,IAAQA,EAAEw2B,MAAQ,GAAKhd,EAAWwd,mBAElDD,EAAOvD,OACFvtB,SAGL,MAAMgxB,EAAa,SAAU3oC,MAAMygB,UAAU,wCACxC3c,KAAK,CAACqI,IAAQuF,GAAM,GAAGA,EAAEtF,uBAE9BiL,EAAS,EACTsxB,EAAW3D,QACNpuB,OAAO,QACP/F,KAAK,QAAS,mCACd6C,MAAMi1B,GACN93B,KAAK,SAAUa,GAAMwZ,EAAW/Z,OAAOuY,QAAQhY,EAAE3O,KAAOmoB,EAAW/Z,OAAOuY,QAAQhY,EAAE5O,SACpF+N,KAAK,SAAUwG,GACfxG,KAAK,KAAMa,GAAMwZ,EAAW/Z,OAAOuY,QAAQhY,EAAE5O,SAC7C+N,KAAK,KAAMa,IACCA,EAAEw2B,MAAQ,GAAKhd,EAAWwd,iBAC7Bxd,EAAWzW,OAAOqyB,qBAClB5b,EAAWzW,OAAOkyB,gBAClBzb,EAAWzW,OAAOmyB,mBACjBt4B,KAAK8J,IAAI8S,EAAWzW,OAAOoyB,YAAa,GAAK,IAEvDtvB,MAAM,QAAQ,CAAC7F,EAAGtN,IAAMssB,EAAKkO,yBAAyBlO,EAAKjc,OAAOkE,MAAOjH,EAAGtN,KAC5EmT,MAAM,UAAU,CAAC7F,EAAGtN,IAAMssB,EAAKkO,yBAAyBlO,EAAKjc,OAAOiyB,OAAQh1B,EAAGtN,KAEpFukC,EAAWzD,OACNvtB,SAGL,MAAMixB,EAAS,SAAU5oC,MAAMygB,UAAU,qCACpC3c,KAAK,CAACqI,IAAQuF,GAAM,GAAGA,EAAEtF,oBAE9Bw8B,EAAO5D,QACFpuB,OAAO,QACP/F,KAAK,QAAS,gCACd6C,MAAMk1B,GACN/3B,KAAK,eAAgBa,GAAMA,EAAEo2B,cAAcC,cAC3CzkC,MAAMoO,GAAoB,MAAbA,EAAEm3B,OAAkB,GAAGn3B,EAAEtF,aAAe,IAAIsF,EAAEtF,cAC3DmL,MAAM,YAAapL,EAAKgF,OAAOsD,OAAOkyB,iBACtC91B,KAAK,KAAMa,GAC4B,WAAhCA,EAAEo2B,cAAcC,YACTr2B,EAAEo2B,cAAchlC,MAAS4O,EAAEo2B,cAActwB,MAAQ,EACjB,UAAhC9F,EAAEo2B,cAAcC,YAChBr2B,EAAEo2B,cAAchlC,MAAQooB,EAAWzW,OAAOqyB,qBACV,QAAhCp1B,EAAEo2B,cAAcC,YAChBr2B,EAAEo2B,cAAc/kC,IAAMmoB,EAAWzW,OAAOqyB,0BAD5C,IAIVj2B,KAAK,KAAMa,IAAQA,EAAEw2B,MAAQ,GAAKhd,EAAWwd,iBACxCxd,EAAWzW,OAAOqyB,qBAClB5b,EAAWzW,OAAOkyB,kBAG5BiC,EAAO1D,OACFvtB,SAIL,MAAM4wB,EAAQ,SAAUvoC,MAAMygB,UAAU,oCACnC3c,KAAKqI,EAAK07B,YAAY17B,EAAKgF,OAAO81B,gBAAgBsB,OAAQ72B,GAAMA,EAAEo3B,UAEvEzxB,EAAS6T,EAAWzW,OAAOoyB,YAE3B0B,EAAMvD,QACDpuB,OAAO,QACP/F,KAAK,QAAS,+BACd6C,MAAM60B,GACNhxB,MAAM,QAAQ,CAAC7F,EAAGtN,IAAMssB,EAAKkO,yBAAyBlO,EAAKjc,OAAOkE,MAAOjH,EAAEP,OAAOA,OAAQ/M,KAC1FmT,MAAM,UAAU,CAAC7F,EAAGtN,IAAMssB,EAAKkO,yBAAyBlO,EAAKjc,OAAOiyB,OAAQh1B,EAAEP,OAAOA,OAAQ/M,KAC7FyM,KAAK,SAAUa,GAAMwZ,EAAW/Z,OAAOuY,QAAQhY,EAAE3O,KAAOmoB,EAAW/Z,OAAOuY,QAAQhY,EAAE5O,SACpF+N,KAAK,SAAUwG,GACfxG,KAAK,KAAMa,GAAMwZ,EAAW/Z,OAAOuY,QAAQhY,EAAE5O,SAC7C+N,KAAK,KAAK,KACE1E,EAAK+7B,MAAQ,GAAKhd,EAAWwd,iBAChCxd,EAAWzW,OAAOqyB,qBAClB5b,EAAWzW,OAAOkyB,gBAClBzb,EAAWzW,OAAOmyB,qBAGhC2B,EAAMrD,OACDvtB,SAGL,MAAMoxB,EAAa,SAAU/oC,MAAMygB,UAAU,yCACxC3c,KAAK,CAACqI,IAAQuF,GAAM,GAAGA,EAAEtF,wBAE9BiL,EAAS6T,EAAWwd,iBAAmBxd,EAAWzW,OAAOsyB,uBACzDgC,EAAW/D,QACNpuB,OAAO,QACP/F,KAAK,QAAS,oCACd6C,MAAMq1B,GACNl4B,KAAK,MAAOa,GAAM,GAAGwZ,EAAWmS,aAAa3rB,iBAC7Cb,KAAK,KAAMqa,EAAWzW,OAAOqyB,sBAC7Bj2B,KAAK,KAAMqa,EAAWzW,OAAOqyB,sBAC7Bj2B,KAAK,SAAUa,GAAMA,EAAEo2B,cAActwB,QACrC3G,KAAK,SAAUwG,GACfxG,KAAK,KAAMa,GAAMA,EAAEo2B,cAAchlC,QACjC+N,KAAK,KAAMa,IAAQA,EAAEw2B,MAAQ,GAAKhd,EAAWwd,mBAGlDK,EAAW7D,OACNvtB,YAIba,EAAU0sB,OACLvtB,SAGL3X,KAAKwW,IAAI4Q,MACJtQ,GAAG,uBAAwB1D,GAAYpT,KAAKmR,OAAOyM,KAAK,kBAAmBxK,GAAS,KACpFzT,KAAKK,KAAKmlC,eAAejE,KAAKlhC,OAGvC,oBAAoB48B,GAChB,MAAMoM,EAAehpC,KAAKgjC,uBAAuBpG,EAAQ94B,MACnDmlC,EAAY,SAAU,IAAID,KAAgBvyB,OAAOgxB,UACvD,MAAO,CACHhI,MAAOz/B,KAAKmR,OAAOuY,QAAQkT,EAAQ94B,KAAKhB,OACxC48B,MAAO1/B,KAAKmR,OAAOuY,QAAQkT,EAAQ94B,KAAKf,KACxC48B,MAAOsJ,EAAUl2B,EACjB6sB,MAAOqJ,EAAUl2B,EAAIk2B,EAAU5xB,SCpX3C,MAAM,GAAiB,CACnBE,MAAO,CACHwuB,KAAM,OACN,eAAgB,OAEpBzJ,YAAa,cACb/M,OAAQ,CAAE1f,MAAO,KACjBmb,OAAQ,CAAEnb,MAAO,IAAKob,KAAM,GAC5BoZ,cAAe,GASnB,MAAM6E,WAAanM,GASf,YAAYtoB,GAER,IADAA,EAASf,EAAMe,EAAQ,KACZmoB,QACP,MAAM,IAAIv8B,MAAM,2DAEpBgG,SAASjF,WAMb,SAEI,MAAMkhB,EAAQtiB,KAAKmR,OACbg4B,EAAUnpC,KAAKyU,OAAO8a,OAAO1f,MAC7Bu5B,EAAUppC,KAAKyU,OAAOuW,OAAOnb,MAG7B2I,EAAYxY,KAAKwW,IAAI4Q,MACtB3G,UAAU,2BACV3c,KAAK,CAAC9D,KAAK8D,OAQhB,IAAI0iC,EALJxmC,KAAKkR,KAAOsH,EAAUwsB,QACjBpuB,OAAO,QACP/F,KAAK,QAAS,sBAInB,MAAM6Y,EAAUpH,EAAe,QACzBid,EAAUjd,EAAM,IAAItiB,KAAKyU,OAAOuW,OAAOC,cAGzCub,EAFAxmC,KAAKyU,OAAO8C,MAAMwuB,MAAmC,SAA3B/lC,KAAKyU,OAAO8C,MAAMwuB,KAErC,SACFv/B,GAAGkL,IAAOgY,EAAQhY,EAAEy3B,MACpBE,IAAI9J,EAAQ,IACZ/W,IAAI9W,IAAO6tB,EAAQ7tB,EAAE03B,MAGnB,SACF5iC,GAAGkL,IAAOgY,EAAQhY,EAAEy3B,MACpBp2B,GAAGrB,IAAO6tB,EAAQ7tB,EAAE03B,MACpB7C,MAAM,EAAGvmC,KAAKyU,OAAO6nB,cAI9B9jB,EAAU9E,MAAM1T,KAAKkR,MAChBL,KAAK,IAAK21B,GACV7mC,KAAKuX,GAAalX,KAAKyU,OAAO8C,OAGnCiB,EAAU0sB,OACLvtB,SAUT,iBAAiBuB,EAAQ9F,EAAS0f,GAC9B,OAAO9yB,KAAK0rB,oBAAoBxS,EAAQ4Z,GAG5C,oBAAoB5Z,EAAQ4Z,GAExB,QAAqB,IAAV5Z,IAA0BjL,EAASE,WAAWrM,SAASoX,GAC9D,MAAM,IAAI7Y,MAAM,kBAEpB,QAAoD,IAAzCL,KAAKo0B,YAAY+M,aAAajoB,GACrC,OAAOlZ,UAEU,IAAV8yB,IACPA,GAAS,GAIb9yB,KAAKm9B,gBAAgBjkB,GAAU4Z,EAG/B,IAAIwW,EAAa,qBAUjB,OATAnqC,OAAOyB,KAAKZ,KAAKm9B,iBAAiBp4B,SAASwkC,IACnCvpC,KAAKm9B,gBAAgBoM,KACrBD,GAAc,uBAAuBC,QAG7CvpC,KAAKkR,KAAKL,KAAK,QAASy4B,GAGxBtpC,KAAKmR,OAAOyM,KAAK,kBAAkB,GAC5B5d,MAOf,MAAMwpC,GAA4B,CAC9BjyB,MAAO,CACH,OAAU,UACV,eAAgB,MAChB,mBAAoB,aAExBqP,YAAa,aACb2I,OAAQ,CACJtE,KAAM,EACNoF,WAAW,GAEfrF,OAAQ,CACJC,KAAM,EACNoF,WAAW,GAEfwM,oBAAqB,WACrB3G,OAAQ,GAWZ,MAAMuT,WAAuB1M,GAWzB,YAAYtoB,GACRA,EAASf,EAAMe,EAAQ+0B,IAElB,CAAC,aAAc,YAAY1nC,SAAS2S,EAAOmS,eAC5CnS,EAAOmS,YAAc,cAEzBvgB,SAASjF,WAITpB,KAAK8D,KAAO,GAGhB,aAAasP,GAET,OAAOpT,KAAKga,YAMhB,SAEI,MAAMsI,EAAQtiB,KAAKmR,OAEbouB,EAAU,IAAIv/B,KAAKyU,OAAOuW,OAAOC,aAEjCuU,EAAW,IAAIx/B,KAAKyU,OAAOuW,OAAOC,cAIxC,GAAgC,eAA5BjrB,KAAKyU,OAAOmS,YACZ5mB,KAAK8D,KAAO,CACR,CAAE0C,EAAG8b,EAAc,SAAE,GAAIvP,EAAG/S,KAAKyU,OAAOyhB,QACxC,CAAE1vB,EAAG8b,EAAc,SAAE,GAAIvP,EAAG/S,KAAKyU,OAAOyhB,aAEzC,IAAgC,aAA5Bl2B,KAAKyU,OAAOmS,YAMnB,MAAM,IAAIvmB,MAAM,uEALhBL,KAAK8D,KAAO,CACR,CAAE0C,EAAGxG,KAAKyU,OAAOyhB,OAAQnjB,EAAGuP,EAAMkd,GAAU,IAC5C,CAAEh5B,EAAGxG,KAAKyU,OAAOyhB,OAAQnjB,EAAGuP,EAAMkd,GAAU,KAOpD,MAAMhnB,EAAYxY,KAAKwW,IAAI4Q,MACtB3G,UAAU,2BACV3c,KAAK,CAAC9D,KAAK8D,OAKV4lC,EAAY,CAACpnB,EAAM7N,OAAO6T,SAASjR,OAAQ,GAG3CmvB,EAAO,SACRhgC,GAAE,CAACkL,EAAGtN,KACH,MAAMoC,GAAK8b,EAAa,QAAE5Q,EAAK,GAC/B,OAAOrD,MAAM7H,GAAK8b,EAAa,QAAEle,GAAKoC,KAEzCuM,GAAE,CAACrB,EAAGtN,KACH,MAAM2O,GAAKuP,EAAMid,GAAS7tB,EAAK,GAC/B,OAAOrD,MAAM0E,GAAK22B,EAAUtlC,GAAK2O,KAIzC/S,KAAKkR,KAAOsH,EAAUwsB,QACjBpuB,OAAO,QACP/F,KAAK,QAAS,sBACd6C,MAAM8E,GACN3H,KAAK,IAAK21B,GACV7mC,KAAKuX,GAAalX,KAAKyU,OAAO8C,OAE9B5X,KAAKK,KAAKmlC,eAAejE,KAAKlhC,OAGnCwY,EAAU0sB,OACLvtB,SAGT,oBAAoBilB,GAChB,IACI,MAAMtO,EAAS,QAAStuB,KAAKwW,IAAIgV,UAAU/U,QACrCjQ,EAAI8nB,EAAO,GACXvb,EAAIub,EAAO,GACjB,MAAO,CAAEmR,MAAOj5B,EAAI,EAAGk5B,MAAOl5B,EAAI,EAAGm5B,MAAO5sB,EAAI,EAAG6sB,MAAO7sB,EAAI,GAChE,MAAOhC,GAEL,OAAO,OC5PnB,MAAM,GAAiB,CACnB44B,WAAY,GACZC,YAAa,SACb/M,oBAAqB,aACrBlkB,MAAO,UACPkxB,SAAU,CACNlR,QAAQ,EACRmR,WAAY,IAGZrK,MAAO,YACPC,MAAO,WACPC,MAAO,EACPC,MAAO,EACPmK,MAAO,EACPC,MAAO,GAEX5E,aAAc,EACdpa,OAAQ,CACJC,KAAM,GAEV1kB,SAAU,MAyBd,MAAM0jC,WAAgBlN,GAiBlB,YAAYtoB,IACRA,EAASf,EAAMe,EAAQ,KAIZqT,OAASzZ,MAAMoG,EAAOqT,MAAMoiB,WACnCz1B,EAAOqT,MAAMoiB,QAAU,GAE3B7jC,SAASjF,WAIb,oBAAoBw7B,GAChB,MAAMsD,EAAWlgC,KAAKmR,OAAOuY,QAAQkT,EAAQ94B,KAAK9D,KAAKyU,OAAO8a,OAAO1f,QAC/D0vB,EAAU,IAAIv/B,KAAKyU,OAAOuW,OAAOC,aACjCkV,EAAWngC,KAAKmR,OAAOouB,GAAS3C,EAAQ94B,KAAK9D,KAAKyU,OAAOuW,OAAOnb,QAChE85B,EAAa3pC,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOk1B,WAAY/M,EAAQ94B,MAC3EoyB,EAAS5nB,KAAKqE,KAAKg3B,EAAar7B,KAAKuZ,IAE3C,MAAO,CACH4X,MAAOS,EAAWhK,EAAQwJ,MAAOQ,EAAWhK,EAC5CyJ,MAAOQ,EAAWjK,EAAQ0J,MAAOO,EAAWjK,GAOpD,cACI,MAAMhL,EAAalrB,KAEb2pC,EAAaze,EAAW0T,yBAAyB1T,EAAWzW,OAAOk1B,WAAY,IAC/EO,EAAUhf,EAAWzW,OAAOqT,MAAMoiB,QAClCC,EAAe3uB,QAAQ0P,EAAWzW,OAAOqT,MAAMsiB,OAC/CC,EAAQ,EAAIH,EACZI,EAAQtqC,KAAKuW,YAAY9B,OAAO+C,MAAQxX,KAAKmR,OAAOsD,OAAO2T,OAAOle,KAAOlK,KAAKmR,OAAOsD,OAAO2T,OAAOje,MAAS,EAAI+/B,EAEhHK,EAAO,CAACC,EAAIC,KACd,MAAMC,GAAOF,EAAG35B,KAAK,KACf85B,EAAc,EAAIT,EAAY,EAAI57B,KAAKqE,KAAKg3B,GAClD,IAAIiB,EACAC,EACAV,IACAS,GAASH,EAAI55B,KAAK,MAClBg6B,EAAaX,EAAW,EAAI57B,KAAKqE,KAAKg3B,IAEV,UAA5Ba,EAAGjzB,MAAM,gBACTizB,EAAGjzB,MAAM,cAAe,OACxBizB,EAAG35B,KAAK,IAAK65B,EAAMC,GACfR,GACAM,EAAI55B,KAAK,KAAM+5B,EAAQC,KAG3BL,EAAGjzB,MAAM,cAAe,SACxBizB,EAAG35B,KAAK,IAAK65B,EAAMC,GACfR,GACAM,EAAI55B,KAAK,KAAM+5B,EAAQC,KAMnC3f,EAAW4f,YAAYpqB,MAAK,SAAUhP,EAAGtN,GACrC,MACM2mC,EAAK,SADD/qC,MAIV,IAFa+qC,EAAGl6B,KAAK,KACNk6B,EAAGt0B,OAAOyB,wBACRV,MAAQ0yB,EAAUI,EAAO,CACtC,MAAMU,EAAMb,EAAe,SAAUjf,EAAW+f,YAAYC,QAAQ9mC,IAAM,KAC1EmmC,EAAKQ,EAAIC,OAIjB9f,EAAW4f,YAAYpqB,MAAK,SAAUhP,EAAGtN,GACrC,MACM2mC,EAAK,SADD/qC,MAEV,GAAgC,QAA5B+qC,EAAGxzB,MAAM,eACT,OAEJ,IAAI4zB,GAAOJ,EAAGl6B,KAAK,KACnB,MAAMu6B,EAASL,EAAGt0B,OAAOyB,wBACnB8yB,EAAMb,EAAe,SAAUjf,EAAW+f,YAAYC,QAAQ9mC,IAAM,KAC1E8mB,EAAW4f,YAAYpqB,MAAK,WACxB,MAEM2qB,EADK,SADDrrC,MAEQyW,OAAOyB,wBACPkzB,EAAOlhC,KAAOmhC,EAAOnhC,KAAOmhC,EAAO7zB,MAAS,EAAI0yB,GAC9DkB,EAAOlhC,KAAOkhC,EAAO5zB,MAAS,EAAI0yB,EAAWmB,EAAOnhC,MACpDkhC,EAAOvwB,IAAMwwB,EAAOxwB,IAAMwwB,EAAOh0B,OAAU,EAAI6yB,GAC/CkB,EAAO/zB,OAAS+zB,EAAOvwB,IAAO,EAAIqvB,EAAWmB,EAAOxwB,MAEpD0vB,EAAKQ,EAAIC,GAETG,GAAOJ,EAAGl6B,KAAK,KACXs6B,EAAMC,EAAO5zB,MAAQ0yB,EAAUG,GAC/BE,EAAKQ,EAAIC,UAU7B,kBACIhrC,KAAKsrC,sBACL,MAAMpgB,EAAalrB,KAEnB,IAAKA,KAAKyU,OAAOqT,MAEb,OAEJ,MAAMoiB,EAAUlqC,KAAKyU,OAAOqT,MAAMoiB,QAClC,IAAIqB,GAAQ,EA8DZ,GA7DArgB,EAAW4f,YAAYpqB,MAAK,WAExB,MAAM9Z,EAAI5G,KACJ+qC,EAAK,SAAUnkC,GACf4hB,EAAKuiB,EAAGl6B,KAAK,KACnBqa,EAAW4f,YAAYpqB,MAAK,WAGxB,GAAI9Z,IAFM5G,KAGN,OAEJ,MAAMwrC,EAAK,SALDxrC,MAQV,GAAI+qC,EAAGl6B,KAAK,iBAAmB26B,EAAG36B,KAAK,eACnC,OAGJ,MAAMu6B,EAASL,EAAGt0B,OAAOyB,wBACnBmzB,EAASG,EAAG/0B,OAAOyB,wBAKzB,KAJkBkzB,EAAOlhC,KAAOmhC,EAAOnhC,KAAOmhC,EAAO7zB,MAAS,EAAI0yB,GAC9DkB,EAAOlhC,KAAOkhC,EAAO5zB,MAAS,EAAI0yB,EAAWmB,EAAOnhC,MACpDkhC,EAAOvwB,IAAMwwB,EAAOxwB,IAAMwwB,EAAOh0B,OAAU,EAAI6yB,GAC/CkB,EAAO/zB,OAAS+zB,EAAOvwB,IAAO,EAAIqvB,EAAWmB,EAAOxwB,KAEpD,OAEJ0wB,GAAQ,EAGR,MAAM9iB,EAAK+iB,EAAG36B,KAAK,KAEb46B,EAvCA,IAsCOL,EAAOvwB,IAAMwwB,EAAOxwB,IAAM,GAAK,GAE5C,IAAI6wB,GAAWljB,EAAKijB,EAChBE,GAAWljB,EAAKgjB,EAEpB,MAAMG,EAAQ,EAAI1B,EACZ2B,EAAQ3gB,EAAW/Z,OAAOsD,OAAO4C,OAAS6T,EAAW/Z,OAAOsD,OAAO2T,OAAOvN,IAAMqQ,EAAW/Z,OAAOsD,OAAO2T,OAAOtN,OAAU,EAAIovB,EACpI,IAAIvmB,EACA+nB,EAAWN,EAAO/zB,OAAS,EAAKu0B,GAChCjoB,GAAS6E,EAAKkjB,EACdA,GAAWljB,EACXmjB,GAAWhoB,GACJgoB,EAAWN,EAAOh0B,OAAS,EAAKu0B,IACvCjoB,GAAS8E,EAAKkjB,EACdA,GAAWljB,EACXijB,GAAW/nB,GAEX+nB,EAAWN,EAAO/zB,OAAS,EAAKw0B,GAChCloB,EAAQ+nB,GAAWljB,EACnBkjB,GAAWljB,EACXmjB,GAAWhoB,GACJgoB,EAAWN,EAAOh0B,OAAS,EAAKw0B,IACvCloB,EAAQgoB,GAAWljB,EACnBkjB,GAAWljB,EACXijB,GAAW/nB,GAEfonB,EAAGl6B,KAAK,IAAK66B,GACbF,EAAG36B,KAAK,IAAK86B,SAGjBJ,EAAO,CAEP,GAAIrgB,EAAWzW,OAAOqT,MAAMsiB,MAAO,CAC/B,MAAM0B,EAAiB5gB,EAAW4f,YAAYI,QAC9ChgB,EAAW+f,YAAYp6B,KAAK,MAAM,CAACa,EAAGtN,IACf,SAAU0nC,EAAe1nC,IAC1ByM,KAAK,OAI3B7Q,KAAKsrC,oBAAsB,KAC3B5zB,YAAW,KACP1X,KAAK+rC,oBACN,IAMf,SACI,MAAM7gB,EAAalrB,KACb0pB,EAAU1pB,KAAKmR,OAAgB,QAC/BouB,EAAUv/B,KAAKmR,OAAO,IAAInR,KAAKyU,OAAOuW,OAAOC,cAE7C+gB,EAAMpsC,OAAO69B,IAAI,OACjBwO,EAAMrsC,OAAO69B,IAAI,OAGvB,IAAIgH,EAAazkC,KAAK0kC,gBAgBtB,GAbAD,EAAW1/B,SAASzE,IAChB,IAAIkG,EAAIkjB,EAAQppB,EAAKN,KAAKyU,OAAO8a,OAAO1f,QACpCkD,EAAIwsB,EAAQj/B,EAAKN,KAAKyU,OAAOuW,OAAOnb,QACpCxB,MAAM7H,KACNA,GAAK,KAEL6H,MAAM0E,KACNA,GAAK,KAETzS,EAAK0rC,GAAOxlC,EACZlG,EAAK2rC,GAAOl5B,KAGZ/S,KAAKyU,OAAOo1B,SAASlR,QAAU8L,EAAWpjC,OAASrB,KAAKyU,OAAOo1B,SAASC,WAAY,CACpF,IAAI,MAAErK,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAEC,EAAK,MAAEmK,EAAK,MAAEC,GAAUhqC,KAAKyU,OAAOo1B,SAO/DpF,ECtRZ,SAAkC3gC,EAAM27B,EAAOC,EAAOqK,EAAOpK,EAAOC,EAAOoK,GACvE,IAAIkC,EAAa,GAEjB,MAAMF,EAAMpsC,OAAO69B,IAAI,OACjBwO,EAAMrsC,OAAO69B,IAAI,OAEvB,IAAI0O,EAAU,KACVC,EAAU,KACVC,EAAgB,GAEpB,SAASC,IACL,GAAID,EAAchrC,OAAQ,CAGtB,MAAMf,EAAO+rC,EAAc/9B,KAAKW,OAAOo9B,EAAchrC,OAAS,GAAK,IACnE6qC,EAAW3nC,KAAKjE,GAEpB6rC,EAAUC,EAAU,KACpBC,EAAgB,GAGpB,SAASE,EAAW/lC,EAAGuM,EAAGzS,GACtB6rC,EAAU3lC,EACV4lC,EAAUr5B,EACVs5B,EAAc9nC,KAAKjE,GAkCvB,OA/BAwD,EAAKiB,SAASzE,IACV,MAAMkG,EAAIlG,EAAK0rC,GACTj5B,EAAIzS,EAAK2rC,GAETO,EAAqBhmC,GAAKi5B,GAASj5B,GAAKk5B,GAAS3sB,GAAK4sB,GAAS5sB,GAAK6sB,EACtEt/B,EAAK29B,cAAgBuO,GAGrBF,IACAJ,EAAW3nC,KAAKjE,IACG,OAAZ6rC,EAEPI,EAAW/lC,EAAGuM,EAAGzS,GAIEgO,KAAKU,IAAIxI,EAAI2lC,IAAYpC,GAASz7B,KAAKU,IAAI+D,EAAIq5B,IAAYpC,EAG1EqC,EAAc9nC,KAAKjE,IAInBgsC,IACAC,EAAW/lC,EAAGuM,EAAGzS,OAK7BgsC,IAEOJ,ED4NcO,CAAwBhI,EALpB9H,SAAS8C,GAAS/V,GAAS+V,IAAUrT,IACrCuQ,SAAS+C,GAAShW,GAASgW,GAAStT,IAIgB2d,EAFpDpN,SAASiD,GAASL,GAASK,IAAUxT,IACrCuQ,SAASgD,GAASJ,GAASI,GAASvT,IAC2C4d,GAGpG,GAAIhqC,KAAKyU,OAAOqT,MAAO,CACnB,IAAI4kB,EACJ,MAAMpvB,EAAU4N,EAAWzW,OAAOqT,MAAMxK,SAAW,GACnD,GAAKA,EAAQjc,OAEN,CACH,MAAMqO,EAAO1P,KAAK6H,OAAOq5B,KAAKlhC,KAAMsd,GACpCovB,EAAajI,EAAW58B,OAAO6H,QAH/Bg9B,EAAajI,EAOjBzkC,KAAK2sC,aAAe3sC,KAAKwW,IAAI4Q,MACxB3G,UAAU,mBAAmBzgB,KAAKyU,OAAO3G,cACzChK,KAAK4oC,GAAah7B,GAAM,GAAGA,EAAE1R,KAAKyU,OAAOlO,oBAE9C,MAAMqmC,EAAc,iBAAiB5sC,KAAKyU,OAAO3G,aAC3C++B,EAAe7sC,KAAK2sC,aAAa3H,QAClCpuB,OAAO,KACP/F,KAAK,QAAS+7B,GAEf5sC,KAAK8qC,aACL9qC,KAAK8qC,YAAYnzB,SAGrB3X,KAAK8qC,YAAc9qC,KAAK2sC,aAAaj5B,MAAMm5B,GACtCj2B,OAAO,QACPtT,MAAMoO,GAAM6gB,GAAYrH,EAAWzW,OAAOqT,MAAMxkB,MAAQ,GAAIoO,EAAG1R,KAAK++B,qBAAqBrtB,MACzFb,KAAK,KAAMa,GACDA,EAAEs6B,GACH19B,KAAKqE,KAAKuY,EAAW0T,yBAAyB1T,EAAWzW,OAAOk1B,WAAYj4B,IAC5EwZ,EAAWzW,OAAOqT,MAAMoiB,UAEjCr5B,KAAK,KAAMa,GAAMA,EAAEu6B,KACnBp7B,KAAK,cAAe,SACpBlR,KAAKuX,GAAagU,EAAWzW,OAAOqT,MAAMvQ,OAAS,IAGpD2T,EAAWzW,OAAOqT,MAAMsiB,QACpBpqC,KAAKirC,aACLjrC,KAAKirC,YAAYtzB,SAErB3X,KAAKirC,YAAcjrC,KAAK2sC,aAAaj5B,MAAMm5B,GACtCj2B,OAAO,QACP/F,KAAK,MAAOa,GAAMA,EAAEs6B,KACpBn7B,KAAK,MAAOa,GAAMA,EAAEu6B,KACpBp7B,KAAK,MAAOa,GACFA,EAAEs6B,GACH19B,KAAKqE,KAAKuY,EAAW0T,yBAAyB1T,EAAWzW,OAAOk1B,WAAYj4B,IAC3EwZ,EAAWzW,OAAOqT,MAAMoiB,QAAU,IAE5Cr5B,KAAK,MAAOa,GAAMA,EAAEu6B,KACpBtsC,KAAKuX,GAAagU,EAAWzW,OAAOqT,MAAMsiB,MAAM7yB,OAAS,KAGlEvX,KAAK2sC,aAAazH,OACbvtB,cAGD3X,KAAK8qC,aACL9qC,KAAK8qC,YAAYnzB,SAEjB3X,KAAKirC,aACLjrC,KAAKirC,YAAYtzB,SAEjB3X,KAAK2sC,cACL3sC,KAAK2sC,aAAah1B,SAK1B,MAAMa,EAAYxY,KAAKwW,IAAI4Q,MACtB3G,UAAU,sBAAsBzgB,KAAKyU,OAAO3G,QAC5ChK,KAAK2gC,GAAa/yB,GAAMA,EAAE1R,KAAKyU,OAAOlO,YAMrC6N,EAAQ,WACTtB,MAAK,CAACpB,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOk1B,WAAYj4B,EAAGtN,KACxE0J,MAAK,CAAC4D,EAAGtN,IAAM+P,EAAanU,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOm1B,YAAal4B,EAAGtN,MAErFwoC,EAAc,iBAAiB5sC,KAAKyU,OAAO3G,OACjD0K,EAAUwsB,QACLpuB,OAAO,QACP/F,KAAK,QAAS+7B,GACd/7B,KAAK,MAAOa,GAAM1R,KAAKq9B,aAAa3rB,KACpCgC,MAAM8E,GACN3H,KAAK,aAZSa,GAAM,aAAaA,EAAEs6B,OAASt6B,EAAEu6B,QAa9Cp7B,KAAK,QAAQ,CAACa,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAOkE,MAAOjH,EAAGtN,KAC3EyM,KAAK,gBAAgB,CAACa,EAAGtN,IAAMpE,KAAK4+B,yBAAyB5+B,KAAKyU,OAAO2wB,aAAc1zB,EAAGtN,KAC1FyM,KAAK,IAAKuD,GAGfoE,EAAU0sB,OACLvtB,SAGD3X,KAAKyU,OAAOqT,QACZ9nB,KAAK8sC,cACL9sC,KAAKsrC,oBAAsB,EAC3BtrC,KAAK+rC,mBAKT/rC,KAAKwW,IAAI4Q,MACJtQ,GAAG,uBAAuB,KAEvB,MAAMi2B,EAAY,SAAU,gBAAiBpJ,QAC7C3jC,KAAKmR,OAAOyM,KAAK,kBAAmBmvB,GAAW,MAElDptC,KAAKK,KAAKmlC,eAAejE,KAAKlhC,OAoBvC,gBAAgBoT,GACZ,IAAIjK,EAAM,KACV,QAAsB,IAAXiK,EACP,MAAM,IAAI/S,MAAM,qDAapB,OAVQ8I,EAFqB,iBAAXiK,EACVpT,KAAKyU,OAAOlO,eAAoD,IAAjC6M,EAAQpT,KAAKyU,OAAOlO,UAC7C6M,EAAQpT,KAAKyU,OAAOlO,UAAUsG,gBACL,IAAjBuG,EAAY,GACpBA,EAAY,GAAEvG,WAEduG,EAAQvG,WAGZuG,EAAQvG,WAElB7M,KAAKmR,OAAOyM,KAAK,eAAgB,CAAErV,SAAUY,IAAO,GAC7CnJ,KAAKuW,YAAY6M,WAAW,CAAE7a,SAAUY,KAUvD,MAAM6jC,WAAwB/C,GAI1B,YAAYx1B,GACRpO,SAASjF,WAOTpB,KAAKitC,YAAc,GAUvB,eACI,MAAMC,EAASltC,KAAKyU,OAAO8a,OAAO1f,OAAS,IAErCs9B,EAAiBntC,KAAKyU,OAAO8a,OAAO4d,eAC1C,IAAKA,EACD,MAAM,IAAI9sC,MAAM,cAAcL,KAAKyU,OAAOxN,kCAG9C,MAAMmmC,EAAaptC,KAAK8D,KACnB6C,MAAK,CAACC,EAAGC,KACN,MAAMwmC,EAAKzmC,EAAEumC,GACPG,EAAKzmC,EAAEsmC,GACPI,EAAoB,iBAAPF,EAAmBA,EAAGG,cAAgBH,EACnDI,EAAoB,iBAAPH,EAAmBA,EAAGE,cAAgBF,EACzD,OAAQC,IAAOE,EAAM,EAAKF,EAAKE,GAAM,EAAI,KAOjD,OALAL,EAAWroC,SAAQ,CAAC2M,EAAGtN,KAGnBsN,EAAEw7B,GAAUx7B,EAAEw7B,IAAW9oC,KAEtBgpC,EASX,0BAGI,MAAMD,EAAiBntC,KAAKyU,OAAO8a,OAAO4d,eACpCD,EAASltC,KAAKyU,OAAO8a,OAAO1f,OAAS,IACrC69B,EAAmB,GACzB1tC,KAAK8D,KAAKiB,SAASzE,IACf,MAAMqtC,EAAWrtC,EAAK6sC,GAChB3mC,EAAIlG,EAAK4sC,GACTU,EAASF,EAAiBC,IAAa,CAACnnC,EAAGA,GACjDknC,EAAiBC,GAAY,CAACr/B,KAAK6J,IAAIy1B,EAAO,GAAIpnC,GAAI8H,KAAK8J,IAAIw1B,EAAO,GAAIpnC,OAG9E,MAAMqnC,EAAgB1uC,OAAOyB,KAAK8sC,GAGlC,OAFA1tC,KAAK8tC,uBAAuBD,GAErBH,EAUX,eAAeK,GAMX,IAAIC,GALJD,EAAcA,GAAe/tC,KAAKyU,QAKHkE,OAAS,GAIxC,GAHIjY,MAAMqD,QAAQiqC,KACdA,EAAeA,EAAa3iC,MAAM/K,GAAiC,oBAAxBA,EAAKu+B,mBAE/CmP,GAAgD,oBAAhCA,EAAanP,eAC9B,MAAM,IAAIx+B,MAAM,6EAEpB,OAAO2tC,EAwBX,uBAAuBH,GACnB,MAAMI,EAAcjuC,KAAKkuC,eAAeluC,KAAKyU,QAAQ0mB,WAC/CgT,EAAanuC,KAAKkuC,eAAeluC,KAAKwzB,cAAc2H,WAE1D,GAAIgT,EAAWtS,WAAWx6B,QAAU8sC,EAAWl8B,OAAO5Q,OAAQ,CAE1D,MAAM+sC,EAA6B,GACnCD,EAAWtS,WAAW92B,SAAS4oC,IAC3BS,EAA2BT,GAAY,KAEvCE,EAAc5pC,OAAO9D,GAAShB,OAAOM,UAAUC,eAAeC,KAAKyuC,EAA4BjuC,KAE/F8tC,EAAYpS,WAAasS,EAAWtS,WAEpCoS,EAAYpS,WAAagS,OAG7BI,EAAYpS,WAAagS,EAG7B,IAAIQ,EAOJ,IALIA,EADAF,EAAWl8B,OAAO5Q,OACT8sC,EAAWl8B,OAGX,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAExNo8B,EAAOhtC,OAASwsC,EAAcxsC,QACjCgtC,EAASA,EAAOrjC,OAAOqjC,GAE3BA,EAASA,EAAO78B,MAAM,EAAGq8B,EAAcxsC,QACvC4sC,EAAYh8B,OAASo8B,EAUzB,SAASrP,EAAWh9B,GAChB,IAAK,CAAC,IAAK,KAAM,MAAMF,SAASk9B,GAC5B,MAAM,IAAI3+B,MAAM,gCAEpB,MAAM6G,EAAWlF,EAAOkF,UAAY,OACpC,IAAK,CAAC,OAAQ,SAAU,SAASpF,SAASoF,GACtC,MAAM,IAAI7G,MAAM,yBAGpB,MAAMiuC,EAAiBtuC,KAAKitC,YAC5B,IAAKqB,IAAmBnvC,OAAOyB,KAAK0tC,GAAgBjtC,OAChD,MAAO,GAGX,GAAkB,MAAd29B,EACA,MAAO,GAGX,GAAkB,MAAdA,EAAmB,CAEnB,MAAMqP,EAASruC,KAAKkuC,eAAeluC,KAAKyU,QAClC85B,EAAkBF,EAAOlT,WAAWU,YAAc,GAClD2S,EAAcH,EAAOlT,WAAWlpB,QAAU,GAEhD,OAAO9S,OAAOyB,KAAK0tC,GAAgB1pC,KAAI,CAAC+oC,EAAUnwB,KAC9C,MAAMowB,EAASU,EAAeX,GAC9B,IAAIc,EAEJ,OAAQvnC,GACR,IAAK,OACDunC,EAAOb,EAAO,GACd,MACJ,IAAK,SAGD,MAAM/+B,EAAO++B,EAAO,GAAKA,EAAO,GAChCa,EAAOb,EAAO,IAAe,IAAT/+B,EAAaA,EAAO++B,EAAO,IAAM,EACrD,MACJ,IAAK,QACDa,EAAOb,EAAO,GAGlB,MAAO,CACHpnC,EAAGioC,EACHnrC,KAAMqqC,EACNp2B,MAAO,CACH,KAAQi3B,EAAYD,EAAgB/iC,QAAQmiC,KAAc,gBAO9E,yBAGI,OAFA3tC,KAAK8D,KAAO9D,KAAK0uC,eACjB1uC,KAAKitC,YAAcjtC,KAAK2uC,0BACjB3uC,MEtpBf,MAAM,GAAW,IAAIa,EACrB,IAAK,IAAKV,EAAM2N,KAAS3O,OAAO4O,QAAQ,GACpC,GAAStM,IAAItB,EAAM2N,GAIvB,YCCM8gC,GAAwB,MAKxBC,GAA+B,CACjC5+B,UAAW,CAAE,MAAS,SACtBsxB,UAAU,EACVprB,KAAM,CAAE24B,GAAI,CAAC,cAAe,aAC5B/3B,KAAM,CAAEurB,IAAK,CAAC,gBAAiB,eAC/BzrB,KAAM,4iBAUJk4B,GAA0C,WAG5C,MAAMztC,EAAO4S,EAAS26B,IAMtB,OALAvtC,EAAKuV,MAAQ,sZAKNvV,EATqC,GAY1C0tC,GAAyB,CAC3BzN,UAAU,EACVprB,KAAM,CAAE24B,GAAI,CAAC,cAAe,aAC5B/3B,KAAM,CAAEurB,IAAK,CAAC,gBAAiB,eAC/BzrB,KAAM,g+BAYJo4B,GAA0B,CAC5Bh/B,UAAW,CAAE,MAAS,QAAS,QAAW,WAC1CsxB,UAAU,EACVprB,KAAM,CAAE24B,GAAI,CAAC,cAAe,aAC5B/3B,KAAM,CAAEurB,IAAK,CAAC,gBAAiB,eAC/BzrB,KAAM,6jBAQJq4B,GAA0B,CAC5Bj/B,UAAW,CAAE,OAAU,UACvBsxB,UAAU,EACVprB,KAAM,CAAE24B,GAAI,CAAC,cAAe,aAC5B/3B,KAAM,CAAEurB,IAAK,CAAC,gBAAiB,eAE/BzrB,KAAM,waAiBJs4B,GAAqB,CACvBloC,GAAI,eACJ6G,KAAM,kBACN2L,IAAK,eACLmN,YAAa,aACbsP,OAAQ0Y,IAQNQ,GAAoB,CACtBn/B,UAAW,CAAE,OAAU,UACvBhJ,GAAI,aACJ6G,KAAM,OACN2L,IAAK,gBACL/W,OAAQ,CAAC,gCAAiC,oCAC1CyoB,QAAS,EACT5T,MAAO,CACH,OAAU,UACV,eAAgB,SAEpBgY,OAAQ,CACJ1f,MAAO,iCAEXmb,OAAQ,CACJC,KAAM,EACNpb,MAAO,mCACPZ,MAAO,EACPiqB,QAAS,MASXmW,GAA4B,CAC9Bp/B,UAAW,CAAE,MAAS,QAAS,GAAM,MACrChJ,GAAI,qBACJ6G,KAAM,UACN2L,IAAK,cACL/W,OAAQ,CAAC,8BAA+B,+BAAgC,iCAAkC,kDAAmD,iCAAkC,yBAA0B,6BACzN6D,SAAU,8BACVsjC,SAAU,CACNlR,QAAQ,GAEZiR,YAAa,CACT/K,eAAgB,KAChBhvB,MAAO,4BACPsrB,WAAY,CACRE,YAAa,EACbn4B,KAAM,UACN03B,KAAM,WAGd+O,WAAY,CACR9K,eAAgB,KAChBhvB,MAAO,4BACPsrB,WAAY,CACRE,YAAa,EACbn4B,KAAM,GACN03B,KAAM,KAGdjiB,MAAO,CACH,CACIkmB,eAAgB,KAChBhvB,MAAO,4BACPsrB,WAAY,CACRE,YAAa,EACbn4B,KAAM,YAGd,CACI27B,eAAgB,gBAChBhvB,MAAO,yBACPsrB,WAAY,CACRI,OAAQ,CAAC,EAAG,GAAK,GAAK,GAAK,IAE3BtpB,OAAQ,CAAC,mBAAoB,oBAAqB,qBAAsB,oBAAqB,sBAGrG,WAEJgS,OAAQ,CACJ,CAAE7P,MAAO,UAAWuE,MAAO,UAAW7F,KAAM,GAAIgV,MAAO,aAAcxL,MAAO,yBAC5E,CAAElI,MAAO,SAAUuE,MAAO,mBAAoB7F,KAAM,GAAIgV,MAAO,iBAAkBxL,MAAO,yBACxF,CAAElI,MAAO,SAAUuE,MAAO,oBAAqB7F,KAAM,GAAIgV,MAAO,iBAAkBxL,MAAO,yBACzF,CAAElI,MAAO,SAAUuE,MAAO,qBAAsB7F,KAAM,GAAIgV,MAAO,iBAAkBxL,MAAO,yBAC1F,CAAElI,MAAO,SAAUuE,MAAO,oBAAqB7F,KAAM,GAAIgV,MAAO,iBAAkBxL,MAAO,yBACzF,CAAElI,MAAO,SAAUuE,MAAO,mBAAoB7F,KAAM,GAAIgV,MAAO,iBAAkBxL,MAAO,yBACxF,CAAElI,MAAO,SAAUuE,MAAO,UAAW7F,KAAM,GAAIgV,MAAO,aAAcxL,MAAO,0BAE/EwL,MAAO,KACPqD,QAAS,EACToE,OAAQ,CACJ1f,MAAO,gCAEXmb,OAAQ,CACJC,KAAM,EACNpb,MAAO,iCACPZ,MAAO,EACPmqB,aAAc,GACdC,WAAY,CAAC,EAAG,KAEpByD,UAAW,CACPphB,YAAa,CACT,CAAEmoB,OAAQ,MAAO3qB,OAAQ,gBAE7ByC,WAAY,CACR,CAAEkoB,OAAQ,QAAS3qB,OAAQ,gBAE/B0C,QAAS,CACL,CAAEioB,OAAQ,SAAU3qB,OAAQ,WAAY2pB,WAAW,KAG3DjG,QAAS1oB,EAAS26B,KAQhBS,GAAwB,CAC1Br/B,UAAW,CAAE,OAAU,UACvBhJ,GAAI,kBACJ6G,KAAM,OACN2L,IAAK,kBACL/W,OAAQ,CAAC,8BAA+B,4BAA6B,8BAA+B,4BAA6B,0BAA2B,8BAA+B,8BAC3LoF,MAAO,CAAEu7B,KAAM,8BAA+BxF,QAAS,+BACvDt3B,SAAU,0BACV+W,QAAS,CACL,CAAEzN,MAAO,6BAA8BoN,SAAU,KAAMnd,MAAO,OAElE6Y,MAAO,CACH,CACI9I,MAAO,cACPgvB,eAAgB,KAChB1D,WAAY,CACRE,aAAa,EACbn4B,KAAM,YAGd,CACI2M,MAAO,cACPgvB,eAAgB,KAChB1D,WAAY,CACRE,aAAa,EACbn4B,KAAM,YAGd,CACI27B,eAAgB,gBAChB1D,WAAY,CACRlpB,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,cAItOsd,OAAQ,CACJ4W,OAAQ,8BACRE,OAAQ,+BAEZrb,OAAQ,CACJC,KAAM,EACNpb,MAAO,6BACPupB,aAAc,GACdC,WAAY,CAAC,EAAG,IAEpByD,UAAW,CACPphB,YAAa,CACT,CAAEmoB,OAAQ,MAAO3qB,OAAQ,gBAE7ByC,WAAY,CACR,CAAEkoB,OAAQ,QAAS3qB,OAAQ,gBAE/B0C,QAAS,CACL,CAAEioB,OAAQ,SAAU3qB,OAAQ,WAAY2pB,WAAW,KAG3DjG,QAAS1oB,EAASg7B,KAQhBK,GAAoC,WAEtC,IAAIjuC,EAAO4S,EAASm7B,IAKpB,OAJA/tC,EAAOoS,EAAM,CAAEzM,GAAI,4BAA6Bm+B,aAAc,IAAO9jC,GACrEA,EAAKs7B,QAAQ/lB,MAAQ,uMACrBvV,EAAK2O,UAAUu/B,QAAU,UACzBluC,EAAKoB,OAAO6B,KAAK,6BAA8B,8BAA+B,oCACvEjD,EAP+B,GAepCmuC,GAAuB,CACzBx/B,UAAW,CAAE,OAAU,UACvBhJ,GAAI,gBACJ6G,KAAM,mBACN2L,IAAK,SACLmwB,YAAa,SACbD,WAAY,GACZ9M,oBAAqB,WACrBt2B,SAAU,0BACV7D,OAAQ,CAAC,0BAA2B,kCAAmC,mCAAoC,oCAC3G6sB,OAAQ,CACJ1f,MAAO,yBACPs9B,eAAgB,mCAChBhU,aAAc,KACdC,aAAc,MAElBpO,OAAQ,CACJC,KAAM,EACNpb,MAAO,kCACPZ,MAAO,EACPmqB,aAAc,KAElBzgB,MAAO,CAAC,CACJ9I,MAAO,mCACPgvB,eAAgB,kBAChB1D,WAAY,CACRU,WAAY,GACZ5pB,OAAQ,GACRupB,WAAY,aAGpB4J,aAAc,GACdxI,QAAS,CACL2E,UAAU,EACVprB,KAAM,CAAE24B,GAAI,CAAC,cAAe,aAC5B/3B,KAAM,CAAEurB,IAAK,CAAC,gBAAiB,eAC/BzrB,KAAM,CACF,8EACA,uFACA,iGACF9P,KAAK,KAEX+1B,UAAW,CACPphB,YAAa,CACT,CAAEmoB,OAAQ,MAAO3qB,OAAQ,gBAE7ByC,WAAY,CACR,CAAEkoB,OAAQ,QAAS3qB,OAAQ,gBAE/B0C,QAAS,CACL,CAAEioB,OAAQ,SAAU3qB,OAAQ,WAAY2pB,WAAW,KAG3D/a,MAAO,CACHxkB,KAAM,uCACN4mC,QAAS,EACTE,MAAO,CACH7yB,MAAO,CACH,eAAgB,MAChB,OAAU,UACV,mBAAoB,YAG5B+F,QAAS,CACL,CACIzN,MAAO,kCACPoN,SAAU,KACVnd,MAAO,KAGfyX,MAAO,CACH,YAAa,OACb,cAAe,OACf,KAAQ,aASdm4B,GAAc,CAChBz/B,UAAW,CAAE,KAAQ,OAAQ,WAAc,cAC3ChJ,GAAI,QACJ6G,KAAM,QACN2L,IAAK,QACL/W,OAAQ,CAAC,yBAA0B,gCACnC6D,SAAU,UACVu2B,UAAW,CACPphB,YAAa,CACT,CAAEmoB,OAAQ,MAAO3qB,OAAQ,gBAE7ByC,WAAY,CACR,CAAEkoB,OAAQ,QAAS3qB,OAAQ,gBAE/B0C,QAAS,CACL,CAAEioB,OAAQ,SAAU3qB,OAAQ,WAAY2pB,WAAW,KAG3DjG,QAAS1oB,EAAS86B,KAUhBW,GAAuBj8B,EAAM,CAC/B4J,QAAS,CACL,CACIzN,MAAO,YACPoN,SAAU,KAKVnd,MAAO,CACH,iBACA,YAAa,YAAa,YAAa,YACvC,YAAa,YAAa,YAAa,YACvC,OACA,UAAW,cAIxBoU,EAASw7B,KAONE,GAA2B,CAE7B3/B,UAAW,CAAE,MAAS,QAAS,QAAW,WAC1ChJ,GAAI,qBACJ6G,KAAM,mBACN2L,IAAK,cACLlT,SAAU,8BACVgpB,OAAQ,CACJ1f,MAAO,gCAEX8I,MAAO,UACPjW,OAAQ,CACJ,8BAA+B,iCAAkC,+BACjE,gCAAiC,6BAA8B,8BAC/D,mCAAoC,6BAExC4a,QAAS,CAEL,CAAEzN,MAAO,6BAA8BoN,SAAU,KAAMnd,MAAO,MAC9D,CAAE+P,MAAO,mCAAoCoN,SAAU,IAAKnd,MAAO8uC,KAEvE9R,UAAW,CACPphB,YAAa,CACT,CAAEmoB,OAAQ,MAAO3qB,OAAQ,gBAE7ByC,WAAY,CACR,CAAEkoB,OAAQ,QAAS3qB,OAAQ,gBAE/B0C,QAAS,CACL,CAAEioB,OAAQ,SAAU3qB,OAAQ,WAAY2pB,WAAW,KAG3DjG,QAAS1oB,EAAS+6B,IAClBpS,oBAAqB,OAanBgT,GAA0B,CAE5B/hC,KAAM,YACN2L,IAAK,gBACLvS,SAAU,QACVyR,MAAO,OACP+F,YAAa,kBACbmH,eAAe,EACfjH,aAAc,yBACdhC,kBAAmB,mBACnBgJ,YAAa,SAIbH,QAAS,CACL,CAAEV,aAAc,gBAAiBjlB,MAAO,OACxC,CAAEilB,aAAc,MAAOjlB,MAAO,OAC9B,CAAEilB,aAAc,MAAOjlB,MAAO,OAC9B,CAAEilB,aAAc,MAAOjlB,MAAO,OAC9B,CAAEilB,aAAc,MAAOjlB,MAAO,OAC9B,CAAEilB,aAAc,MAAOjlB,MAAO,SAShCgwC,GAAqB,CACvBhiC,KAAM,kBACN2L,IAAK,cACLmD,kBAAmB,4BACnB1V,SAAU,QACVyR,MAAO,OAEP+F,YAAa,YACbE,aAAc,6BACdlC,WAAY,QACZ8I,4BAA6B,sBAC7BC,QAAS,CACL,CACIV,aAAc,eACdW,QAAS,CACLpI,QAAS,SAenByyB,GAAyB,CAC3B7pB,QAAS,CACL,CACIpY,KAAM,eACN5G,SAAU,QACVyR,MAAO,MACPK,eAAgB,OAEpB,CACIlL,KAAM,gBACN5G,SAAU,QACV8R,eAAgB,UAEpB,CACIlL,KAAM,kBACN5G,SAAU,QACV8R,eAAgB,QAChBzB,MAAO,CAAE,cAAe,aAU9By4B,GAAwB,CAE1B9pB,QAAS,CACL,CACIpY,KAAM,QACN4L,MAAO,YACPyC,SAAU,4FACVjV,SAAU,QAEd,CACI4G,KAAM,WACN5G,SAAU,QACV8R,eAAgB,OAEpB,CACIlL,KAAM,eACN5G,SAAU,QACV8R,eAAgB,WAUtBi3B,GAA+B,WAEjC,MAAM3uC,EAAO4S,EAAS87B,IAEtB,OADA1uC,EAAK4kB,QAAQ3hB,KAAK2P,EAAS27B,KACpBvuC,EAJ0B,GAY/B4uC,GAA0B,WAE5B,MAAM5uC,EAAO4S,EAAS87B,IA0CtB,OAzCA1uC,EAAK4kB,QAAQ3hB,KACT,CACIuJ,KAAM,eACNqV,KAAM,IACNzE,YAAa,KACbxX,SAAU,QACV8R,eAAgB,OACjB,CACClL,KAAM,eACNqV,KAAM,IACNzE,YAAa,IACbxX,SAAU,QACV8R,eAAgB,UAEpB,CACIlL,KAAM,cACNqV,KAAM,GACNjc,SAAU,QACV8R,eAAgB,UAEpB,CACIlL,KAAM,cACNqV,MAAO,GACPjc,SAAU,QACV8R,eAAgB,UAEpB,CACIlL,KAAM,eACNqV,MAAO,IACPzE,YAAa,IACbxX,SAAU,QACV8R,eAAgB,UAEpB,CACIlL,KAAM,eACNqV,MAAO,IACPzE,YAAa,KACbxX,SAAU,QACV8R,eAAgB,UAGjB1X,EA5CqB,GA0D1B6uC,GAAoB,CACtBlpC,GAAI,cACJwS,IAAK,cACL0O,WAAY,IACZ9Q,OAAQ,IACR+Q,OAAQ,CAAEvN,IAAK,GAAI1Q,MAAO,GAAI2Q,OAAQ,GAAI5Q,KAAM,IAChD0hB,aAAc,qBACdrJ,QAAS,WACL,MAAMjhB,EAAO4S,EAAS67B,IAKtB,OAJAzuC,EAAK4kB,QAAQ3hB,KAAK,CACduJ,KAAM,gBACN5G,SAAU,UAEP5F,EANF,GAQTinB,KAAM,CACF/hB,EAAG,CACCshB,MAAO,0BACP8J,aAAc,GACdO,YAAa,SACb5B,OAAQ,SAEZ/H,GAAI,CACAV,MAAO,iBACP8J,aAAc,IAElBnJ,GAAI,CACAX,MAAO,6BACP8J,aAAc,KAGtB3N,OAAQ,CACJ2C,YAAa,WACbC,OAAQ,CAAErgB,EAAG,GAAIuM,EAAG,IACpBgH,QAAQ,GAEZ4M,YAAa,CACT+B,wBAAwB,EACxBC,uBAAuB,EACvBC,wBAAwB,EACxBC,wBAAwB,EACxBC,gBAAgB,EAChBC,UAAU,GAEdtM,YAAa,CACTvI,EAASi7B,IACTj7B,EAASk7B,IACTl7B,EAASm7B,MAQXe,GAAwB,CAC1BnpC,GAAI,kBACJwS,IAAK,kBACL0O,WAAY,IACZ9Q,OAAQ,IACR+Q,OAAQ,CAAEvN,IAAK,GAAI1Q,MAAO,GAAI2Q,OAAQ,GAAI5Q,KAAM,IAChD0hB,aAAc,qBACdrJ,QAASrO,EAAS67B,IAClBxnB,KAAM,CACF/hB,EAAG,CACCshB,MAAO,0BACP8J,aAAc,GACdO,YAAa,SACb5B,OAAQ,SAEZ/H,GAAI,CACAV,MAAO,QACP8J,aAAc,GACdvT,QAAQ,IAGhBsI,YAAa,CACT+B,wBAAwB,EACxBC,uBAAuB,EACvBC,wBAAwB,EACxBE,gBAAgB,EAChBC,UAAU,GAEdtM,YAAa,CACTvI,EAASo7B,MAQXe,GAA4B,WAC9B,IAAI/uC,EAAO4S,EAASi8B,IAsDpB,OArDA7uC,EAAOoS,EAAM,CACTzM,GAAI,qBACJgJ,UAAW,CAAE,MAAS,QAAS,GAAM,KAAM,QAAW,YACvD3O,GAEHA,EAAKihB,QAAQ2D,QAAQ3hB,KAAK,CACtBuJ,KAAM,kBACN5G,SAAU,QACVyR,MAAO,OAEP+F,YAAa,qBACbE,aAAc,uCAEdlC,WAAY,4BACZ8I,4BAA6B,8BAE7BC,QAAS,CACL,CAEIV,aAAc,uBACdW,QAAS,CACLoC,MAAO,CACHxkB,KAAM,kCACN4mC,QAAS,EACTE,MAAO,CACH7yB,MAAO,CACH,eAAgB,MAChB,OAAU,UACV,mBAAoB,YAG5B+F,QAAS,CAGL,CAAEzN,MAAO,8BAA+BoN,SAAU,KAAMnd,MAAO,MAC/D,CAAE+P,MAAO,mCAAoCoN,SAAU,IAAKnd,MAAO8uC,IACnE,CAAE/+B,MAAO,yBAA0BoN,SAAU,IAAKnd,MAAO,KAE7DyX,MAAO,CACH,YAAa,OACb,cAAe,OACf,KAAQ,iBAOhCjW,EAAKmb,YAAc,CACfvI,EAASi7B,IACTj7B,EAASk7B,IACTl7B,EAASq7B,KAENjuC,EAvDuB,GA8D5BgvC,GAAc,CAChBrpC,GAAI,QACJwS,IAAK,QACL0O,WAAY,IACZ9Q,OAAQ,IACR+Q,OAAQ,CAAEvN,IAAK,GAAI1Q,MAAO,GAAI2Q,OAAQ,GAAI5Q,KAAM,IAChDqe,KAAM,GACN5B,YAAa,CACT+B,wBAAwB,EACxBI,gBAAgB,EAChBC,UAAU,GAEdxG,QAAS,WACL,MAAMjhB,EAAO4S,EAAS67B,IAStB,OARAzuC,EAAK4kB,QAAQ3hB,KACT,CACIuJ,KAAM,iBACN5G,SAAU,QACVwX,YAAa,UAEjBxK,EAAS47B,KAENxuC,EAVF,GAYTmb,YAAa,CACTvI,EAASy7B,MAQXY,GAAe,CACjBtpC,GAAI,SACJwS,IAAK,SACL0O,WAAY,IACZ9Q,OAAQ,IACR+Q,OAAQ,CAAEvN,IAAK,GAAI1Q,MAAO,GAAI2Q,OAAQ,IAAK5Q,KAAM,IACjD0hB,aAAc,qBACdrD,KAAM,CACF/hB,EAAG,CACCgqB,MAAO,CACHjZ,MAAO,CACH,cAAe,OACf,YAAa,OACb,cAAe,SAEnBnH,UAAW,aACXlJ,SAAU,SAGlBshB,GAAI,CACAV,MAAO,iBACP8J,aAAc,KAGtBnV,YAAa,CACTvI,EAASi7B,IACTj7B,EAASu7B,MASXe,GAA2B,CAC7BvpC,GAAI,oBACJwS,IAAK,cACL0O,WAAY,GACZ9Q,OAAQ,GACR+Q,OAAQ,CAAEvN,IAAK,GAAI1Q,MAAO,GAAI2Q,OAAQ,GAAI5Q,KAAM,IAChD0hB,aAAc,qBACdrJ,QAASrO,EAAS67B,IAClBxnB,KAAM,CACF/hB,EAAG,CAAE+pB,OAAQ,QAASlS,QAAQ,IAElCsI,YAAa,CACT+B,wBAAwB,EACxBI,gBAAgB,EAChBC,UAAU,GAEdtM,YAAa,CACTvI,EAAS07B,MAaXa,GAA4B,CAC9BjuC,MAAO,GACPgV,MAAO,IACP2b,mBAAmB,EACnB1P,iBAAkB,IAClBD,iBAAkB,IAClBjB,QAAS0tB,GACT7mB,OAAQ,CACJlV,EAASi8B,IACTj8B,EAASo8B,MASXI,GAA2B,CAC7BluC,MAAO,GACPgV,MAAO,IACP2b,mBAAmB,EACnB1P,iBAAkB,IAClBD,iBAAkB,IAClBjB,QAAS0tB,GACT7mB,OAAQ,CACJonB,GACAH,GACAC,KASFK,GAAuB,CACzBn5B,MAAO,IACP2b,mBAAmB,EACnB5Q,QAASytB,GACT5mB,OAAQ,CACJlV,EAASq8B,IACT78B,EAAM,CACF2D,OAAQ,IACR+Q,OAAQ,CAAEtN,OAAQ,IAClByN,KAAM,CACF/hB,EAAG,CACCshB,MAAO,0BACP8J,aAAc,GACdO,YAAa,SACb5B,OAAQ,WAGjBrc,EAASo8B,MAEhBld,aAAa,GAQXwd,GAAuB,CACzBpuC,MAAO,GACPgV,MAAO,IACP2b,mBAAmB,EACnB1P,iBAAkB,IAClBD,iBAAkB,IAClBjB,QAASrO,EAAS87B,IAClB5mB,OAAQ,CACJlV,EAASk8B,IACT,WAGI,MAAM9uC,EAAOnC,OAAOqC,OAChB,CAAE6V,OAAQ,KACVnD,EAASo8B,KAEPnc,EAAQ7yB,EAAKmb,YAAY,GAC/B0X,EAAMrsB,MAAQ,CAAEu7B,KAAM,YAAaxF,QAAS,aAC5C,MAAMgT,EAAe,CACjB,CACIhhC,MAAO,cACPgvB,eAAgB,KAChB1D,WAAY,CACRE,aAAa,EACbn4B,KAAM,YAGd,CACI2M,MAAO,cACPgvB,eAAgB,KAChB1D,WAAY,CACRE,aAAa,EACbn4B,KAAM,YAGd,WAIJ,OAFAixB,EAAMxb,MAAQk4B,EACd1c,EAAMuS,OAASmK,EACRvvC,EA9BX,KAoCKs7B,GAAU,CACnBkU,qBAAsBjC,GACtBkC,gCAAiChC,GACjCiC,eAAgBhC,GAChBiC,gBAAiBhC,GACjBiC,gBAAiBhC,IAGRiC,GAAkB,CAC3BC,mBAAoBvB,GACpBC,uBAGSvtB,GAAU,CACnB8uB,eAAgBtB,GAChBuB,cAAetB,GACfc,qBAAsBb,GACtBsB,gBAAiBrB,IAGRhlB,GAAa,CACtBsmB,aAAcrC,GACdsC,YAAarC,GACbsC,oBAAqBrC,GACrB6B,gBAAiB5B,GACjBqC,4BAA6BpC,GAC7BqC,eAAgBnC,GAChBoC,MAAOnC,GACPoC,eAAgBnC,GAChBoC,mBAAoBnC,IAGXttB,GAAQ,CACjB0vB,YAAa7B,GACbe,gBAAiBd,GACjB6B,oBAAqB5B,GACrBwB,MAAOvB,GACP4B,OAAQ3B,GACRwB,mBAAoBvB,IAGX2B,GAAO,CAChBrB,qBAAsBL,GACtBwB,oBAAqBvB,GACrB0B,gBAAiBzB,GACjBO,gBAAiBN,ICz7BrB,MAAM,GAAW,IAjHjB,cAA6B7wC,EAEzB,IAAI+N,EAAM3N,EAAMc,EAAY,IACxB,IAAM6M,IAAQ3N,EACV,MAAM,IAAIE,MAAM,iGAIpB,IAAIiB,EAAO+E,MAAM/G,IAAIwO,GAAMxO,IAAIa,GAE/B,GADAmB,EAAOoS,EAAMzS,EAAWK,GACpBA,EAAK+wC,aAEL,cADO/wC,EAAK+wC,aACLn+B,EAAS5S,GAEpB,IAAI+R,EAAoB,GACK,iBAAlB/R,EAAK2O,UACZoD,EAAoB/R,EAAK2O,UACO,iBAAlB3O,EAAK2O,WAAyB9Q,OAAOyB,KAAKU,EAAK2O,WAAW5O,SAEpEgS,OADiC,IAA1B/R,EAAK2O,UAAUqD,QACFhS,EAAK2O,UAAUqD,QAEfhS,EAAK2O,UAAU9Q,OAAOyB,KAAKU,EAAK2O,WAAW,IAAIpD,YAG3EwG,GAAqBA,EAAkBhS,OAAS,IAAM,GAGtD,OAAO6S,EAFQf,EAAgB7R,EAAMA,EAAK2O,UAAWoD,IAazD,IAAIvF,EAAM3N,EAAMG,EAAMC,GAAW,GAC7B,KAAMuN,GAAQ3N,GAAQG,GAClB,MAAM,IAAID,MAAM,+DAEpB,GAAsB,iBAATC,EACT,MAAM,IAAID,MAAM,mDAGfL,KAAKI,IAAI0N,IACVzH,MAAM5E,IAAIqM,EAAM,IAAI/N,GAGxB,MAAMwgB,EAAOrM,EAAS5T,GACtB,OAAO+F,MAAM/G,IAAIwO,GAAMrM,IAAItB,EAAMogB,EAAMhgB,GAS3C,KAAKuN,GACD,IAAKA,EAAM,CACP,IAAIyP,EAAS,GACb,IAAK,IAAKzP,EAAMwkC,KAAatyC,KAAKC,OAC9Bsd,EAAOzP,GAAQwkC,EAASC,OAE5B,OAAOh1B,EAEX,OAAOlX,MAAM/G,IAAIwO,GAAMykC,OAQ3B,MAAMz+B,EAAeC,GACjB,OAAOL,EAAMI,EAAeC,GAQhC,cACI,OAAOS,KAAepT,WAQ1B,eACI,OAAO6T,KAAgB7T,WAQ3B,cACI,OAAOmU,KAAenU,aAW9B,IAAK,IAAK0M,EAAMC,KAAY5O,OAAO4O,QAAQ,GACvC,IAAK,IAAK5N,EAAM6B,KAAW7C,OAAO4O,QAAQA,GACtC,GAAStM,IAAIqM,EAAM3N,EAAM6B,GAKjC,YCjFA,MC/BMwwC,GAAY,CACdC,QAAO,EAEPv4B,SjBsPJ,SAAkB1H,EAAU8gB,EAAY7e,GACpC,QAAuB,IAAZjC,EACP,MAAM,IAAInS,MAAM,2CAIpB,IAAI8xC,EAsCJ,OAvCA,SAAU3/B,GAAUqE,KAAK,IAEzB,SAAUrE,GAAU7S,MAAK,SAASmrB,GAE9B,QAA+B,IAApBA,EAAOrU,OAAOxP,GAAmB,CACxC,IAAIyrC,EAAW,EACf,MAAQ,SAAU,OAAOA,KAAY/U,SACjC+U,IAEJ5nB,EAAOja,KAAK,KAAM,OAAO6hC,KAM7B,GAHAP,EAAO,IAAI9e,GAAKvI,EAAOrU,OAAOxP,GAAIqsB,EAAY7e,GAC9C09B,EAAK3mB,UAAYV,EAAOrU,YAEa,IAA1BqU,EAAOrU,OAAOk8B,cAAmE,IAAjC7nB,EAAOrU,OAAOk8B,QAAQC,OAAwB,CACrG,MAAMC,EAgClB,SAA4BrsC,GACxB,MACMssC,EAAS,+BACf,IAAIhrC,EAFc,yDAEIiI,KAAKvJ,GAC3B,GAAIsB,EAAO,CACP,GAAiB,MAAbA,EAAM,GAAY,CAClB,MAAM4lB,EAASsM,GAAoBlyB,EAAM,IACnCouB,EAAS8D,GAAoBlyB,EAAM,IACzC,MAAO,CACHjF,IAAIiF,EAAM,GACVhF,MAAO4qB,EAASwI,EAChBnzB,IAAK2qB,EAASwI,GAGlB,MAAO,CACHrzB,IAAKiF,EAAM,GACXhF,MAAOk3B,GAAoBlyB,EAAM,IACjC/E,IAAKi3B,GAAoBlyB,EAAM,KAK3C,GADAA,EAAQgrC,EAAO/iC,KAAKvJ,GAChBsB,EACA,MAAO,CACHjF,IAAIiF,EAAM,GACVZ,SAAU8yB,GAAoBlyB,EAAM,KAG5C,OAAO,KA5DsBirC,CAAmBjoB,EAAOrU,OAAOk8B,QAAQC,QAC9DzzC,OAAOyB,KAAKiyC,GAAc9tC,SAAQ,SAAS9F,GACvCkzC,EAAK3vC,MAAMvD,GAAO4zC,EAAa5zC,MAIvCkzC,EAAK37B,IAAM,SAAU,OAAO27B,EAAKlrC,MAC5B2P,OAAO,OACP/F,KAAK,UAAW,OAChBA,KAAK,QAAS,8BACdA,KAAK,KAAM,GAAGshC,EAAKlrC,UACnB4J,KAAK,QAAS,gBACdlR,KAAKuX,GAAai7B,EAAK19B,OAAO8C,OAEnC46B,EAAKvjB,gBACLujB,EAAKliB,iBAELkiB,EAAKl5B,aAEDqa,GACA6e,EAAKa,aAGNb,GiBjSPc,YDfJ,cAA0BlzC,EAKtB,YAAY8N,GACRxH,QAGArG,KAAKkzC,UAAYrlC,GAAY,EAYjC,IAAIoC,EAAW3P,EAAMC,GAAW,GAC5B,GAAIP,KAAKkzC,UAAU9yC,IAAI6P,GACnB,MAAM,IAAI5P,MAAM,iBAAiB4P,yCAGrC,GAAIA,EAAUnI,MAAM,iBAChB,MAAM,IAAIzH,MAAM,sGAAsG4P,KAE1H,GAAIvP,MAAMqD,QAAQzD,GAAO,CACrB,MAAOwN,EAAM2X,GAAWnlB,EACxBA,EAAON,KAAKkzC,UAAU3sB,OAAOzY,EAAM2X,GAMvC,OAHAnlB,EAAK4E,UAAY+K,EAEjB5J,MAAM5E,IAAIwO,EAAW3P,EAAMC,GACpBP,OCpBXmzC,SAAQ,EACRC,WAAU,GACVC,QAAO,GACPC,eAAc,GACdC,eAAc,GACdC,wBAAuB,EACvBC,QAAO,GAEP,uBAEI,OADAvyC,QAAQC,KAAK,wEACN,IAYTuyC,GAAoB,GAQ1BlB,GAAUmB,IAAM,SAASC,KAAW9yC,GAEhC,IAAI4yC,GAAkB5xC,SAAS8xC,GAA/B,CAMA,GADA9yC,EAAK2F,QAAQ+rC,IACiB,mBAAnBoB,EAAOC,QACdD,EAAOC,QAAQ51B,MAAM21B,EAAQ9yC,OAC1B,IAAsB,mBAAX8yC,EAGd,MAAM,IAAIvzC,MAAM,mFAFhBuzC,EAAO31B,MAAM,KAAMnd,GAIvB4yC,GAAkBnvC,KAAKqvC,KAI3B,a","file":"locuszoom.app.min.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default '0.13.4';\n","/**\n * @module\n * @private\n */\n\n/**\n * Base class for all registries.\n *\n * LocusZoom is plugin-extensible, and layouts are JSON-serializable objects that refer to desired features by name (not by class).\n * This is achieved through the use of a central registry that holds a reference to each possible feature.\n *\n * Each registry has some syntactical sugar to make it easier to, eg, modify layouts or create classes.\n * This class is documented solely so that those helper methods can be referenced.\n */\nclass RegistryBase {\n    constructor() {\n        this._items = new Map();\n    }\n\n    /**\n     * Return the registry member. If the registry stores classes, this returns the class, not the instance.\n     * @param {String} name\n     * @returns {Function}\n     */\n    get(name) {\n        if (!this._items.has(name)) {\n            throw new Error(`Item not found: ${name}`);\n        }\n        return this._items.get(name);\n    }\n\n    /**\n     * Add a new item to the registry\n     * @param {String} name The name of the item to add to the registry\n     * @param {*} item The item to be added (constructor, value, etc)\n     * @param {boolean} [override=false] Allow redefining an existing item?\n     * @return {*} The actual object as added to the registry\n     */\n    add(name, item, override = false) {\n        if (!override && this._items.has(name)) {\n            throw new Error(`Item ${name} is already defined`);\n        }\n        this._items.set(name, item);\n        return item;\n    }\n\n    /**\n     * Remove a datasource from the registry (if present)\n     * @param {String} name\n     * @returns {boolean} True if item removed, false if item was never present\n     */\n    remove(name) {\n        return this._items.delete(name);\n    }\n\n    /**\n     * Check whether the specified item is registered\n     * @param {String} name\n     * @returns {boolean}\n     */\n    has(name) {\n        return this._items.has(name);\n    }\n\n    /**\n     * Names of each allowed\n     * @returns {String[]}\n     */\n    list() {\n        return Array.from(this._items.keys());\n    }\n}\n\n/**\n * A specialized registry whose members are class constructors. Contains helper methods for creating instances\n *  and subclasses.\n * @ignore\n */\nclass ClassRegistry extends RegistryBase {\n    /**\n     * Create an instance of the specified class from the registry\n     * @param {String} name\n     * @param {*} args Any additional arguments to be passed to the constructor\n     * @returns {*}\n     */\n    create(name, ...args) {\n        const base = this.get(name);\n        return new base(...args);\n    }\n\n    /**\n     * Create a new child class for an item in the registry.\n     *\n     * This is (almost, but not quite) a compatibility layer for old sites that used locuszoom\n     *\n     * This is primarily aimed at low-tooling environments. It is syntactic sugar, roughly equivalent to:\n     *   `registry.get(base); registry.add(name, class A extends base {});`\n     *\n     * Because this bypasses es6 class mechanics, certain things, esp super calls, may not work as well as using the\n     *   \"real\" class expression. This method is provided solely for convenience.\n     *\n     * This method is a compatibility layer for old versions. Born to be deprecated!\n     * @deprecated\n     * @param {string} parent_name The name of the desired parent class as represented in the registry\n     * @param {string} source_name The desired name of the class to be created, as it will be named in the registry\n     * @param {object} overrides An object\n     * @return {*}\n     */\n    extend(parent_name, source_name, overrides) {\n        console.warn('Deprecation warning: .extend method will be removed in future versions, in favor of explicit ES6 subclasses');\n        if (arguments.length !== 3) {\n            throw new Error('Invalid arguments to .extend');\n        }\n\n        const base = this.get(parent_name);\n        class sub extends base {}\n        Object.assign(sub.prototype, overrides, base);\n        this.add(source_name, sub);\n        return sub;\n    }\n}\n\n\nexport default RegistryBase;\nexport {RegistryBase, ClassRegistry};\n","/**\n * Define standard data adapters used to retrieve data (usually from REST APIs)\n *\n * ## Adapters are responsible for retrieving data\n * In LocusZoom, the act of fetching data (from API, JSON file, or Tabix) is separate from the act of rendering data.\n * Adapters are used to handle retrieving from different sources, and can provide various advanced functionality such\n *  as caching, data harmonization, and annotating API responses with calculated fields. They can also be used to join\n *  two data sources, such as annotating association summary statistics with LD information.\n *\n * Most of LocusZoom's builtin layouts and adapters are written for the field names and data formats of the\n *  UMich [PortalDev API](https://portaldev.sph.umich.edu/docs/api/v1/#introduction):\n *  if your data is in a different format, an adapter can be used to coerce or rename fields.\n *  Although it is possible to change every part of a rendering layout to expect different fields, this is often much\n *  more work than providing data in the expected format.\n *\n * ## Creating data adapters\n * The documentation in this section describes the available data types and adapters. Real LocusZoom usage almost never\n *  creates these classes directly: rather, they are defined from configuration objects that ask for a source by name.\n *\n * The below example creates an object responsible for fetching two different GWAS summary statistics datasets from two different API endpoints, for any data\n *  layer that asks for fields from `trait1:fieldname` or `trait2:fieldname`.\n *\n *  ```\n *  const data_sources = new LocusZoom.DataSources();\n *  data_sources.add(\"trait1\", [\"AssociationLZ\", {url: \"http://server.com/api/single/\", params: {source: 1}}]);\n *  data_sources.add(\"trait2\", [\"AssociationLZ\", {url: \"http://server.com/api/single/\", params: {source: 2}}]);\n *  ```\n *\n *  These data sources are then passed to the plot when data is to be rendered:\n *  `const plot = LocusZoom.populate(\"#lz-plot\", data_sources, layout);`\n *\n * @module LocusZoom_Adapters\n */\n\nfunction validateBuildSource(class_name, build, source) {\n    // Build OR Source, not both\n    if ((build && source) || !(build || source)) {\n        throw new Error(`${class_name} must provide a parameter specifying either \"build\" or \"source\". It should not specify both.`);\n    }\n    // If the build isn't recognized, our APIs can't transparently select a source to match\n    if (build && !['GRCh37', 'GRCh38'].includes(build)) {\n        throw new Error(`${class_name} must specify a valid genome build number`);\n    }\n}\n\n\n// NOTE: Custom adapaters are annotated with `see` instead of `extend` throughout this file, to avoid clutter in the developer API docs.\n//  Most people using LZ data sources will never instantiate a class directly and certainly won't be calling internal\n//  methods, except when implementing a subclass. For most LZ users, it's usually enough to acknowledge that the\n//  private API methods exist in the base class.\n\n/**\n * Base class for LocusZoom data sources (any). See also: BaseApiAdapter for requests from a remote URL.\n * @public\n */\nclass BaseAdapter {\n    /**\n     * @param {object} config Configuration options\n     */\n    constructor(config) {\n        /**\n         * Whether to enable caching (true for most data adapters)\n         * @private\n         * @member {Boolean}\n         */\n        this._enableCache = true;\n        this._cachedKey = null;\n\n        // Almost all LZ sources are \"region based\". Cache the region requested and use it to determine whether\n        //   the cache would satisfy the request.\n        this._cache_pos_start = null;\n        this._cache_pos_end = null;\n\n        /**\n         * Whether this adapter type is dependent on previous requests- for example, the LD source cannot annotate\n         *  association data if no data was found for that region.\n         * @private\n         * @member {boolean}\n         */\n        this.__dependentSource = false;\n\n        // Parse configuration options\n        this.parseInit(config);\n    }\n\n    /**\n     * Parse configuration used to create the instance. Many custom sources will override this method to suit their\n     *  needs (eg specific config options, or for sources that do not retrieve data from a URL)\n     * @protected\n     * @param {String|Object} config Basic configuration- either a url, or a config object\n     * @param {String} [config.url] The datasource URL\n     * @param {String} [config.params] Initial config params for the datasource\n     */\n    parseInit(config) {\n        /**\n         * @private\n         * @member {Object}\n         */\n        this.params = config.params || {};\n    }\n\n    /**\n     * A unique identifier that indicates whether cached data is valid for this request. For most sources using GET\n     *  requests to a REST API, this is usually the region requested. Some sources will append additional params to define the request.\n     *\n     *  This means that to change caching behavior, both the URL and the cache key may need to be updated. However,\n     *      it allows most datasources to skip an extra network request when zooming in.\n     * @protected\n     * @param {Object} state Information available in plot.state (chr, start, end). Sometimes used to inject globally\n     *  available information that influences the request being made.\n     * @param {Object} chain The data chain from previous requests made in a sequence.\n     * @param fields\n     * @returns {String}\n     */\n    getCacheKey(state, chain, fields) {\n        // Most region sources, by default, will cache the largest region that satisfies the request: zooming in\n        //  should be satisfied via the cache, but pan or region change operations will cause a network request\n\n        // Some adapters rely on values set in chain.header during the getURL call. (eg, the LD source uses\n        //  this to find the LD refvar) Calling this method is a backwards-compatible way of ensuring that value is set,\n        //  even on a cache hit in which getURL otherwise wouldn't be called.\n        // Some of the adapters that rely on this behavior are user-defined, hence compatibility hack\n        this.getURL(state, chain, fields);\n\n        const cache_pos_chr = state.chr;\n        const {_cache_pos_start, _cache_pos_end} = this;\n        if (_cache_pos_start && state.start >= _cache_pos_start && _cache_pos_end && state.end <= _cache_pos_end ) {\n            return `${cache_pos_chr}_${_cache_pos_start}_${_cache_pos_end}`;\n        } else {\n            return `${state.chr}_${state.start}_${state.end}`;\n        }\n    }\n\n    /**\n     * Stub: build the URL for any requests made by this source.\n     * @protected\n     */\n    getURL(state, chain, fields) {\n        return this.url;\n    }\n\n    /**\n     * Perform a network request to fetch data for this source. This is usually the method that is used to override\n     *  when defining how to retrieve data.\n     * @protected\n     * @param {Object} state The state of the parent plot\n     * @param chain\n     * @param fields\n     * @returns {Promise}\n     */\n    fetchRequest(state, chain, fields) {\n        const url = this.getURL(state, chain, fields);\n        return fetch(url).then((response) => {\n            if (!response.ok) {\n                throw new Error(response.statusText);\n            }\n            return response.text();\n        });\n    }\n\n    /**\n     * Gets the data for just this source, typically via a network request (but using cache where possible)\n     *\n     * For most use cases, it is better to override `fetchRequest` instead, to avoid bypassing the cache mechanism\n     * by accident.\n     * @protected\n     * @return {Promise}\n     */\n    getRequest(state, chain, fields) {\n        let req;\n        const cacheKey = this.getCacheKey(state, chain, fields);\n\n        if (this._enableCache && typeof(cacheKey) !== 'undefined' && cacheKey === this._cachedKey) {\n            req = Promise.resolve(this._cachedResponse);  // Resolve to the value of the current promise\n        } else {\n            req = this.fetchRequest(state, chain, fields);\n            if (this._enableCache) {\n                this._cachedKey = cacheKey;\n                this._cache_pos_start = state.start;\n                this._cache_pos_end = state.end;\n                this._cachedResponse = req;\n            }\n        }\n        return req;\n    }\n\n    /**\n     * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n     * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n     *\n     * Does not apply namespacing, transformations, or field extraction.\n     *\n     * May be overridden by data adapters that inherently return more complex payloads, or that exist to annotate other\n     *  sources (eg, if the payload provides extra data rather than a series of records).\n     * @protected\n     * @param {Object[]|Object} data The original parsed server response\n     */\n    normalizeResponse(data) {\n        if (Array.isArray(data)) {\n            // Already in the desired form\n            return data;\n        }\n        // Otherwise, assume the server response is an object representing columns of data.\n        // Each array should have the same length (verify), and a given array index corresponds to a single row.\n        const keys = Object.keys(data);\n        const N = data[keys[0]].length;\n        const sameLength = keys.every(function (key) {\n            const item = data[key];\n            return item.length === N;\n        });\n        if (!sameLength) {\n            throw new Error(`${this.constructor.name} expects a response in which all arrays of data are the same length`);\n        }\n\n        // Go down the rows, and create an object for each record\n        const records = [];\n        const fields = Object.keys(data);\n        for (let i = 0; i < N; i++) {\n            const record = {};\n            for (let j = 0; j < fields.length; j++) {\n                record[fields[j]] = data[fields[j]][i];\n            }\n            records.push(record);\n        }\n        return records;\n    }\n\n    /**\n     * Hook to post-process the data returned by this source with new, additional behavior.\n     *   (eg cleaning up API values or performing complex calculations on the returned data)\n     *\n     * @protected\n     * @param {Object[]} records The parsed data from the source (eg standardized api response)\n     * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n     * @returns {Object[]|Promise} The modified set of records\n     */\n    annotateData(records, chain) {\n        // Default behavior: no transformations\n        return records;\n    }\n\n    /**\n     * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n     *   Apply per-field transformations as appropriate.\n     *\n     * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n     *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n     *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n     *\n     * @protected\n     * @param {Object[]} data One record object per element\n     * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n     * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n     * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n     * @protected\n     */\n    extractFields (data, fields, outnames, trans) {\n        //intended for an array of objects\n        //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n        // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n        if (!Array.isArray(data)) {\n            return data;\n        }\n\n        if (!data.length) {\n            // Sometimes there are regions that just don't have data- this should not trigger a missing field error message!\n            return data;\n        }\n\n        const fieldFound = [];\n        for (let k = 0; k < fields.length; k++) {\n            fieldFound[k] = 0;\n        }\n\n        const records = data.map(function (item) {\n            const output_record = {};\n            for (let j = 0; j < fields.length; j++) {\n                let val = item[fields[j]];\n                if (typeof val != 'undefined') {\n                    fieldFound[j] = 1;\n                }\n                if (trans && trans[j]) {\n                    val = trans[j](val);\n                }\n                output_record[outnames[j]] = val;\n            }\n            return output_record;\n        });\n        fieldFound.forEach(function(v, i) {\n            if (!v) {\n                throw new Error(`field ${fields[i]} not found in response for ${outnames[i]}`);\n            }\n        });\n        return records;\n    }\n\n    /**\n     * Combine records from this source with others in the chain to yield final chain body.\n     *   Handles merging this data with other sources (if applicable).\n     *\n     * @protected\n     * @param {Object[]} data The data That would be returned from this source alone\n     * @param {Object} chain The data chain built up during previous requests\n     * @param {String[]} fields\n     * @param {String[]} outnames\n     * @param {String[]} trans\n     * @return {Promise|Object[]} The new chain body\n     */\n    combineChainBody(data, chain, fields, outnames, trans) {\n        return data;\n    }\n\n    /**\n     * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n     *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n     *\n     * @see {module:LocusZoom_Adapters~BaseAdapter#normalizeResponse}\n     * @see {module:LocusZoom_Adapters~BaseAdapter#annotateData}\n     * @see {module:LocusZoom_Adapters~BaseAdapter#extractFields}\n     * @see {module:LocusZoom_Adapters~BaseAdapter#combineChainBody}\n     * @protected\n     *\n     * @param {String|Object} resp The raw data associated with the response\n     * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n     * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n     * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n     *  including the namespace. This must be an array with the same length as `fields`\n     * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n     *     This must be an array with the same length as `fields`\n     * @returns {Promise} A promise that resolves to an object containing\n     *   request metadata (`headers: {}`), the consolidated data for plotting (`body: []`), and the individual responses that would be\n     *   returned by each source in the chain in isolation (`discrete: {}`)\n     */\n    parseResponse (resp, chain, fields, outnames, trans) {\n        const source_id = this.source_id || this.constructor.name;\n        if (!chain.discrete) {\n            chain.discrete = {};\n        }\n\n        const json = typeof resp == 'string' ? JSON.parse(resp) : resp;\n\n        // Perform the 4 steps of parsing the payload and return a combined chain object\n        return Promise.resolve(this.normalizeResponse(json.data || json))\n            .then((standardized) => {\n                // Perform calculations on the data from just this source\n                return Promise.resolve(this.annotateData(standardized, chain));\n            }).then((data) => {\n                return Promise.resolve(this.extractFields(data, fields, outnames, trans));\n            }).then((one_source_body) => {\n                // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n                //   fields array into account). This is useful when we want to re-use the source output in many ways.\n                chain.discrete[source_id] = one_source_body;\n                return Promise.resolve(this.combineChainBody(one_source_body, chain, fields, outnames, trans));\n            }).then((new_body) => {\n                return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n            });\n    }\n\n    /**\n     * Fetch the data from the specified data adapter, and apply transformations requested by an external consumer.\n     * This is the public-facing datasource method that will most be called by the plot, but custom data adapters will\n     *  almost never want to override this method directly- more specific hooks are provided to control individual pieces\n     *  of the request lifecycle.\n     *\n     * @private\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields Array of field names that the plot has requested from this data adapter. (without the \"namespace\" prefix)\n     * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n     *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n     * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n     *     This must be an array with the same length as `fields`\n     * @returns {function} A callable operation that can be used as part of the data chain\n     */\n    getData(state, fields, outnames, trans) {\n        if (this.preGetData) { // TODO try to remove this method if at all possible\n            const pre = this.preGetData(state, fields, outnames, trans);\n            if (this.pre) {\n                state = pre.state || state;\n                fields = pre.fields || fields;\n                outnames = pre.outnames || outnames;\n                trans = pre.trans || trans;\n            }\n        }\n\n        return (chain) => {\n            if (this.__dependentSource && chain && chain.body && !chain.body.length) {\n                // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n                // Therefore, it should simply return the previous data chain.\n                return Promise.resolve(chain);\n            }\n\n            return this.getRequest(state, chain, fields).then((resp) => {\n                return this.parseResponse(resp, chain, fields, outnames, trans);\n            });\n        };\n    }\n}\n\n/**\n * Base class for LocusZoom data adapters that receive their data over the web. Adds default config parameters\n *  (and potentially other behavior) that are relevant to URL-based requests.\n * @extends module:LocusZoom_Adapters~BaseAdapter\n * @param {string} config.url The URL for the remote dataset. By default, most adapters perform a GET request.\n * @inheritDoc\n */\nclass BaseApiAdapter extends BaseAdapter {\n    parseInit(config) {\n        super.parseInit(config);\n\n        /**\n         * @private\n         * @member {String}\n         */\n        this.url = config.url;\n        if (!this.url) {\n            throw new Error('Source not initialized with required URL');\n        }\n    }\n}\n\n/**\n * Retrieve Association Data from the LocusZoom/ Portaldev API (or compatible). Defines how to make a request\n *  to a specific REST API.\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n * @param {string} config.url The base URL for the remote data.\n * @param {object} config.params\n * @param [config.params.sort=false] Whether to sort the association data (by an assumed field named \"position\"). This\n *   is primarily a site-specific workaround for a particular LZ usage; we encourage apis to sort by position before returning\n *   data to the browser.\n * @param [config.params.source] The ID of the GWAS dataset to use for this request, as matching the API backend\n */\nclass AssociationLZ extends BaseApiAdapter {\n    preGetData (state, fields, outnames, trans) {\n        // TODO: Modify internals to see if we can go without this method\n        const id_field = this.params.id_field || 'id';\n        [id_field, 'position'].forEach(function(x) {\n            if (!fields.includes(x)) {\n                fields.unshift(x);\n                outnames.unshift(x);\n                trans.unshift(null);\n            }\n        });\n        return {fields: fields, outnames:outnames, trans:trans};\n    }\n\n    /**\n     * Add query parameters to the URL to construct a query for the specified region\n     */\n    getURL (state, chain, fields) {\n        const analysis = chain.header.analysis || this.params.source || this.params.analysis;  // Old usages called this param \"analysis\"\n        if (typeof analysis == 'undefined') {\n            throw new Error('Association source must specify an analysis ID to plot');\n        }\n        return `${this.url}results/?filter=analysis in ${analysis} and chromosome in  '${state.chr}' and position ge ${state.start} and position le ${state.end}`;\n    }\n\n    /**\n     * Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n     *   align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n     *   TODO: Consider more fine grained sorting control in the future. This was added as a very specific\n     *    workaround for the original T2D portal.\n     * @protected\n     * @param data\n     * @return {Object}\n     */\n    normalizeResponse (data) {\n        data = super.normalizeResponse(data);\n        if (this.params && this.params.sort && data.length && data[0]['position']) {\n            data.sort(function (a, b) {\n                return a['position'] - b['position'];\n            });\n        }\n        return data;\n    }\n}\n\n/**\n * Fetch linkage disequilibrium information from a UMich LDServer-compatible API, relative to a reference variant.\n *  If no `plot.state.ldrefvar` is explicitly provided, this source will attempt to find the most significant GWAS\n *  variant (smallest pvalue or largest neg_log_pvalue) and yse that as the LD reference variant.\n *\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain. For custom association APIs, some additional options might\n *  need to be be specified in order to locate the most significant SNP. Variant IDs of the form `chrom:pos_ref/alt`\n *  are preferred, but this source will attempt to harmonize other common data formats into something that the LD\n *  server can understand.\n *\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n */\nclass LDServer extends BaseApiAdapter {\n    /**\n     * @param {string} config.url The base URL for the remote data.\n     * @param {object} config.params\n     * @param [config.params.build='GRCh37'] The genome build to use when calculating LD relative to a specified reference variant.\n     *  May be overridden by a global parameter `plot.state.genome_build` so that all datasets can be fetched for the appropriate build in a consistent way.\n     * @param [config.params.source='1000G'] The name of the reference panel to use, as specified in the LD server instance.\n     *  May be overridden by a global parameter `plot.state.ld_source` to implement widgets that alter LD display.\n     * @param [config.params.population='ALL'] The sample population used to calculate LD for a specified source;\n     *  population names vary depending on the reference panel and how the server was populated wth data.\n     *  May be overridden by a global parameter `plot.state.ld_pop` to implement widgets that alter LD display.\n     * @param [config.params.method='rsquare'] The metric used to calculate LD\n     * @param [config.params.id_field] The association data field that contains variant identifier information. The preferred\n     *   format of LD server is `chrom:pos_ref/alt` and this source will attempt to normalize other common formats.\n     *   This source can auto-detect possible matches for field names containing \"variant\" or \"id\"\n     * @param [config.params.position_field] The association data field that contains variant position information.\n     *   This source can auto-detect possible matches for field names containing \"position\" or \"pos\"\n     * @param [config.params.pvalue_field] The association data field that contains pvalue information.\n     *   This source can auto-detect possible matches for field names containing \"pvalue\" or \"log_pvalue\".\n     *   The suggested LD refvar will be the smallest pvalue, or the largest log_pvalue: this source will auto-detect\n     *   the word \"log\" in order to determine the sign of the comparison.\n     */\n    constructor(config) {\n        super(config);\n        this.__dependentSource = true;\n    }\n\n    preGetData(state, fields) {\n        if (fields.length > 1) {\n            if (fields.length !== 2 || !fields.includes('isrefvar')) {\n                throw new Error(`LD does not know how to get all fields: ${fields.join(', ')}`);\n            }\n        }\n    }\n\n    findMergeFields(chain) {\n        // Find the fields (as provided by a previous step in the chain, like an association source) that will be needed to\n        //  combine LD data with existing information\n\n        // Since LD information may be shared across multiple assoc sources with different namespaces,\n        //   we use regex to find columns to join on, rather than requiring exact matches\n        const exactMatch = function (arr) {\n            return function () {\n                const regexes = arguments;\n                for (let i = 0; i < regexes.length; i++) {\n                    const regex = regexes[i];\n                    const m = arr.filter(function (x) {\n                        return x.match(regex);\n                    });\n                    if (m.length) {\n                        return m[0];\n                    }\n                }\n                return null;\n            };\n        };\n        let dataFields = {\n            id: this.params.id_field,\n            position: this.params.position_field,\n            pvalue: this.params.pvalue_field,\n            _names_:null,\n        };\n        if (chain && chain.body && chain.body.length > 0) {\n            const names = Object.keys(chain.body[0]);\n            const nameMatch = exactMatch(names);\n            // Internally, fields are generally prefixed with the name of the source they come from.\n            // If the user provides an id_field (like `variant`), it should work across data sources (`assoc1:variant`,\n            //  assoc2:variant), but not match fragments of other field names (assoc1:variant_thing)\n            // Note: these lookups hard-code a couple of common fields that will work based on known APIs in the wild\n            const id_match = dataFields.id && nameMatch(new RegExp(`${dataFields.id}\\\\b`));\n            dataFields.id = id_match || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n            dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n            dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n            dataFields._names_ = names;\n        }\n        return dataFields;\n    }\n\n    findRequestedFields (fields, outnames) {\n        // Assumption: all usages of this source will only ever ask for \"isrefvar\" or \"state\". This maps to output names.\n        let obj = {};\n        for (let i = 0; i < fields.length; i++) {\n            if (fields[i] === 'isrefvar') {\n                obj.isrefvarin = fields[i];\n                obj.isrefvarout = outnames && outnames[i];\n            } else {\n                obj.ldin = fields[i];\n                obj.ldout = outnames && outnames[i];\n            }\n        }\n        return obj;\n    }\n\n    /**\n     * The LD API payload does not obey standard format conventions; do not try to transform it.\n     */\n    normalizeResponse (data) {\n        return data;\n    }\n\n    /**\n     * Get the LD reference variant, which by default will be the most significant hit in the assoc results\n     *   This will be used in making the original query to the LD server for pairwise LD information.\n     *\n     * This is meant to join a single LD request to any number of association results, and to work with many kinds of API.\n     *   To do this, the datasource looks for fields with special known names such as pvalue, log_pvalue, etc.\n     *   If your API uses different nomenclature, an option must be specified.\n     *\n     * @protected\n     * @returns {String[]} Two strings: 1) the marker id (expected to be in `chr:pos_ref/alt` format) of the reference\n     *  variant, and 2) the marker ID as it appears in the original dataset that we are joining to, so that the exact\n     *  refvar can be marked when plotting the data..\n     */\n    getRefvar(state, chain, fields) {\n        let findExtremeValue = function(records, pval_field) {\n            // Finds the most significant hit (smallest pvalue, or largest -log10p). Will try to auto-detect the appropriate comparison.\n            pval_field = pval_field || 'log_pvalue';  // The official LZ API returns log_pvalue\n            const is_log = /log/.test(pval_field);\n            let cmp;\n            if (is_log) {\n                cmp = function(a, b) {\n                    return a > b;\n                };\n            } else {\n                cmp = function(a, b) {\n                    return a < b;\n                };\n            }\n            let extremeVal = records[0][pval_field], extremeIdx = 0;\n            for (let i = 1; i < records.length; i++) {\n                if (cmp(records[i][pval_field], extremeVal)) {\n                    extremeVal = records[i][pval_field];\n                    extremeIdx = i;\n                }\n            }\n            return extremeIdx;\n        };\n\n        let reqFields = this.findRequestedFields(fields);\n        let refVar = reqFields.ldin;\n        if (refVar === 'state') {\n            refVar = state.ldrefvar || chain.header.ldrefvar || 'best';\n        }\n        if (refVar === 'best') {\n            if (!chain.body) {\n                throw new Error('No association data found to find best pvalue');\n            }\n            let keys = this.findMergeFields(chain);\n            if (!keys.pvalue || !keys.id) {\n                let columns = '';\n                if (!keys.id) {\n                    columns += `${columns.length ? ', ' : ''}id`;\n                }\n                if (!keys.pvalue) {\n                    columns += `${columns.length ? ', ' : ''}pvalue`;\n                }\n                throw new Error(`Unable to find necessary column(s) for merge: ${columns} (available: ${keys._names_})`);\n            }\n            refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n        }\n        // Some datasets, notably the Portal, use a different marker format.\n        //  Coerce it into one that will work with the LDServer API. (CHROM:POS_REF/ALT)\n        const REGEX_MARKER = /^(?:chr)?([a-zA-Z0-9]+?)[_:-](\\d+)[_:|-]?(\\w+)?[/_:|-]?([^_]+)?_?(.*)?/;\n        const match = refVar && refVar.match(REGEX_MARKER);\n\n        if (!match) {\n            throw new Error('Could not request LD for a missing or incomplete marker format');\n        }\n        const [original, chrom, pos, ref, alt] = match;\n        // Currently, the LD server only accepts full variant specs; it won't return LD w/o ref+alt. Allowing\n        //  a partial match at most leaves room for potential future features.\n        let refVar_formatted = `${chrom}:${pos}`;\n        if (ref && alt) {\n            refVar_formatted += `_${ref}/${alt}`;\n        }\n\n        return [refVar_formatted, original];\n    }\n\n    /**\n     * Identify (or guess) the LD reference variant, then add query parameters to the URL to construct a query for the specified region\n     */\n    getURL(state, chain, fields) {\n        // The LD source/pop can be overridden from plot.state for dynamic layouts\n        const build = state.genome_build || this.params.build || 'GRCh37'; // This isn't expected to change after the data is plotted.\n        let source = state.ld_source || this.params.source || '1000G';\n        const population = state.ld_pop || this.params.population || 'ALL';  // LDServer panels will always have an ALL\n        const method = this.params.method || 'rsquare';\n\n        if (source === '1000G' && build === 'GRCh38') {\n            // For build 38 (only), there is a newer/improved 1000G LD panel available that uses WGS data. Auto upgrade by default.\n            source = '1000G-FRZ09';\n        }\n\n        validateBuildSource(this.constructor.name, build, null);  // LD doesn't need to validate `source` option\n\n        const [refVar_formatted, refVar_raw] = this.getRefvar(state, chain, fields);\n\n        // Preserve the user-provided variant spec for use when matching to assoc data\n        chain.header.ldrefvar = refVar_raw;\n\n        return  [\n            this.url, 'genome_builds/', build, '/references/', source, '/populations/', population, '/variants',\n            '?correlation=', method,\n            '&variant=', encodeURIComponent(refVar_formatted),\n            '&chrom=', encodeURIComponent(state.chr),\n            '&start=', encodeURIComponent(state.start),\n            '&stop=', encodeURIComponent(state.end),\n        ].join('');\n    }\n\n    /**\n     * The LD adapter caches based on region, reference panel, and population name\n     * @param state\n     * @param chain\n     * @param fields\n     * @return {string}\n     */\n    getCacheKey(state, chain, fields) {\n        const base = super.getCacheKey(state, chain, fields);\n        let source = state.ld_source || this.params.source || '1000G';\n        const population = state.ld_pop || this.params.population || 'ALL';  // LDServer panels will always have an ALL\n        const [refVar, _] = this.getRefvar(state, chain, fields);\n        return `${base}_${refVar}_${source}_${population}`;\n    }\n\n    /**\n     * The LD adapter attempts to intelligently match retrieved LD information to a request for association data earlier in the data chain.\n     * Since each layer only asks for the data needed for that layer, one LD call is sufficient to annotate many separate association tracks.\n     */\n    combineChainBody(data, chain, fields, outnames, trans) {\n        let keys = this.findMergeFields(chain);\n        let reqFields = this.findRequestedFields(fields, outnames);\n        if (!keys.position) {\n            throw new Error(`Unable to find position field for merge: ${keys._names_}`);\n        }\n        const leftJoin = function (left, right, lfield, rfield) {\n            let i = 0, j = 0;\n            while (i < left.length && j < right.position2.length) {\n                if (left[i][keys.position] === right.position2[j]) {\n                    left[i][lfield] = right[rfield][j];\n                    i++;\n                    j++;\n                } else if (left[i][keys.position] < right.position2[j]) {\n                    i++;\n                } else {\n                    j++;\n                }\n            }\n        };\n        const tagRefVariant = function (data, refvar, idfield, outrefname, outldname) {\n            for (let i = 0; i < data.length; i++) {\n                if (data[i][idfield] && data[i][idfield] === refvar) {\n                    data[i][outrefname] = 1;\n                    data[i][outldname] = 1; // For label/filter purposes, implicitly mark the ref var as LD=1 to itself\n                } else {\n                    data[i][outrefname] = 0;\n                }\n            }\n        };\n\n        // LD servers vary slightly. Some report corr as \"rsquare\", others as \"correlation\"\n        let corrField = data.rsquare ? 'rsquare' : 'correlation';\n        leftJoin(chain.body, data, reqFields.ldout, corrField);\n        if (reqFields.isrefvarin && chain.header.ldrefvar) {\n            tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout, reqFields.ldout);\n        }\n        return chain.body;\n    }\n\n    /**\n     * The LDServer API is paginated, but we need all of the data to render a plot. Depaginate and combine where appropriate.\n     */\n    fetchRequest(state, chain, fields) {\n        let url = this.getURL(state, chain, fields);\n        let combined = { data: {} };\n        let chainRequests = function (url) {\n            return fetch(url).then().then((response) => {\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                return response.text();\n            }).then(function(payload) {\n                payload = JSON.parse(payload);\n                Object.keys(payload.data).forEach(function (key) {\n                    combined.data[key] = (combined.data[key] || []).concat(payload.data[key]);\n                });\n                if (payload.next) {\n                    return chainRequests(payload.next);\n                }\n                return combined;\n            });\n        };\n        return chainRequests(url);\n    }\n}\n\n/**\n * Fetch GWAS catalog data for a list of known variants, and align the data with previously fetched association data.\n * There can be more than one claim per variant; this adapter is written to support a visualization in which each\n * association variant is labeled with the single most significant hit in the GWAS catalog. (and enough information to link to the external catalog for more information)\n *\n * Sometimes the GWAS catalog uses rsIDs that could refer to more than one variant (eg multiple alt alleles are\n *  possible for the same rsID). To avoid missing possible hits due to ambiguous meaning, we connect the assoc\n *  and catalog data via the position field, not the full variant specifier. This source will auto-detect the matching\n *  field in association data by looking for the field name `position` or `pos`.\n *\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n */\nclass GwasCatalogLZ extends BaseApiAdapter {\n    /**\n     * @param {string} config.url The base URL for the remote data.\n     * @param {Object} config.params\n     * @param [config.params.build] The genome build to use when calculating LD relative to a specified reference variant.\n     *  May be overridden by a global parameter `plot.state.genome_build` so that all datasets can be fetched for the appropriate build in a consistent way.\n     * @param {Number} [config.params.source] The ID of the chosen catalog. Most usages should omit this parameter and\n     *  let LocusZoom choose the newest available dataset to use based on the genome build: defaults to recent EBI GWAS catalog, GRCh37.\n     */\n    constructor(config) {\n        super(config);\n        this.__dependentSource = true;\n    }\n\n    /**\n     * Add query parameters to the URL to construct a query for the specified region\n     */\n    getURL(state, chain, fields) {\n        // This is intended to be aligned with another source- we will assume they are always ordered by position, asc\n        //  (regardless of the actual match field)\n        const build = state.genome_build || this.params.build;\n        const source = this.params.source;\n        validateBuildSource(this.constructor.name, build, source);\n\n        // If a build name is provided, it takes precedence (the API will attempt to auto-select newest dataset based on the requested genome build).\n        //  Build and source are mutually exclusive, because hard-coded source IDs tend to be out of date\n        const source_query = build ? `&build=${build}` : ` and id eq ${source}`;\n        return `${this.url  }?format=objects&sort=pos&filter=chrom eq '${state.chr}' and pos ge ${state.start} and pos le ${state.end}${source_query}`;\n    }\n\n    findMergeFields(records) {\n        // Data from previous sources is already namespaced. Find the alignment field by matching.\n        const knownFields = Object.keys(records);\n        // Note: All API endoints involved only give results for 1 chromosome at a time; match is implied\n        const posMatch = knownFields.find(function (item) {\n            return item.match(/\\b(position|pos)\\b/i);\n        });\n\n        if (!posMatch) {\n            throw new Error('Could not find data to align with GWAS catalog results');\n        }\n        return { 'pos': posMatch };\n    }\n\n    extractFields (data, fields, outnames, trans) {\n        // Skip the \"individual field extraction\" step; extraction will be handled when building chain body instead\n        return data;\n    }\n\n    /**\n     * Intelligently combine the LD data with the association data used for this data layer. See class description\n     *  for a summary of how this works.\n     */\n    combineChainBody(data, chain, fields, outnames, trans) {\n        if (!data.length) {\n            return chain.body;\n        }\n\n        //  TODO: Better reuse options in the future. This source is very specifically tied to the UM PortalDev API, where\n        //   the field name is always \"log_pvalue\". Relatively few sites will write their own gwas-catalog endpoint.\n        const decider = 'log_pvalue';\n        const decider_out = outnames[fields.indexOf(decider)];\n\n        function leftJoin(left, right, fields, outnames, trans) { // Add `fields` from `right` to `left`\n            // Add a synthetic, un-namespaced field to all matching records\n            const n_matches = left['n_catalog_matches'] || 0;\n            left['n_catalog_matches'] = n_matches + 1;\n            if (decider && left[decider_out] && left[decider_out] > right[decider]) {\n                // There may be more than one GWAS catalog entry for the same SNP. This source is intended for a 1:1\n                //  annotation scenario, so for now it only joins the catalog entry that has the best -log10 pvalue\n                return;\n            }\n\n            for (let j = 0; j < fields.length; j++) {\n                const fn = fields[j];\n                const outn = outnames[j];\n\n                let val = right[fn];\n                if (trans && trans[j]) {\n                    val = trans[j](val);\n                }\n                left[outn] = val;\n            }\n        }\n\n        const chainNames = this.findMergeFields(chain.body[0]);\n        const catNames = this.findMergeFields(data[0]);\n\n        var i = 0, j = 0;\n        while (i < chain.body.length && j < data.length) {\n            var left = chain.body[i];\n            var right = data[j];\n\n            if (left[chainNames.pos] === right[catNames.pos]) {\n                // There may be multiple catalog entries for each matching SNP; evaluate match one at a time\n                leftJoin(left, right, fields, outnames, trans);\n                j += 1;\n            } else if (left[chainNames.pos] < right[catNames.pos]) {\n                i += 1;\n            } else {\n                j += 1;\n            }\n        }\n        return chain.body;\n    }\n}\n\n/**\n * Retrieve Gene Data, as fetched from the LocusZoom/Portaldev API server (or compatible format)\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n * @param {string} config.url The base URL for the remote data\n * @param {Object} config.params\n * @param [config.params.build] The genome build to use when calculating LD relative to a specified reference variant.\n *  May be overridden by a global parameter `plot.state.genome_build` so that all datasets can be fetched for the appropriate build in a consistent way.\n * @param {Number} [config.params.source] The ID of the chosen gene dataset. Most usages should omit this parameter and\n *  let LocusZoom choose the newest available dataset to use based on the genome build: defaults to recent GENCODE data, GRCh37.\n */\nclass GeneLZ extends BaseApiAdapter {\n    /**\n     * Add query parameters to the URL to construct a query for the specified region\n     */\n    getURL(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        let source = this.params.source;\n        validateBuildSource(this.constructor.name, build, source);\n\n        // If a build name is provided, it takes precedence (the API will attempt to auto-select newest dataset based on the requested genome build).\n        //  Build and source are mutually exclusive, because hard-coded source IDs tend to be out of date\n        const source_query = build ? `&build=${build}` : ` and source in ${source}`;\n        return `${this.url}?filter=chrom eq '${state.chr}' and start le ${state.end} and end ge ${state.start}${source_query}`;\n    }\n\n    /**\n     * The UM genes API has a very complex internal data format. Bypass any record parsing, and provide the data layer with\n     *  the exact information returned by the API. (ignoring the fields array in the layout)\n     * @param data\n     * @return {Object[]|Object}\n     */\n    normalizeResponse(data) {\n        return data;\n    }\n\n    /**\n     * Does not attempt to namespace or modify the fields from the API payload; the payload format is very complex and\n     *  quite coupled with the data rendering implementation.\n     * Typically, requests to this adapter specify a single dummy field sufficient to trigger the request: `fields:[ 'gene:all' ]`\n     */\n    extractFields(data, fields, outnames, trans) {\n        return data;\n    }\n}\n\n/**\n * Retrieve Gene Constraint Data, as fetched from the gnomAD server (or compatible graphQL api endpoint)\n *\n * This is intended to be the second request in a chain, with special logic that connects it to Genes data\n *  already fetched. It assumes that the genes data is returned from the UM API, and thus the logic involves\n *  matching on specific assumptions about `gene_name` format.\n *\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n */\nclass GeneConstraintLZ extends BaseApiAdapter {\n    /**\n     * @param {string} config.url The base URL for the remote data\n     * @param {Object} config.params\n     * @param [config.params.build] The genome build to use when calculating LD relative to a specified reference variant.\n     *   May be overridden by a global parameter `plot.state.genome_build` so that all datasets can be fetched for the appropriate build in a consistent way.\n     */\n    constructor(config) {\n        super(config);\n        this.__dependentSource = true;\n    }\n\n    /**\n     * GraphQL API: request details are encoded in the body, not the URL\n     */\n    getURL() {\n        return this.url;\n    }\n\n    /**\n     * The gnomAD API has a very complex internal data format. Bypass any record parsing, and provide the data layer with\n     *  the exact information returned by the API.\n     */\n    normalizeResponse(data) {\n        return data;\n    }\n\n    fetchRequest(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        if (!build) {\n            throw new Error(`Adapter ${this.constructor.name} must specify a 'genome_build' option`);\n        }\n\n        const unique_gene_names = chain.body.reduce(\n            // In rare cases, the same gene symbol may appear at multiple positions. (issue #179) We de-duplicate the\n            //  gene names to avoid issuing a malformed GraphQL query.\n            function (acc, gene) {\n                acc[gene.gene_name] = null;\n                return acc;\n            },\n            {}\n        );\n        let query = Object.keys(unique_gene_names).map(function (gene_name) {\n            // GraphQL alias names must match a specific set of allowed characters: https://stackoverflow.com/a/45757065/1422268\n            const alias = `_${gene_name.replace(/[^A-Za-z0-9_]/g, '_')}`;\n            // Each gene symbol is a separate graphQL query, grouped into one request using aliases\n            return `${alias}: gene(gene_symbol: \"${gene_name}\", reference_genome: ${build}) { gnomad_constraint { exp_syn obs_syn syn_z oe_syn oe_syn_lower oe_syn_upper exp_mis obs_mis mis_z oe_mis oe_mis_lower oe_mis_upper exp_lof obs_lof pLI oe_lof oe_lof_lower oe_lof_upper } } `;\n        });\n\n        if (!query.length || query.length > 25 || build === 'GRCh38') {\n            // Skip the API request when it would make no sense:\n            // - Build 38 (gnomAD supports build GRCh37 only; don't hit server when invalid. This isn't future proof, but we try to be good neighbors.)\n            // - Too many genes (gnomAD appears max cost ~25 genes)\n            // - No genes in region (hence no constraint info)\n            return Promise.resolve({ data: null });\n        }\n\n        query = `{${query.join(' ')} }`; // GraphQL isn't quite JSON; items are separated by spaces but not commas\n        const url = this.getURL(state, chain, fields);\n        // See: https://graphql.org/learn/serving-over-http/\n        const body = JSON.stringify({ query: query });\n        const headers = { 'Content-Type': 'application/json' };\n\n        // Note: The gnomAD API sometimes fails randomly.\n        // If request blocked, return  a fake \"no data\" signal so the genes track can still render w/o constraint info\n        return fetch(url, { method: 'POST', body, headers }).then((response) => {\n            if (!response.ok) {\n                return [];\n            }\n            return response.text();\n        }).catch((err) => []);\n    }\n\n    /**\n     * Annotate GENCODE data (from a previous request to the genes adapter) with additional gene constraint data from\n     *   the gnomAD API. See class description for a summary of how this works.\n     */\n    combineChainBody(data, chain, fields, outnames, trans) {\n        if (!data) {\n            return chain;\n        }\n\n        chain.body.forEach(function(gene) {\n            // Find payload keys that match gene names in this response\n            const alias = `_${gene.gene_name.replace(/[^A-Za-z0-9_]/g, '_')}`;  // aliases are modified gene names\n            const constraint = data[alias] && data[alias]['gnomad_constraint']; // gnomad API has two ways of specifying missing data for a requested gene\n            if (constraint) {\n                // Add all fields from constraint data- do not override fields present in the gene source\n                Object.keys(constraint).forEach(function (key) {\n                    let val = constraint[key];\n                    if (typeof gene[key] === 'undefined') {\n                        if (typeof val == 'number' && val.toString().includes('.')) {\n                            val = parseFloat(val.toFixed(2));\n                        }\n                        gene[key] = val;   // These two sources are both designed to bypass namespacing\n                    }\n                });\n            }\n        });\n        return chain.body;\n    }\n}\n\n/**\n * Retrieve Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n * @param {string} config.url The base URL for the remote data\n * @param {Object} config.params\n * @param [config.params.build] The genome build to use when calculating LD relative to a specified reference variant.\n *  May be overridden by a global parameter `plot.state.genome_build` so that all datasets can be fetched for the appropriate build in a consistent way.\n * @param {Number} [config.params.source] The ID of the chosen dataset. Most usages should omit this parameter and\n *  let LocusZoom choose the newest available dataset to use based on the genome build: defaults to recent HAPMAP recombination rate, GRCh37.\n */\nclass RecombLZ extends BaseApiAdapter {\n    /**\n     * Add query parameters to the URL to construct a query for the specified region\n     */\n    getURL(state, chain, fields) {\n        const build = state.genome_build || this.params.build;\n        let source = this.params.source;\n        validateBuildSource(this.constructor.SOURCE_NAME, build, source);\n\n        // If a build name is provided, it takes precedence (the API will attempt to auto-select newest dataset based on the requested genome build).\n        //  Build and source are mutually exclusive, because hard-coded source IDs tend to be out of date\n        const source_query = build ? `&build=${build}` : ` and id in ${source}`;\n        return `${this.url}?filter=chromosome eq '${state.chr}' and position le ${state.end} and position ge ${state.start}${source_query}`;\n    }\n}\n\n/**\n * Retrieve static blobs of data as raw JS objects. This does not perform additional parsing, which is required\n *  for some sources (eg it does not know how to join together LD and association data).\n *\n * Therefore it is the responsibility of the user to pass information in a format that can be read and\n * understood by the chosen plot- a StaticJSON source is rarely a drop-in replacement for existing layouts.\n *\n * This source is largely here for legacy reasons. More often, a convenient way to serve static data is as separate\n *  JSON files to an existing source (with the JSON url in place of an API).\n *\n *  Note: The name is a bit misleading. It receives JS objects, not strings serialized as \"json\".\n * @public\n * @see module:LocusZoom_Adapters~BaseAdapter\n * @param {object} data The data to be returned by this source (subject to namespacing rules)\n */\nclass StaticSource extends BaseAdapter {\n    parseInit(data) {\n        // Does not receive any config; the only argument is the raw data, embedded when source is created\n        this._data = data;\n    }\n\n    getRequest(state, chain, fields) {\n        return Promise.resolve(this._data);\n    }\n}\n\n/**\n * Retrieve PheWAS data retrieved from a LocusZoom/PortalDev compatible API\n * @public\n * @see module:LocusZoom_Adapters~BaseApiAdapter\n * @param {string} config.url The base URL for the remote data\n * @param {Object} config.params\n * @param {String[]} config.params.build This datasource expects to be provided the name of the genome build that will\n *   be used to provide pheWAS results for this position. Note positions may not translate between builds.\n */\nclass PheWASLZ extends BaseApiAdapter {\n    getURL(state, chain, fields) {\n        const build = (state.genome_build ? [state.genome_build] : null) || this.params.build;\n        if (!build || !Array.isArray(build) || !build.length) {\n            throw new Error(['Adapter', this.constructor.SOURCE_NAME, 'requires that you specify array of one or more desired genome build names'].join(' '));\n        }\n        const url = [\n            this.url,\n            \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n            build.map(function (item) {\n                return `build=${encodeURIComponent(item)}`;\n            }).join('&'),\n        ];\n        return url.join('');\n    }\n\n    getCacheKey(state, chain, fields) {\n        // This is not a region-based source; it doesn't make sense to cache by a region\n        return this.getURL(state, chain, fields);\n    }\n}\n\n/**\n * Base class for \"connectors\"- this is a highly specialized kind of adapter that is rarely used in most LocusZoom\n *  deployments. This is meant to be subclassed, rather than used directly.\n *\n * A connector is a data adapter that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @see module:LocusZoom_Adapters~BaseAdapter\n */\nclass ConnectorSource extends BaseAdapter {\n    /**\n     * @param {Object} config.params Additional parameters\n     * @param {Object} config.params.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n     *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n     *  assumptions about what namespaces a source is using.     *\n     */\n    constructor(config) {\n        super(config);\n\n        if (!config || !config.sources) {\n            throw new Error('Connectors must specify the data they require as config.sources = {internal_name: chain_source_id}} pairs');\n        }\n\n        /**\n         * Tells the connector how to find the data it relies on\n         *\n         * For example, a connector that applies burden test information to the genes layer might specify:\n         *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n         *\n         * @member {Object}\n         * @private\n         */\n        this._source_name_mapping = config.sources;\n\n        // Validate that this source has been told how to find the required information\n        const specified_ids = Object.keys(config.sources);\n        /** @property {String[]} Specifies the sources that must be provided in the original config object */\n\n        this._getRequiredSources().forEach((k) => {\n            if (!specified_ids.includes(k)) {\n                // TODO: Fix constructor.name usage in minified bundles\n                throw new Error(`Configuration for ${this.constructor.name} must specify a source ID corresponding to ${k}`);\n            }\n        });\n    }\n\n    // Stub- connectors don't have their own url or data, so the defaults don't make sense\n    parseInit() {}\n\n    getRequest(state, chain, fields) {\n        // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n        //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n        Object.keys(this._source_name_mapping).forEach((ns) => {\n            const chain_source_id = this._source_name_mapping[ns];\n            if (chain.discrete && !chain.discrete[chain_source_id]) {\n                throw new Error(`${this.constructor.name} cannot be used before loading required data for: ${chain_source_id}`);\n            }\n        });\n        return Promise.resolve(chain.body || []);\n    }\n\n    parseResponse(data, chain, fields, outnames, trans) {\n        // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n        //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n        // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n        // Typically connectors are called with `connector_name:all` in the fields array.\n        return Promise.resolve(this.combineChainBody(data, chain, fields, outnames, trans))\n            .then(function(new_body) {\n                return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n            });\n    }\n\n    combineChainBody(records, chain) {\n        // Stub method: specifies how to combine the data\n        throw new Error('This method must be implemented in a subclass');\n    }\n\n    /**\n     * Helper method since ES6 doesn't support class fields\n     * @private\n     */\n    _getRequiredSources() {\n        throw new Error('Must specify an array that identifes the kind of data required by this source');\n    }\n}\n\nexport { BaseAdapter, BaseApiAdapter };\n\nexport {\n    AssociationLZ,\n    ConnectorSource,\n    GeneConstraintLZ,\n    GeneLZ,\n    GwasCatalogLZ,\n    LDServer,\n    PheWASLZ,\n    RecombLZ,\n    StaticSource,\n};\n","/**\n * A registry of known data adapters. Can be used to find adapters by name. It will search predefined classes\n *  as well as those registered by plugins.\n *  @module\n *  @private\n */\nimport {ClassRegistry} from './base';\n\nimport * as adapters from '../data/adapters';\n\n\n// LocusZoom.Adapters is a basic registry with no special behavior.\n/**\n * A plugin registry that allows plots to use both pre-defined and user-provided data adapters (responsible for\n *  controlling the retrieval and harmonization of data).\n * @alias module:LocusZoom~Adapters\n * @type {module:registry/base~ClassRegistry}\n */\nconst registry = new ClassRegistry();\n\nfor (let [name, type] of Object.entries(adapters)) {\n    registry.add(name, type);\n}\n\n// Add some hard-coded aliases for backwards compatibility\n\n/**\n * Backwards-compatible alias for StaticSource\n * @public\n * @name module:LocusZoom_Adapters~StaticJSON\n * @see module:LocusZoom_Adapters~StaticSource\n */\nregistry.add('StaticJSON', adapters.StaticSource);\n\n/**\n * Backwards-compatible alias for LDServer\n * @public\n * @name module:LocusZoom_Adapters~LDLZ2\n * @see module:LocusZoom_Adapters~LDServer\n */\nregistry.add('LDLZ2', adapters.LDServer);\n\n\nexport default registry;\n","const __WEBPACK_NAMESPACE_OBJECT__ = d3;","/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb and an adjective. Verbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[]}}\n * @private\n */\nexport const STATUSES = {\n    verbs: ['highlight', 'select', 'fade', 'hide'],\n    adjectives: ['highlighted', 'selected', 'faded', 'hidden'],\n};\n","/**\n * Transformation functions: used to transform a raw data value. For example, a template or axis label\n *  can convert from pvalue to -log10pvalue by specifying the following field name (the `|funcname` syntax\n *  indicates applying a function):\n *\n * `{{assoc:pvalue|neglog10}}`\n *\n * Transforms can also be chained so that several are used in order from left to right:\n * `{{log_pvalue|logtoscinotation|htmlescape}}`\n *\n * Most parts of LocusZoom that rely on being given a field name (or value) can be used this way: axis labels, position,\n *  match/filter logic, tooltip HTML template, etc. If your use case is not working with filters, please file a\n *  bug report!\n *\n * NOTE: for best results, don't specify filters in the `fields` array of a data layer- only specify them where the\n *  transformed value will be used.\n * @module LocusZoom_TransformationFunctions\n */\n\n/**\n * Return the log10 of a value. Can be applied several times in a row for, eg, loglog plots.\n * @param {number} value\n * @return {null|number}\n */\nexport function log10 (value) {\n    if (isNaN(value) || value <= 0) {\n        return null;\n    }\n    return Math.log(value) / Math.LN10;\n}\n\n/**\n * Return the -log (base 10), a common means of representing pvalues in locuszoom plots\n * @param {number} value\n * @return {number}\n */\nexport function neglog10 (value) {\n    if (isNaN(value) || value <= 0) {\n        return null;\n    }\n    return -Math.log(value) / Math.LN10;\n}\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @param {number} value\n * @return {string}\n */\nexport function logtoscinotation (value) {\n    if (isNaN(value)) {\n        return 'NaN';\n    }\n    if (value === 0) {\n        return '1';\n    }\n    const exp = Math.ceil(value);\n    const diff = exp - value;\n    const base = Math.pow(10, diff);\n    if (exp === 1) {\n        return (base / 10).toFixed(4);\n    } else if (exp === 2) {\n        return (base / 100).toFixed(3);\n    } else {\n        return `${base.toFixed(2)} × 10^-${exp}`;\n    }\n}\n\n/**\n * Represent a number in scientific notation\n * @param {Number} value\n * @returns {String}\n */\nexport function scinotation (value) {\n    if (isNaN(value)) {\n        return 'NaN';\n    }\n    if (value === 0) {\n        return '0';\n    }\n\n    const abs = Math.abs(value);\n    let log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3) {\n        return value.toFixed(3);\n    } else {\n        return value.toExponential(2).replace('+', '').replace('e', ' × 10^');\n    }\n}\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display. This protects against some forms of\n *  XSS injection when plotting user-provided data, as well as display artifacts from field values with HTML symbols\n *  such as `<` or `>`.\n * @param {String} value HTML-escape the provided value\n * @return {string}\n */\nexport function htmlescape (value) {\n    if (!value) {\n        return '';\n    }\n    value = `${value}`;\n\n    return value.replace(/['\"<>&`]/g, function (s) {\n        switch (s) {\n        case \"'\":\n            return '&#039;';\n        case '\"':\n            return '&quot;';\n        case '<':\n            return '&lt;';\n        case '>':\n            return '&gt;';\n        case '&':\n            return '&amp;';\n        case '`':\n            return '&#x60;';\n        }\n    });\n}\n\n/**\n * Return true if the value is numeric (including 0)\n *\n * This is useful in template code, where we might wish to hide a field that is absent, but show numeric values even if they are 0\n *   Eg, `{{#if value|is_numeric}}...{{/if}}\n *\n * @param {Number} value\n * @return {boolean}\n */\nexport function is_numeric(value) {\n    return typeof value === 'number';\n}\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @param {String} value\n * @return {string}\n */\nexport function urlencode (value) {\n    return encodeURIComponent(value);\n}\n","import {RegistryBase} from './base';\nimport * as transforms from '../helpers/transforms';\n\n/**\n * Registry of transformation functions that may be applied to template values to control how values are rendered.\n * Provides syntactic sugar atop a standard registry.\n * @public\n * @extends module:registry/base:RegistryBase\n * @inheritDoc\n */\nclass TransformationFunctionsRegistry extends RegistryBase {\n    /**\n     * Helper function that turns a sequence of function names into a single callable\n     * @param template_string\n     * @return {function(*=): *}\n     * @private\n     */\n    _collectTransforms(template_string) {\n        const funcs = template_string\n            .match(/\\|([^|]+)/g)\n            .map((item) => super.get(item.substring(1)));\n\n        return (value) => {\n            return funcs.reduce(\n                (acc, func) => func(acc),\n                value\n            );\n        };\n    }\n\n    /**\n     * In templates, we often use a single concatenated string to ask for several transformation functions at once:\n     *  `value|func1|func2`\n     * This class offers syntactical sugar to retrieve the entire sequence of transformations as a single callable\n     * @param name\n     */\n    get(name) {\n        if (!name) {\n            // This function is sometimes called with no value, and the expected behavior is to return null instead of\n            //  a callable\n            return null;\n        }\n        if (name.substring(0, 1) === '|') {\n            // Legacy artifact of how this function is called- if a pipe is present, this is the template string\n            //  (`|func1|func2...`), rather than any one single transformation function.\n            // A sequence of transformation functions is expected\n            return this._collectTransforms(name);\n        } else {\n            // If not a template string, then user is asking for an item by name directly\n            return super.get(name);\n        }\n    }\n}\n\n\n/**\n * A plugin registry that allows plots to use both pre-defined and user-provided transformation functions, which\n *  can be used to modify a value in the input data in a predefined way. For example, these can be used to let APIs\n *  that return p_values work with plots that display -log10(p)\n * @alias module:LocusZoom~TransformationFunctions\n * @type {TransformationFunctionsRegistry}\n */\nconst registry = new TransformationFunctionsRegistry();\nfor (let [name, type] of Object.entries(transforms)) {\n    registry.add(name, type);\n}\n\n\nexport default registry;\n// Export helper class for unit testing\nexport { TransformationFunctionsRegistry as _TransformationFunctions };\n","import transforms from '../registry/transforms';\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @private\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nclass Field {\n    constructor(field) {\n        const parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n        /** @member {String} */\n        this.full_name = field;\n        /** @member {String} */\n        this.namespace = parts[1] || null;\n        /** @member {String} */\n        this.name = parts[2] || null;\n        /** @member {Array} */\n        this.transformations = [];\n\n        if (typeof parts[3] == 'string' && parts[3].length > 1) {\n            this.transformations = parts[3].substring(1).split('|');\n            this.transformations.forEach((transform, i) => this.transformations[i] = transforms.get(transform));\n        }\n    }\n\n    _applyTransformations(val) {\n        this.transformations.forEach(function(transform) {\n            val = transform(val);\n        });\n        return val;\n    }\n\n    /**\n     * Resolve the field for a given data element.\n     *   First look for a full match with transformations already applied by the data requester.\n     *   Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n     * @param {Object} data Returned data/fields into for this element\n     * @param {Object} [extra] User-applied annotations for this point (info not provided by the server that we want\n     *  to preserve across re-renders). Example usage: \"should_show_label\"\n     * @returns {*}\n     */\n    resolve(data, extra) {\n        if (typeof data[this.full_name] == 'undefined') { // Check for cached result\n            let val = null;\n            if (typeof (data[`${this.namespace}:${this.name}`]) != 'undefined') { // Fallback: value sans transforms\n                val = data[`${this.namespace}:${this.name}`];\n            } else if (typeof data[this.name] != 'undefined') { // Fallback: value present without namespace\n                val = data[this.name];\n            } else if (extra && typeof extra[this.full_name] != 'undefined') { // Fallback: check annotations\n                val = extra[this.full_name];\n            } // We should really warn if no value found, but many bad layouts exist and this could break compatibility\n            data[this.full_name] = this._applyTransformations(val);\n        }\n        return data[this.full_name];\n    }\n}\n\nexport {Field as default};\n","/**\n * Simplified JSONPath implementation\n *\n * This is designed to make it easier to modify part of a LocusZoom layout, using a syntax based on intent\n *   (\"modify association panels\") rather than hard-coded assumptions (\"modify the first button, and gosh I hope the order doesn't change\")\n *\n * This DOES NOT support the full JSONPath specification. Notable limitations:\n * - Arrays can only be indexed by filter expression, not by number (can't ask for \"array item 1\")\n * - Filter expressions support only exact match, `field === value`. There is no support for \"and\" statements or\n *  arbitrary JS expressions beyond a single exact comparison. (the parser may be improved in the future if use cases emerge)\n *\n * @module\n * @private\n */\n\nconst ATTR_REGEX = /^(\\*|[\\w]+)/; // attribute names can be wildcard or valid variable names\nconst EXPR_REGEX = /^\\[\\?\\(@((?:\\.[\\w]+)+) *===? *([0-9.eE-]+|\"[^\"]*\"|'[^']*')\\)\\]/;  // Arrays can be indexed using filter expressions like `[?(@.id === value)]` where value is a number or a single-or-double quoted string\n\nfunction get_next_token(q) {\n    // This just grabs everything that looks good.\n    // The caller should check that the remaining query is valid.\n    if (q.substr(0, 2) === '..') {\n        if (q[2] === '[') {\n            return {\n                text: '..',\n                attr: '*',\n                depth: '..',\n            };\n        }\n        const m = ATTR_REGEX.exec(q.substr(2));\n        if (!m) {\n            throw `Cannot parse ${JSON.stringify(q)} as dotdot_attr.`;\n        }\n        return {\n            text: `..${m[0]}`,\n            attr: m[1],\n            depth: '..',\n        };\n    } else if (q[0] === '.') {\n        const m = ATTR_REGEX.exec(q.substr(1));\n        if (!m) {\n            throw `Cannot parse ${JSON.stringify(q)} as dot_attr.`;\n        }\n        return {\n            text: `.${m[0]}`,\n            attr: m[1],\n            depth: '.',\n        };\n    } else if (q[0] === '[') {\n        const m = EXPR_REGEX.exec(q);\n        if (!m) {\n            throw `Cannot parse ${JSON.stringify(q)} as expr.`;\n        }\n        let value;\n        try {\n            // Parse strings and numbers\n            value = JSON.parse(m[2]);\n        } catch (e) {\n            // Handle single-quoted strings\n            value = JSON.parse(m[2].replace(/^'|'$/g, '\"'));\n        }\n\n        return {\n            text: m[0],\n            attrs: m[1].substr(1).split('.'),\n            value,\n        };\n    } else {\n        throw `The query ${JSON.stringify(q)} doesn't look valid.`;\n    }\n}\n\nfunction normalize_query(q) {\n    // Normalize the start of the query so that it's just a bunch of selectors one-after-another.\n    // Otherwise the first selector is a little different than the others.\n    if (!q) {\n        return '';\n    }\n    if (!['$', '['].includes(q[0])) {\n        q = `$.${  q}`;\n    } // It starts with a dotless attr, so prepend the implied `$.`.\n    if (q[0] === '$') {\n        q = q.substr(1);\n    }  // strip the leading $\n    return q;\n}\n\nfunction tokenize (q) {\n    q = normalize_query(q);\n    let selectors = [];\n    while (q.length) {\n        const selector = get_next_token(q);\n        q = q.substr(selector.text.length);\n        selectors.push(selector);\n    }\n    return selectors;\n}\n\n/**\n * Fetch the attribute from a dotted path inside a nested object, eg `extract_path({k:['a','b']}, ['k', 1])` would retrieve `'b'`\n *\n * This function returns a three item array `[parent, key, object]`. This is done to support mutating the value, which requires access to the parent.\n *\n * @param obj\n * @param path\n * @returns {Array}\n */\nfunction get_item_at_deep_path(obj, path) {\n    let parent;\n    for (let key of path) {\n        parent = obj;\n        obj = obj[key];\n    }\n    return [parent, path[path.length - 1], obj];\n}\n\nfunction tokens_to_keys(data, selectors) {\n    // Resolve the jsonpath query into full path specifier keys in the object, eg\n    //  `$..data_layers[?(@.tag === 'association)].color\n    //  would become\n    // [\"panels\", 0, \"data_layers\", 1, \"color\"]\n    if (!selectors.length) {\n        return [[]];\n    }\n    const sel = selectors[0];\n    const remaining_selectors = selectors.slice(1);\n    let paths = [];\n\n    if (sel.attr && sel.depth === '.' && sel.attr !== '*') { // .attr\n        const d = data[sel.attr];\n        if (selectors.length === 1) {\n            if (d !== undefined) {\n                paths.push([sel.attr]);\n            }\n        } else {\n            paths.push(...tokens_to_keys(d, remaining_selectors).map((p) => [sel.attr].concat(p)));\n        }\n    } else if (sel.attr && sel.depth === '.' && sel.attr === '*') { // .*\n        for (let [k, d] of Object.entries(data)) {\n            paths.push(...tokens_to_keys(d, remaining_selectors).map((p) => [k].concat(p)));\n        }\n    } else if (sel.attr && sel.depth === '..') { // ..\n        // If `sel.attr` matches, recurse with that match.\n        // And also recurse on every value using unchanged selectors.\n        // I bet `..*..*` duplicates results, so don't do it please.\n        if (typeof data === 'object' && data !== null) {\n            if (sel.attr !== '*' && sel.attr in data) { // Exact match!\n                paths.push(...tokens_to_keys(data[sel.attr], remaining_selectors).map((p) => [sel.attr].concat(p)));\n            }\n            for (let [k, d] of Object.entries(data)) {\n                paths.push(...tokens_to_keys(d, selectors).map((p) => [k].concat(p))); // No match, just recurse\n                if (sel.attr === '*') { // Wildcard match\n                    paths.push(...tokens_to_keys(d, remaining_selectors).map((p) => [k].concat(p)));\n                }\n            }\n        }\n    } else if (sel.attrs) { // [?(@.attr===value)]\n        for (let [k, d] of Object.entries(data)) {\n            const [_, __, subject] = get_item_at_deep_path(d, sel.attrs);\n            if (subject === sel.value) {\n                paths.push(...tokens_to_keys(d, remaining_selectors).map((p) => [k].concat(p)));\n            }\n        }\n    }\n\n    const uniqPaths = uniqBy(paths, JSON.stringify); // dedup\n    uniqPaths.sort((a, b) => b.length - a.length || JSON.stringify(a).localeCompare(JSON.stringify(b))); // sort longest-to-shortest, breaking ties lexicographically\n    return uniqPaths;\n}\n\nfunction uniqBy(arr, key) {\n    // Sometimes, the process of resolving paths to selectors returns duplicate results. This returns only the unique paths.\n    return [...new Map(arr.map((elem) => [key(elem), elem])).values()];\n}\n\nfunction get_items_from_tokens(data, selectors) {\n    let items = [];\n    for (let path of tokens_to_keys(data, selectors)) {\n        items.push(get_item_at_deep_path(data, path));\n    }\n    return items;\n}\n\n/**\n * Perform a query, and return the item + its parent context\n * @param data\n * @param query\n * @returns {Array}\n * @private\n */\nfunction _query(data, query) {\n    const tokens = tokenize(query);\n\n    const matches = get_items_from_tokens(data, tokens);\n    if (!matches.length) {\n        console.warn(`No items matched the specified query: '${query}'`);\n    }\n    return matches;\n}\n\n/**\n * Fetch the value(s) for each possible match for a given query. Returns only the item values.\n * @param {object} data The data object to query\n * @param {string} query A JSONPath-compliant query string\n * @returns {Array}\n */\nfunction query(data, query) {\n    return _query(data, query).map((item) => item[2]);\n}\n\n/**\n * Modify the value(s) for each possible match for a given jsonpath query. Returns the new item values.\n * @param {object} data The data object to query\n * @param {string} query A JSONPath-compliant query string\n * @param {function|*} value_or_callback The new value for the specified field. Mutations will only be applied\n *  after the keys are resolved; this prevents infinite recursion, but could invalidate some matches\n *  (if the mutation removed the expected key).\n */\nfunction mutate(data, query, value_or_callback) {\n    const matches_in_context = _query(data, query);\n    return matches_in_context.map(([parent, key, old_value]) => {\n        const new_value = (typeof value_or_callback === 'function') ? value_or_callback(old_value) : value_or_callback;\n        parent[key] = new_value;\n        return new_value;\n    });\n}\n\nexport {mutate, query};\n","/**\n * Utilities for modifying or working with layout objects\n * @module\n * @private\n */\nimport * as d3 from 'd3';\n\nimport {mutate, query} from './jsonpath';\n\nconst sqrt3 = Math.sqrt(3);\n// D3 v5 does not provide a triangle down symbol shape, but it is very useful for showing direction of effect.\n//  Modified from https://github.com/d3/d3-shape/blob/master/src/symbol/triangle.js\nconst triangledown = {\n    draw(context, size) {\n        const y = -Math.sqrt(size / (sqrt3 * 3));\n        context.moveTo(0, -y * 2);\n        context.lineTo(-sqrt3 * y, y);\n        context.lineTo(sqrt3 * y, y);\n        context.closePath();\n    },\n};\n\n/**\n * Apply namespaces to layout, recursively\n * @private\n  */\nfunction applyNamespaces(element, namespace, default_namespace) {\n    if (namespace) {\n        if (typeof namespace == 'string') {\n            namespace = { default: namespace };\n        }\n    } else {\n        namespace = { default: '' };\n    }\n    if (typeof element == 'string') {\n        const re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n        let match, base, key, resolved_namespace;\n        const replace = [];\n        while ((match = re.exec(element)) !== null) {\n            base = match[0];\n            key = match[1].length ? match[1].replace(/(\\[|\\])/g, '') : null;\n            resolved_namespace = default_namespace;\n            if (namespace != null && typeof namespace == 'object' && typeof namespace[key] != 'undefined') {\n                resolved_namespace = namespace[key] + (namespace[key].length ? ':' : '');\n            }\n            replace.push({ base: base, namespace: resolved_namespace });\n        }\n        for (let r in replace) {\n            element = element.replace(replace[r].base, replace[r].namespace);\n        }\n    } else if (typeof element == 'object' && element != null) {\n        if (typeof element.namespace != 'undefined') {\n            const merge_namespace = (typeof element.namespace == 'string') ? { default: element.namespace } : element.namespace;\n            namespace = merge(namespace, merge_namespace);\n        }\n        let namespaced_element, namespaced_property;\n        for (let property in element) {\n            if (property === 'namespace') {\n                continue;\n            }\n            namespaced_element = applyNamespaces(element[property], namespace, default_namespace);\n            namespaced_property = applyNamespaces(property, namespace, default_namespace);\n            if (property !== namespaced_property) {\n                delete element[property];\n            }\n            element[namespaced_property] = namespaced_element;\n        }\n    }\n    return element;\n}\n\n/**\n * A helper method used for merging two objects. If a key is present in both, takes the value from the first object.\n *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n *\n * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n *\n * @alias LayoutRegistry.merge\n * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n * @param {object} default_layout An object containing default settings.\n * @returns {object} The custom layout is modified in place and also returned from this method.\n */\nfunction merge(custom_layout, default_layout) {\n    if (typeof custom_layout !== 'object' || typeof default_layout !== 'object') {\n        throw new Error(`LocusZoom.Layouts.merge only accepts two layout objects; ${typeof custom_layout}, ${typeof default_layout} given`);\n    }\n    for (let property in default_layout) {\n        if (!Object.prototype.hasOwnProperty.call(default_layout, property)) {\n            continue;\n        }\n        // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n        // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n        // Also separate arrays from objects as a discrete type.\n        let custom_type = custom_layout[property] === null ? 'undefined' : typeof custom_layout[property];\n        let default_type = typeof default_layout[property];\n        if (custom_type === 'object' && Array.isArray(custom_layout[property])) {\n            custom_type = 'array';\n        }\n        if (default_type === 'object' && Array.isArray(default_layout[property])) {\n            default_type = 'array';\n        }\n        // Unsupported property types: throw an exception\n        if (custom_type === 'function' || default_type === 'function') {\n            throw new Error('LocusZoom.Layouts.merge encountered an unsupported property type');\n        }\n        // Undefined custom value: pull the default value\n        if (custom_type === 'undefined') {\n            custom_layout[property] = deepCopy(default_layout[property]);\n            continue;\n        }\n        // Both values are objects: merge recursively\n        if (custom_type === 'object' && default_type === 'object') {\n            custom_layout[property] = merge(custom_layout[property], default_layout[property]);\n            continue;\n        }\n    }\n    return custom_layout;\n}\n\nfunction deepCopy(item) {\n    return JSON.parse(JSON.stringify(item));\n}\n\n/**\n * Convert name to symbol\n * Layout objects accept symbol names as strings (circle, triangle, etc). Convert to symbol objects.\n * @return {object|null} An object that implements a draw method (eg d3-shape symbols or extra LZ items)\n */\nfunction nameToSymbol(shape) {\n    if (!shape) {\n        return null;\n    }\n    if (shape === 'triangledown') {\n        // D3 does not provide this symbol natively\n        return triangledown;\n    }\n    // Legend shape names are strings; need to connect this to factory. Eg circle --> d3.symbolCircle\n    const factory_name = `symbol${shape.charAt(0).toUpperCase() + shape.slice(1)}`;\n    return d3[factory_name] || null;\n}\n\n/**\n * A utility helper for customizing one part of a pre-made layout. Whenever a primitive value is found (eg string),\n *  replaces *exact match*\n *\n * This method works by comparing whether strings are a match. As a result, the \"old\" and \"new\" names must match\n *  whatever namespacing is used in the input layout.\n * Note: this utility *can* replace values with filters, but will not do so by default.\n *\n * @alias LayoutRegistry.renameField\n *\n * @param {object} layout The layout object to be transformed.\n * @param {string} old_name The old field name that will be replaced\n * @param {string} new_name The new field name that will be substituted in\n * @param {boolean} [warn_transforms=true] Sometimes, a field name is used with transforms appended, eg `label|htmlescape`.\n *   In some cases a rename could change the meaning of the field, and by default this method will print a warning to\n *   the console, encouraging the developer to check the relevant usages. This warning can be silenced via an optional function argument.\n */\nfunction renameField(layout, old_name, new_name, warn_transforms = true) {\n    const this_type = typeof layout;\n    // Handle nested types by recursion (in which case, `layout` may be something other than an object)\n    if (Array.isArray(layout)) {\n        return layout.map((item) => renameField(item, old_name, new_name, warn_transforms));\n    } else if (this_type === 'object' && layout !== null) {\n        return Object.keys(layout).reduce(\n            (acc, key) => {\n                acc[key] = renameField(layout[key], old_name, new_name, warn_transforms);\n                return acc;\n            }, {}\n        );\n    } else if (this_type !== 'string') {\n        // Field names are always strings. If the value isn't a string, don't even try to change it.\n        return layout;\n    } else {\n        // If we encounter a field we are trying to rename, then do so!\n        // Rules:\n        //  1. Try to avoid renaming part of a field, by checking token boundaries (field1 should not rename field1_displayvalue)\n        //  2. Warn the user if filter functions are being used with the specified field, so they can audit for changes in meaning\n        const escaped = old_name.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n        if (warn_transforms) {\n            // Warn the user that they might be renaming, eg, `pvalue|neg_log` to `log_pvalue|neg_log`. Let them decide\n            //   whether the new field name has a meaning that is compatible with the specified transforms.\n            const filter_regex = new RegExp(`${escaped}\\\\|\\\\w+`, 'g');\n            const filter_matches = (layout.match(filter_regex) || []);\n            filter_matches.forEach((match_val) => console.warn(`renameFields is renaming a field that uses transform functions: was '${match_val}' . Verify that these transforms are still appropriate.`));\n        }\n\n        // Find and replace any substring, so long as it is at the end of a valid token\n        const regex = new RegExp(`${escaped}(?!\\\\w+)`, 'g');\n        return layout.replace(regex, new_name);\n    }\n}\n\n/**\n * Modify any and all attributes at the specified path in the object\n * @param {object} layout The layout object to be mutated\n * @param {string} selector The JSONPath-compliant selector string specifying which field(s) to change.\n *   The callback will be applied to ALL matching selectors\n *  (see Interactivity guide for syntax and limitations)\n * @param {*|function} value_or_callable The new value, or a function that receives the old value and returns a new one\n * @returns {Array}\n * @alias LayoutRegistry.mutate_attrs\n */\nfunction mutate_attrs(layout, selector, value_or_callable) {\n    return mutate(\n        layout,\n        selector,\n        value_or_callable\n    );\n}\n\n/**\n * Query any and all attributes at the specified path in the object.\n *      This is mostly only useful for debugging, to verify that a particular selector matches the intended field.\n * @param {object} layout The layout object to be mutated\n * @param {string} selector The JSONPath-compliant selector string specifying which values to return. (see Interactivity guide for limits)\n * @returns {Array}\n * @alias LayoutRegistry.query_attrs\n */\nfunction query_attrs(layout, selector) {\n    return query(layout, selector);\n}\n\nexport { applyNamespaces, deepCopy, merge, mutate_attrs, query_attrs, nameToSymbol, renameField };\n","import { TRANSFORMS } from '../registry';\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * This object is not part of the public interface. It should almost **never** be replaced or modified directly.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one source of data.\n * @param {DataSources} sources A set of data sources used specifically by this plot instance\n * @private\n */\nclass Requester {\n    constructor(sources) {\n        this._sources = sources;\n    }\n\n    __split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || 'base';\n            var field = parts[2];\n            var trans = TRANSFORMS.get(parts[3]);\n            if (typeof requests[ns] == 'undefined') {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    getData(state, fields) {\n        var requests = this.__split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map((key) => {\n            if (!this._sources.get(key)) {\n                throw new Error(`Datasource for namespace ${key} not found`);\n            }\n            return this._sources.get(key).getData(\n                state,\n                requests[key].fields,\n                requests[key].outnames,\n                requests[key].trans\n            );\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Promise.resolve({header:{}, body: [], discrete: {}});\n        for (var i = 0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    }\n}\n\n\nexport default Requester;\n","/**\n * @module\n * @private\n */\n// FIXME: A place for code that used to live under the `LocusZoom` namespace\n// Eventually this should be moved into classes or some other mechanism for code sharing. No external uses should\n//  depend on any items in this module.\n\nimport * as d3 from 'd3';\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nfunction generateCurtain() {\n    return {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: (content, css) => {\n            if (!this.curtain.showing) {\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-curtain')\n                    .attr('id', `${this.id}.curtain`);\n                this.curtain.content_selector = this.curtain.selector.append('div')\n                    .attr('class', 'lz-curtain-content');\n                this.curtain.selector.append('div')\n                    .attr('class', 'lz-curtain-dismiss').html('Dismiss')\n                    .on('click', () => this.curtain.hide());\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        },\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: (content, css) => {\n            if (!this.curtain.showing) {\n                return this.curtain;\n            }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == 'object') {\n                applyStyles(this.curtain.selector, css);\n            }\n            // Update size and position\n            const page_origin = this._getPageOrigin();\n\n            // Panel layouts have a height; plot layouts don't\n            const height = this.layout.height || this._total_height;\n            this.curtain.selector\n                .style('top', `${page_origin.y}px`)\n                .style('left', `${page_origin.x}px`)\n                .style('width', `${this.parent_plot.layout.width}px`)\n                .style('height', `${height}px`);\n            this.curtain.content_selector\n                .style('max-width', `${this.parent_plot.layout.width - 40}px`)\n                .style('max-height', `${height - 40}px`);\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        },\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: (delay) => {\n            if (!this.curtain.showing) {\n                return this.curtain;\n            }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        },\n    };\n}\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nfunction generateLoader() {\n    return {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: (content) => {\n            // Generate loader\n            if (!this.loader.showing) {\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div')\n                    .attr('class', 'lz-loader')\n                    .attr('id', `${this.id}.loader`);\n                this.loader.content_selector = this.loader.selector.append('div')\n                    .attr('class', 'lz-loader-content');\n                this.loader.progress_selector = this.loader.selector\n                    .append('div')\n                    .attr('class', 'lz-loader-progress-container')\n                    .append('div')\n                    .attr('class', 'lz-loader-progress');\n\n                this.loader.showing = true;\n                if (typeof content == 'undefined') {\n                    content = 'Loading...';\n                }\n            }\n            return this.loader.update(content);\n        },\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: (content, percent) => {\n            if (!this.loader.showing) {\n                return this.loader;\n            }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == 'string') {\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            const padding = 6; // is there a better place to store/define this?\n            const page_origin = this._getPageOrigin();\n            const loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector\n                .style('top', `${page_origin.y + this.layout.height - loader_boundrect.height - padding}px`)\n                .style('left', `${page_origin.x + padding  }px`);\n\n            // Apply percent if provided\n            if (typeof percent == 'number') {\n                this.loader.progress_selector\n                    .style('width', `${Math.min(Math.max(percent, 1), 100)}%`);\n            }\n            return this.loader;\n        },\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: () => {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', true);\n            return this.loader;\n        },\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: (percent) => {\n            this.loader.progress_selector.classed('lz-loader-progress-animated', false);\n            return this.loader.update(null, percent);\n        },\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: (delay) => {\n            if (!this.loader.showing) {\n                return this.loader;\n            }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == 'number') {\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        },\n    };\n}\n\n/**\n * Modern d3 removed the ability to set many styles at once (object syntax). This is a helper so that layouts with\n *  config-objects can set styles all at once\n * @private\n * @param {d3.selection} selection\n * @param {Object} styles\n */\nfunction applyStyles(selection, styles) {\n    styles = styles || {};\n    for (let [prop, value] of Object.entries(styles)) {\n        selection.style(prop, value);\n    }\n}\n\n/**\n * Prevent a UI function from being called more than once in a given interval. This allows, eg, search boxes to delay\n *   expensive operations until the user is done typing\n * @param {function} func The function to debounce. Returns a wrapper.\n * @param {number} delay Time to wait after last call (in ms)\n */\nfunction debounce(func, delay = 500) {\n    let timer;\n    return () => {\n        clearTimeout(timer);\n        timer = setTimeout(\n            () => func.apply(this, arguments),\n            delay\n        );\n    };\n}\n\nexport { applyStyles, debounce, generateCurtain, generateLoader };\n","/**\n * Interactive toolbar widgets that allow users to control the plot. These can be used to modify element display:\n *  adding contextual information, rearranging/removing panels, or toggling between sets of rendering options like\n *  different LD populations.\n * @module LocusZoom_Widgets\n */\nimport * as d3 from 'd3';\n\nimport {positionIntToString} from '../../helpers/display';\nimport {applyStyles, debounce} from '../../helpers/common';\nimport {deepCopy} from '../../helpers/layouts';\n\n\n/**\n *\n * A widget is an empty div rendered on a toolbar that can display custom\n * html of user interface elements.\n */\nclass BaseWidget {\n    /**\n     * @param {('left'|'right')} [layout.position='left']  Whether to float the widget left or right.\n     * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n     *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n     *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n     *  For example, the region_nav_plot toolbar is a defined as a group.\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} [layout.color='gray']  Color scheme for the\n     *   widget. Applies to buttons and menus.\n     * @param [layout.style] CSS styles that will be applied to the widget\n     * @param {Toolbar} parent The toolbar that contains this widget\n     */\n    constructor(layout, parent) {\n        /** @member {Object} */\n        this.layout = layout || {};\n        if (!this.layout.color) {\n            this.layout.color = 'gray';\n        }\n\n        /** @member {Toolbar|*} */\n        this.parent = parent || null;\n        /**\n         * Some widgets are attached to a panel, rather than directly to a plot\n         * @member {Panel|null}\n         */\n        this.parent_panel = null;\n        /** @member {Plot} */\n        this.parent_plot = null;\n        /**\n         * This is a reference to either the panel or the plot, depending on what the toolbar is\n         *   tied to. Useful when absolutely positioning toolbar widgets relative to their SVG anchor.\n         * @member {Plot|Panel}\n         */\n        this.parent_svg = null;\n        if (this.parent) {\n            if (this.parent.type === 'panel') {\n                this.parent_panel = this.parent.parent;\n                this.parent_plot = this.parent.parent.parent;\n                this.parent_svg = this.parent_panel;\n            } else {\n                this.parent_plot = this.parent.parent;\n                this.parent_svg = this.parent_plot;\n            }\n        }\n        /** @member {d3.selection} */\n        this.selector = null;\n        /**\n         * If this is an interactive widget, it will contain a button or menu instance that handles the interactivity.\n         *   There is a 1-to-1 relationship of toolbar widget to button\n         * @member {null|Button}\n         */\n        this.button = null;\n        /**\n         * If any single widget is marked persistent, it will bubble up to prevent automatic hide behavior on a\n         *   widget's parent toolbar. Check via `shouldPersist`\n         * @protected\n         * @member {Boolean}\n         */\n        this.persist = false;\n        if (!this.layout.position) {\n            this.layout.position = 'left';\n        }\n    }\n\n    /**\n     * Perform all rendering of widget, including toggling visibility to true. Will initialize and create SVG element\n     *   if necessary, as well as updating with new data and performing layout actions.\n     */\n    show() {\n        if (!this.parent || !this.parent.selector) {\n            return;\n        }\n        if (!this.selector) {\n            const group_position = (['start', 'middle', 'end'].includes(this.layout.group_position) ? ` lz-toolbar-group-${this.layout.group_position}` : '');\n            this.selector = this.parent.selector.append('div')\n                .attr('class', `lz-toolbar-${this.layout.position}${group_position}`);\n            if (this.layout.style) {\n                applyStyles(this.selector, this.layout.style);\n            }\n            if (typeof this.initialize == 'function') {\n                this.initialize();\n            }\n        }\n        if (this.button && this.button.status === 'highlighted') {\n            this.button.menu.show();\n        }\n        this.selector.style('visibility', 'visible');\n        this.update();\n        return this.position();\n    }\n\n    /**\n     * Update the toolbar widget with any new data or plot state as appropriate. This method performs all\n     *  necessary rendering steps.\n     */\n    update() { /* stub */\n    }\n\n    /**\n     * Place the widget correctly in the plot\n     * @returns {BaseWidget}\n     */\n    position() {\n        if (this.button) {\n            this.button.menu.position();\n        }\n        return this;\n    }\n\n    /**\n     * Determine whether the widget should persist (will bubble up to parent toolbar)\n     * @returns {boolean}\n     */\n    shouldPersist() {\n        if (this.persist) {\n            return true;\n        }\n        return !!(this.button && this.button.persist);\n    }\n\n    /**\n     * Toggle visibility to hidden, unless marked as persistent\n     * @returns {BaseWidget}\n     */\n    hide() {\n        if (!this.selector || this.shouldPersist()) {\n            return this;\n        }\n        if (this.button) {\n            this.button.menu.hide();\n        }\n        this.selector.style('visibility', 'hidden');\n        return this;\n    }\n\n    /**\n     * Completely remove widget and button. (may be overridden by persistence settings)\n     * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the toolbar\n     * @returns {Toolbar}\n     */\n    destroy(force) {\n        if (typeof force == 'undefined') {\n            force = false;\n        }\n        if (!this.selector) {\n            return this;\n        }\n        if (this.shouldPersist() && !force) {\n            return this;\n        }\n        if (this.button && this.button.menu) {\n            this.button.menu.destroy();\n        }\n        this.selector.remove();\n        this.selector = null;\n        this.button = null;\n        return this;\n    }\n}\n\n/**\n * Plots and panels may have a \"toolbar\" element suited for showing HTML widgets that may be interactive.\n *   When widgets need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework. This widget is rarely used directly; it is usually used as\n *   part of the code for other widgets.\n * @alias module:LocusZoom_Widgets~_Button\n * @param {BaseWidget} parent\n */\nclass Button {\n    constructor(parent) {\n        if (!(parent instanceof BaseWidget)) {\n            throw new Error('Unable to create toolbar widget button, invalid parent');\n        }\n        /** @member {BaseWidget} */\n        this.parent = parent;\n        /** @member {Panel} */\n        this.parent_panel = this.parent.parent_panel;\n        /** @member {Plot} */\n        this.parent_plot = this.parent.parent_plot;\n        /** @member {Plot|Panel} */\n        this.parent_svg = this.parent.parent_svg;\n\n        /** @member {Toolbar|null|*} */\n        this.parent_toolbar = this.parent.parent;\n        /** @member {d3.selection} */\n        this.selector = null;\n\n        /**\n         * Tag to use for the button (default: a)\n         * @member {String}\n         */\n        this.tag = 'a';\n\n        /**\n         * HTML for the button to show.\n         * @protected\n         * @member {String}\n         */\n        this.html = '';\n\n        /**\n         * Mouseover title text for the button to show\n         * @protected\n         * @member {String}\n         */\n        this.title = '';\n\n        /**\n         * Color of the button\n         * @member {String}\n         */\n        this.color = 'gray';\n\n        /**\n         * Hash of arbitrary button styles to apply as {name: value} entries\n         * @protected\n         * @member {Object}\n         */\n        this.style = {};\n\n        // Permanence\n        /**\n         * Track internal state on whether to keep showing the button/ menu contents at the moment\n         * @protected\n         * @member {Boolean}\n         */\n        this.persist = false;\n        /**\n         * Configuration when defining a button: track whether this widget should be allowed to keep open\n         *   menu/button contents in response to certain events\n         * @protected\n         * @member {Boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Button status (highlighted / disabled/ etc)\n         * @protected\n         * @member {String}\n         */\n        this.status = '';\n\n        /**\n         * Button Menu Object\n         * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n         *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n         * @member {Object}\n         */\n        this.menu = {\n            outer_selector: null,\n            inner_selector: null,\n            scroll_position: 0,\n            hidden: true,\n            /**\n             * Show the button menu, including setting up any DOM elements needed for first rendering\n             */\n            show: () => {\n                if (!this.menu.outer_selector) {\n                    this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append('div')\n                        .attr('class', `lz-toolbar-menu lz-toolbar-menu-${this.color}`)\n                        .attr('id', `${this.parent_svg.getBaseId()}.toolbar.menu`);\n                    this.menu.inner_selector = this.menu.outer_selector.append('div')\n                        .attr('class', 'lz-toolbar-menu-content');\n                    this.menu.inner_selector.on('scroll', () => {\n                        this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                    });\n                }\n                this.menu.outer_selector.style('visibility', 'visible');\n                this.menu.hidden = false;\n                return this.menu.update();\n            },\n            /**\n             * Update the rendering of the menu\n             */\n            update: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in widget definition\n                if (this.menu.inner_selector) {\n                    this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n                }\n                return this.menu.position();\n            },\n            position: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n                this.menu.outer_selector.style('height', null);\n                const padding = 3;\n                const scrollbar_padding = 20;\n                const menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n                const page_origin = this.parent_svg._getPageOrigin();\n                const page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n                const container_offset = this.parent_plot.getContainerOffset();\n                const toolbar_client_rect = this.parent_toolbar.selector.node().getBoundingClientRect();\n                const button_client_rect = this.selector.node().getBoundingClientRect();\n                const menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n                const total_content_height = this.menu.inner_selector.node().scrollHeight;\n                let top;\n                let left;\n                if (this.parent_toolbar.type === 'panel') {\n                    top = (page_origin.y + toolbar_client_rect.height + (2 * padding));\n                    left = Math.max(page_origin.x + this.parent_plot.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n                } else {\n                    top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                    left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n                }\n                const base_max_width = Math.max(this.parent_plot.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n                const container_max_width = base_max_width;\n                const content_max_width = (base_max_width - (4 * padding));\n                const base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n                const height = Math.min(total_content_height + menu_height_padding, base_max_height);\n                this.menu.outer_selector\n                    .style('top', `${top}px`)\n                    .style('left', `${left}px`)\n                    .style('max-width', `${container_max_width}px`)\n                    .style('max-height', `${base_max_height}px`)\n                    .style('height', `${height}px`);\n                this.menu.inner_selector\n                    .style('max-width', `${content_max_width}px`);\n                this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n                return this.menu;\n            },\n            hide: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                this.menu.outer_selector.style('visibility', 'hidden');\n                this.menu.hidden = true;\n                return this.menu;\n            },\n            destroy: () => {\n                if (!this.menu.outer_selector) {\n                    return this.menu;\n                }\n                this.menu.inner_selector.remove();\n                this.menu.outer_selector.remove();\n                this.menu.inner_selector = null;\n                this.menu.outer_selector = null;\n                return this.menu;\n            },\n            /**\n             * Internal method definition\n             * By convention populate() does nothing and should be reimplemented with each toolbar button definition\n             *   Reimplement by way of Toolbar.BaseWidget.Button.menu.setPopulate to define the populate method and hook\n             *   up standard menu click-toggle behavior prototype.\n             * @protected\n             */\n            populate: () => {\n                throw new Error('Method must be implemented');\n            },\n            /**\n             * Define how the menu is populated with items, and set up click and display properties as appropriate\n             * @public\n             */\n            setPopulate: (menu_populate_function) => {\n                if (typeof menu_populate_function == 'function') {\n                    this.menu.populate = menu_populate_function;\n                    this.setOnclick(() => {\n                        if (this.menu.hidden) {\n                            this.menu.show();\n                            this.highlight().update();\n                            this.persist = true;\n                        } else {\n                            this.menu.hide();\n                            this.highlight(false).update();\n                            if (!this.permanent) {\n                                this.persist = false;\n                            }\n                        }\n                    });\n                } else {\n                    this.setOnclick();\n                }\n                return this;\n            },\n        };\n    }\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {Button}\n     */\n    setColor (color) {\n        if (typeof color != 'undefined') {\n            if (['gray', 'red', 'orange', 'yellow', 'green', 'blue', 'purple'].includes(color)) {\n                this.color = color;\n            } else {\n                this.color = 'gray';\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {Button}\n     */\n    setPermanent (bool) {\n        if (typeof bool == 'undefined') {\n            bool = true;\n        } else {\n            bool = Boolean(bool);\n        }\n        this.permanent = bool;\n        if (this.permanent) {\n            this.persist = true;\n        }\n        return this;\n    }\n\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    shouldPersist () {\n        return this.permanent || this.persist;\n    }\n\n    /**\n * Set a collection of custom styles to be used by the button\n * @param {Object} style Hash of {name:value} entries\n * @returns {Button}\n */\n    setStyle (style) {\n        if (typeof style != 'undefined') {\n            this.style = style;\n        }\n        return this;\n    }\n\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    getClass () {\n        const group_position = (['start', 'middle', 'end'].includes(this.parent.layout.group_position) ? ` lz-toolbar-button-group-${this.parent.layout.group_position}` : '');\n        return `lz-toolbar-button lz-toolbar-button-${this.color}${this.status ? `-${this.status}` : ''}${group_position}`;\n    }\n\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    setStatus  (status) {\n        if (typeof status != 'undefined' && ['', 'highlighted', 'disabled'].includes(status)) {\n            this.status = status;\n        }\n        return this.update();\n    }\n\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {Button}\n     */\n    highlight (bool) {\n        if (typeof bool == 'undefined') {\n            bool = true;\n        } else {\n            bool = Boolean(bool);\n        }\n        if (bool) {\n            return this.setStatus('highlighted');\n        } else if (this.status === 'highlighted') {\n            return this.setStatus('');\n        }\n        return this;\n    }\n\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {Button}\n     */\n    disable (bool) {\n        if (typeof bool == 'undefined') {\n            bool = true;\n        } else {\n            bool = Boolean(bool);\n        }\n        if (bool) {\n            return this.setStatus('disabled');\n        } else if (this.status === 'disabled') {\n            return this.setStatus('');\n        }\n        return this;\n    }\n\n    // Mouse events\n    /** @member {function} */\n    onmouseover () {\n    }\n    setOnMouseover (onmouseover) {\n        if (typeof onmouseover == 'function') {\n            this.onmouseover = onmouseover;\n        } else {\n            this.onmouseover = function () {};\n        }\n        return this;\n    }\n\n    /** @member {function} */\n    onmouseout () {\n    }\n    setOnMouseout (onmouseout) {\n        if (typeof onmouseout == 'function') {\n            this.onmouseout = onmouseout;\n        } else {\n            this.onmouseout = function () {};\n        }\n        return this;\n    }\n\n    /** @member {function} */\n    onclick () {\n    }\n    setOnclick (onclick) {\n        if (typeof onclick == 'function') {\n            this.onclick = onclick;\n        } else {\n            this.onclick = function () {};\n        }\n        return this;\n    }\n\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {Button}\n     */\n    setTitle(title) {\n        if (typeof title != 'undefined') {\n            this.title = title.toString();\n        }\n        return this;\n    }\n\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {Button}\n     */\n    setHtml(html) {\n        if (typeof html != 'undefined') {\n            this.html = html.toString();\n        }\n        return this;\n    }\n\n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    show () {\n        if (!this.parent) {\n            return;\n        }\n        if (!this.selector) {\n            this.selector = this.parent.selector.append(this.tag)\n                .attr('class', this.getClass());\n        }\n        return this.update();\n    }\n\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {Button}\n     */\n    preUpdate () {\n        return this;\n    }\n\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {Button}\n     */\n    update () {\n        if (!this.selector) {\n            return this;\n        }\n        this.preUpdate();\n        this.selector\n            .attr('class', this.getClass())\n            .attr('title', this.title)\n            .on('mouseover', (this.status === 'disabled') ? null : this.onmouseover)\n            .on('mouseout', (this.status === 'disabled') ? null : this.onmouseout)\n            .on('click', (this.status === 'disabled') ? null : this.onclick)\n            .html(this.html)\n            .call(applyStyles, this.style);\n\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    }\n\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {Button}\n     */\n    postUpdate () {\n        return this;\n    }\n\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {Button}\n     */\n    hide() {\n        if (this.selector && !this.shouldPersist()) {\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    }\n\n}\n\n/**\n * Renders arbitrary text with large title formatting\n * @alias module:LocusZoom_Widgets~title\n * @param {string} layout.title Text or HTML to render\n * @param {string} [layout.subtitle] Small text to render next to the title\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass Title extends BaseWidget {\n    show() {\n        if (!this.div_selector) {\n            this.div_selector = this.parent.selector.append('div')\n                .attr('class', `lz-toolbar-title lz-toolbar-${this.layout.position}`);\n            this.title_selector = this.div_selector.append('h3');\n        }\n        return this.update();\n    }\n\n    update() {\n        let title = this.layout.title.toString();\n        if (this.layout.subtitle) {\n            title += ` <small>${this.layout.subtitle}</small>`;\n        }\n        this.title_selector.html(title);\n        return this;\n    }\n}\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`. Few users are interested in seeing coordinates with this level of precision, but\n *  it can be useful for debugging.\n *  TODO: It would be nice to move this to an extension, but helper functions drag in large dependencies as a side effect.\n *    (we'd need to reorganize internals a bit before moving this widget)\n * @alias module:LocusZoom_Widgets~region_scale\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass RegionScale extends BaseWidget {\n    update() {\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null) {\n            this.selector.style('display', null);\n            this.selector.html(positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style('display', 'none');\n        }\n        if (this.layout.class) {\n            this.selector.attr('class', this.layout.class);\n        }\n        if (this.layout.style) {\n            applyStyles(this.selector, this.layout.style);\n        }\n        return this;\n    }\n}\n\n/**\n * The filter field widget has triggered an update to the plot filtering rules\n *   Note: The widget can optionally be configured to broadcast this event under an alias (layout.custom_event_name)\n *\n * @event widget_filter_field_action\n * @property {Object} data { field, operator, value, filter_id }\n * @see event:any_lz_event\n */\n\n/**\n * @alias module:LocusZoom_Widgets~filter_field\n */\nclass FilterField extends BaseWidget {\n    /**\n     * @param {string} layout.layer_name The data layer to control with filtering\n     * @param {string} [layout.filter_id = null] Sometimes we want to define more than one filter with the same operator\n     *  (eg != null, != bacon). The `filter_id` option allows us to identify which filter is controlled by this widget.\n     * @param {string} layout.field The field to be filtered (eg `assoc:log_pvalue`)\n     * @param {string} layout.field_display_html Human-readable label for the field to be filtered (`-log<sub>10</sub>p`)\n     * @param {string} layout.operator The operator to use when filtering. This must be one of the options allowed by data_layer.filter.\n     * @param {number} [layout.input_size=4] How wide to make the input textbox (number characters shown at a time)\n     * @param {('number'|'string')} [layout.data_type='number'] Convert the text box input to the specified type, and warn the\n     *  user if the value would be invalid (eg, not numeric)\n     * @param {string} [layout.custom_event_name='widget_filter_field_action'] The name of the event that will be emitted when this filter is updated\n     */\n    constructor(layout, parent) {\n        super(layout, parent);\n\n        if (!this.parent_panel) {\n            throw new Error('Filter widget can only be used in panel toolbars');\n        }\n\n        this._data_layer = this.parent_panel.data_layers[layout.layer_name];\n        if (!this._data_layer) {\n            throw new Error(`Filter widget could not locate the specified layer_name: '${layout.layer_name}'`);\n        }\n\n        this._event_name = layout.custom_event_name || 'widget_filter_field_action';\n        this._field = layout.field;\n        this._field_display_html = layout.field_display_html;\n        this._operator = layout.operator;\n        this._filter_id = null;\n        this._data_type = layout.data_type || 'number';\n        if (!['number', 'string'].includes(this._data_type)) {\n            throw new Error('Filter must be either string or number');\n        }\n\n        this._value_selector = null;\n    }\n\n    _getTarget() {\n        // Find the specific filter in layer.layout.filters, and if not present, add one\n        if (!this._data_layer.layout.filters) {\n            this._data_layer.layout.filters = [];\n        }\n        let result = this._data_layer.layout.filters\n            .find((item) => item.field === this._field && item.operator === this._operator && (!this._filter_id || item.id === this._filter_id));\n\n        if (!result) {\n            result = { field: this._field, operator: this._operator, value: null };\n            if (this._filter_id) {\n                result['id'] = this._filter_id;\n            }\n            this._data_layer.layout.filters.push(result);\n        }\n        return result;\n    }\n\n    /** Clear the filter by removing it from the list */\n    _clearFilter() {\n        if (this._data_layer.layout.filters) {\n            const index = this._data_layer.layout.filters.indexOf(this._getTarget());\n            this._data_layer.layout.filters.splice(index, 1);\n        }\n    }\n\n    /**\n     * Set the filter based on a provided value\n     * @fires event:widget_filter_field_action\n     */\n    _setFilter(value) {\n        if (value === null) {\n            // On blank or invalid value, remove the filter & warn\n            this._value_selector\n                .style('border', '1px solid red')\n                .style('color', 'red');\n            this._clearFilter();\n        } else {\n            const filter = this._getTarget();\n            filter.value = value;\n        }\n        this.parent_svg.emit(this._event_name, { field: this._field, operator: this._operator, value, filter_id: this._filter_id }, true);\n    }\n\n    /** Get the user-entered value, coercing type if necessary. Returns null for invalid or missing values.\n     * @return {null|number|string}\n     * @private\n     */\n    _getValue() {\n        let value = this._value_selector.property('value');\n        if (value === null || value === '') {\n            return null;\n        }\n        if (this._data_type === 'number') {\n            value = +value;\n            if (Number.isNaN(value)) {\n                return null;\n            }\n        }\n        return value;\n    }\n\n    update() {\n        if (this._value_selector) {\n            return;\n        }\n        this.selector.style('padding', '0 6px');\n\n        // Label\n        this.selector\n            .append('span')\n            .html(this._field_display_html)\n            .style('background', '#fff')\n            .style('padding-left', '3px');\n        // Operator label\n        this.selector.append('span')\n            .text(this._operator)\n            .style('padding', '0 3px')\n            .style('background', '#fff');\n\n        this._value_selector = this.selector\n            .append('input')\n            .attr('size', this.layout.input_size || 4)\n            .on('input', debounce(() => {\n                // Clear validation state\n                this._value_selector\n                    .style('border', null)\n                    .style('color', null);\n                const value = this._getValue();\n                this._setFilter(value);\n                this.parent_panel.render();\n            }, 750));\n    }\n}\n\n/**\n * The user has asked to download the plot as an SVG image\n *   Note: The widget can optionally be configured to broadcast this event under an alias (layout.custom_event_name)\n *\n * @event widget_save_svg\n * @property {Object} data { filename }\n * @see event:any_lz_event\n */\n\n/**\n * The user has asked to download the plot as a PNG image\n *   Note: The widget can optionally be configured to broadcast this event under an alias (layout.custom_event_name)\n *\n * @event widget_save_png\n * @property {Object} data { filename }\n * @see event:any_lz_event\n */\n\n/**\n * Button to export current plot to an SVG image\n * @alias module:LocusZoom_Widgets~download_svg\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass DownloadSVG extends BaseWidget {\n    /**\n     * @param {string} [layout.button_html=\"Download SVG\"]\n     * @param {string} [layout.button_title=\"Download hi-res image\"]\n     * @param {string} [layout.filename=\"locuszoom.svg\"] The default filename to use when saving the image\n     * @param {string} [layout.custom_event_name='widget_save_svg'] The name of the event that will be emitted when the button is clicked\n     */\n    constructor(layout, parent) {\n        super(layout, parent);\n        this._filename = this.layout.filename || 'locuszoom.svg';\n        this._button_html = this.layout.button_html || 'Save SVG';\n        this._button_title = this.layout.button_title || 'Download hi-res image';\n        this._event_name = layout.custom_event_name || 'widget_save_svg';\n    }\n\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this._button_html)\n            .setTitle(this._button_title)\n            .setOnMouseover(() => {\n                this.button.selector\n                    .classed('lz-toolbar-button-gray-disabled', true)\n                    .html('Preparing Image');\n                this._getBlobUrl().then((url) => {\n                    const old = this.button.selector.attr('href');\n                    if (old) {\n                        // Clean up old url instance to prevent memory leaks\n                        URL.revokeObjectURL(old);\n                    }\n                    this.button.selector\n                        .attr('href', url)\n                        .classed('lz-toolbar-button-gray-disabled', false)\n                        .classed('lz-toolbar-button-gray-highlighted', true)\n                        .html(this._button_html);\n                });\n            })\n            .setOnMouseout(() => {\n                this.button.selector.classed('lz-toolbar-button-gray-highlighted', false);\n            });\n        this.button.show();\n        this.button.selector\n            .attr('href-lang', 'image/svg+xml')\n            .attr('download', this._filename)\n            .on('click', () => this.parent_svg.emit(this._event_name, { filename: this._filename }, true));\n        return this;\n    }\n\n    /**\n     * Extract all CSS rules whose selectors directly reference elements under the root node\n     * @param {Element} root\n     * @return {string}\n     * @private\n     */\n    _getCSS(root) {\n        // Hack: this method is based on text matching the rules on a given node; it doesn't handle, eg ancestors.\n        // Since all LZ cssRules are written as \"svg .classname\", we need to strip the parent selector prefix in order\n        // to extract CSS.\n        const ancestor_pattern = /^svg\\.lz-locuszoom\\s*/;\n\n        // Extract all relevant CSS Rules by iterating through all available stylesheets\n        let extractedCSSText = '';\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const s = document.styleSheets[i];\n            try {\n                if (!s.cssRules) {\n                    continue;\n                }\n            } catch ( e ) {\n                if (e.name !== 'SecurityError') {\n                    throw e;\n                } // for Firefox\n                continue;\n            }\n            let cssRules = s.cssRules;\n            for (let i = 0; i < cssRules.length; i++) {\n                // FIXME: We could write smaller SVGs by extracting only the exact CSS rules for this plot. However,\n                //   extracting rules (including parent selectors) is a finicky process\n                // Instead just fetch all LZ plot rules, under a known hardcoded parent selector.\n                const rule = cssRules[i];\n                const is_match = (rule.selectorText && rule.selectorText.match(ancestor_pattern));\n                if (is_match) {\n                    extractedCSSText += rule.cssText;\n                }\n            }\n        }\n        return extractedCSSText;\n    }\n\n    _appendCSS( cssText, element ) {\n        // Append styles to the constructed SVG DOM node\n        var styleElement = document.createElement('style');\n        styleElement.setAttribute('type', 'text/css');\n        styleElement.innerHTML = cssText;\n        var refNode = element.hasChildNodes() ? element.children[0] : null;\n        element.insertBefore( styleElement, refNode );\n    }\n\n    /**\n     * Get the target dimensions for the rendered image.\n     *\n     * For non-vector displays, these dimensions will yield ~300 DPI image for an 8\" wide print figure.\n     * @return {number[]}\n     * @private\n     */\n    _getDimensions() {\n        let { width, height } = this.parent_plot.svg.node().getBoundingClientRect();\n        const target_width = 2400;\n        const rescale = target_width / width;\n        return [rescale * width, rescale * height];\n    }\n\n    _generateSVG () {\n        return new Promise((resolve) => {\n            // Copy the DOM node so that we can modify the image for publication\n            let copy = this.parent_plot.svg.node().cloneNode(true);\n            copy.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n            copy = d3.select(copy);\n\n            // Remove unnecessary elements\n            copy.selectAll('g.lz-curtain').remove();\n            copy.selectAll('g.lz-mouse_guide').remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            copy.selectAll('g.tick text').each(function() {\n                const dy = +(d3.select(this).attr('dy').substring(-2).slice(0, -2)) * 10;\n                d3.select(this).attr('dy', dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            const serializer = new XMLSerializer();\n\n            copy = copy.node();\n\n            // Firefox has issues saving the SVG in certain contexts (esp rendering to canvas) unless a width is given.\n            //  See: https://bugzilla.mozilla.org/show_bug.cgi?id=700533\n            const [width, height] = this._getDimensions();\n            copy.setAttribute('width', width);\n            copy.setAttribute('height', height);\n\n            // Add CSS to the node\n            this._appendCSS(this._getCSS(copy), copy);\n            let svg_markup = serializer.serializeToString(copy);\n            resolve(svg_markup);\n        });\n    }\n\n    /**\n     * Converts the SVG string into a downloadable binary object\n     * @return {Promise}\n     */\n    _getBlobUrl() {\n        return this._generateSVG().then((markup) => {\n            const blob = new Blob([markup], { type: 'image/svg+xml' });\n            return URL.createObjectURL(blob);\n        });\n    }\n}\n\n/**\n * Button to export current plot to a PNG image\n * @alias module:LocusZoom_Widgets~download_png\n * @extends module:LocusZoom_Widgets~download_svg\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass DownloadPNG extends DownloadSVG {\n    /**\n     * @param {string} [layout.button_html=\"Download PNG\"]\n     * @param {string} [layout.button_title=\"Download image\"]\n     * @param {string} [layout.filename=\"locuszoom.svg\"] The default filename to use when saving the image\n     * @param {string} [layout.custom_event_name='widget_save_png'] The name of the event that will be emitted when the button is clicked\n     * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n     */\n    constructor(layout, parent) {\n        super(...arguments);\n        this._filename = this.layout.filename || 'locuszoom.png';\n        this._button_html = this.layout.button_html || 'Save PNG';\n        this._button_title = this.layout.button_title || 'Download image';\n        this._event_name = layout.custom_event_name || 'widget_save_png';\n    }\n\n    /**\n     * @private\n     */\n    _getBlobUrl() {\n        return super._getBlobUrl().then((svg_url) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n\n            const [width, height] = this._getDimensions();\n\n            canvas.width = width;\n            canvas.height = height;\n\n            return new Promise((resolve, reject) => {\n                const image = new Image();\n                image.onload = () => {\n                    context.drawImage(image, 0, 0, width, height);\n                    // Once canvas rendered, revoke svg blob to avoid memory leaks, and create new url for the canvas\n                    URL.revokeObjectURL(svg_url);\n                    canvas.toBlob((png) => {\n                        resolve(URL.createObjectURL(png));\n                    });\n                };\n                image.src = svg_url;\n            });\n        });\n    }\n}\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel widgets.\n * @alias module:LocusZoom_Widgets~remove_panel\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass RemovePanel extends BaseWidget {\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml('×')\n            .setTitle('Remove panel')\n            .setOnclick(() => {\n                if (!this.layout.suppress_confirm && !confirm('Are you sure you want to remove this panel? This cannot be undone.')) {\n                    return false;\n                }\n                const panel = this.parent_panel;\n                panel.toolbar.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on(`mouseover.${panel.getBaseId()}.toolbar`, null);\n                d3.select(panel.parent.svg.node().parentNode).on(`mouseout.${panel.getBaseId()}.toolbar`, null);\n                return panel.parent.removePanel(panel.id);\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel widgets.\n * @alias module:LocusZoom_Widgets~move_panel_up\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass MovePanelUp extends BaseWidget {\n    update () {\n        if (this.button) {\n            const is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml('▴')\n            .setTitle('Move panel up')\n            .setOnclick(() => {\n                this.parent_panel.moveUp();\n                this.update();\n            });\n        this.button.show();\n        return this.update();\n    }\n}\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel widgets.\n * @alias module:LocusZoom_Widgets~move_panel_down\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass MovePanelDown extends BaseWidget {\n    update () {\n        if (this.button) {\n            const is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length - 1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml('▾')\n            .setTitle('Move panel down')\n            .setOnclick(() => {\n                this.parent_panel.moveDown();\n                this.update();\n            });\n        this.button.show();\n        return this.update();\n    }\n}\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @alias module:LocusZoom_Widgets~shift_region\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass ShiftRegion extends BaseWidget {\n    /**\n     * @param {number} [layout.step=50000] The stepsize to change the region by\n     * @param {string} [layout.button_html] Label\n     * @param {string} [layout.button_title] Mouseover text\n     */\n    constructor(layout, parent) {\n        if (isNaN(layout.step) || layout.step === 0) {\n            layout.step = 50000;\n        }\n        if (typeof layout.button_html !== 'string') {\n            layout.button_html = layout.step > 0 ? '>' : '<';\n        }\n\n        if (typeof layout.button_title !== 'string') {\n            layout.button_title = `Shift region by ${layout.step > 0 ? '+' : '-'}${positionIntToString(Math.abs(layout.step), null, true)}`;\n        }\n        super(layout, parent);\n        if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n            throw new Error('Unable to add shift_region toolbar widget: plot state does not have region bounds');\n        }\n\n\n    }\n\n    update () {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html)\n            .setTitle(this.layout.button_title)\n            .setOnclick(() => {\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + this.layout.step, 1),\n                    end: this.parent_plot.state.end + this.layout.step,\n                });\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @alias module:LocusZoom_Widgets~zoom_region\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass ZoomRegion extends BaseWidget {\n    /**\n     * @param {number} [layout.step=0.2] The fraction to zoom in by (where 1 indicates 100%)\n     * @param {string} [layout.button_html] Label\n     * @param {string} [layout.button_title] Mouseover text\n     */\n    constructor(layout, parent) {\n        if (isNaN(layout.step) || layout.step === 0) {\n            layout.step = 0.2;\n        }\n        if (typeof layout.button_html != 'string') {\n            layout.button_html = layout.step > 0 ? 'z–' : 'z+';\n        }\n        if (typeof layout.button_title != 'string') {\n            layout.button_title = `Zoom region ${layout.step > 0 ? 'out' : 'in'} by ${(Math.abs(layout.step) * 100).toFixed(1)}%`;\n        }\n\n        super(layout, parent);\n        if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n            throw new Error('Unable to add zoom_region toolbar widget: plot state does not have region bounds');\n        }\n    }\n\n    update () {\n        if (this.button) {\n            let can_zoom = true;\n            const current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (this.layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale) {\n                can_zoom = false;\n            }\n            if (this.layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale) {\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html)\n            .setTitle(this.layout.button_title)\n            .setOnclick(() => {\n                const current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                const zoom_factor = 1 + this.layout.step;\n                let new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)) {\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)) {\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                const delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta,\n                });\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML. This is usually\n *   used as part of coding a custom button, rather than as a standalone widget.\n * NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @alias module:LocusZoom_Widgets~menu\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nclass Menu extends BaseWidget {\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html)\n            .setTitle(this.layout.button_title);\n        this.button.menu.setPopulate(() => {\n            this.button.menu.inner_selector.html(this.layout.menu_html);\n        });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @alias module:LocusZoom_Widgets~resize_to_data\n */\nclass ResizeToData extends BaseWidget {\n    /**\n     * @param {string} [layout.button_html=\"Resize to Data\"]\n     * @param {string} [layout.button_title]\n     */\n    constructor(layout) {\n        super(...arguments);\n    }\n    update() {\n        if (this.button) {\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setHtml(this.layout.button_html || 'Resize to Data')\n            .setTitle(this.layout.button_title || 'Automatically resize this panel to show all data available')\n            .setOnclick(() => {\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            });\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * Button to toggle legend\n * @alias module:LocusZoom_Widgets~toggle_legend\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass ToggleLegend extends BaseWidget {\n    update() {\n        const html = this.parent_panel.legend.layout.hidden ? 'Show Legend' : 'Hide Legend';\n        if (this.button) {\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new Button(this)\n            .setColor(this.layout.color)\n            .setTitle('Show or hide the legend for this panel')\n            .setOnclick(() => {\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            });\n        return this.update();\n    }\n}\n\n\n/**\n * @typedef {object} DisplayOptionsButtonConfigField\n * @property {string} display_name The human-readable label for this set of options\n * @property {object} display An object with layout directives that will be merged into the target layer.\n *   The directives should be among those listed in `fields_whitelist` for this widget.\n */\n\n/**\n * The user has chosen a specific display option to show information on the plot\n *   Note: The widget can optionally be configured to broadcast this event under an alias (layout.custom_event_name)\n *\n * @event widget_display_options_choice\n * @property {Object} data {choice} The display_name of the item chosen from the list\n * @see event:any_lz_event\n */\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n * @alias module:LocusZoom_Widgets~display_options\n * @see {@link module:LocusZoom_Widgets~BaseWidget} for additional options\n */\nclass DisplayOptions extends BaseWidget {\n    /**\n     * @param {string} layout.layer_name Specify the datalayer that this button should affect\n     * @param {String} [layout.button_html=\"Display options...\"] Text to display on the toolbar button\n     * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n     * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n     *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n     * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n     *   This can be overridden if this button needs to be used on a custom layer type with special options.\n     *   The whitelist is chosen to be things that are known to be easily modified with few side effects.\n     *   When the button is first created, all fields in the whitelist will have their default values saved, so the user can revert to the default view easily.\n     * @param {module:LocusZoom_Widgets~DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n     *  with this `display` option. Display field should include all changes that will be merged to datalayer layout options.\n     * @param {string} [layout.custom_event_name='widget_display_options_choice'] The name of the event that will be emitted when an option is selected\n     */\n    constructor(layout, parent) {\n        if (typeof layout.button_html != 'string') {\n            layout.button_html = 'Display options...';\n        }\n        if (typeof layout.button_title != 'string') {\n            layout.button_title = 'Control how plot items are displayed';\n        }\n        super(...arguments);\n        this._event_name = layout.custom_event_name || 'widget_display_options_choice';\n\n        // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n        //  information (like plot height etc) while changing point rendering\n        const allowed_fields = layout.fields_whitelist || ['color', 'fill_opacity', 'filters', 'label', 'legend',\n            'point_shape', 'point_size', 'tooltip', 'tooltip_positioning'];\n\n        const dataLayer = this.parent_panel.data_layers[layout.layer_name];\n        if (!dataLayer) {\n            throw new Error(`Display options could not locate the specified layer_name: '${layout.layer_name}'`);\n        }\n        const dataLayerLayout = dataLayer.layout;\n\n        // Store default configuration for the layer as a clean deep copy, so we may revert later\n        const defaultConfig = {};\n        allowed_fields.forEach((name) => {\n            const configSlot = dataLayerLayout[name];\n            if (configSlot !== undefined) {\n                defaultConfig[name] =  deepCopy(configSlot);\n            }\n        });\n\n        /**\n         * Which item in the menu is currently selected. (track for rerendering menu)\n         * @member {String}\n         * @private\n         */\n        this._selected_item = 'default';\n\n        // Define the button + menu that provides the real functionality for this toolbar widget\n\n        this.button = new Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html)\n            .setTitle(layout.button_title)\n            .setOnclick(() => {\n                this.button.menu.populate();\n            });\n        this.button.menu.setPopulate(() => {\n            // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n            const uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n            this.button.menu.inner_selector.html('');\n            const table = this.button.menu.inner_selector.append('table');\n\n            const menuLayout = this.layout;\n\n            const renderRow = (display_name, display_options, row_id) => { // Helper method\n                const row = table.append('tr');\n                const radioId = `${uniqueID}${row_id}`;\n                row.append('td')\n                    .append('input')\n                    .attr('id', radioId)\n                    .attr('type', 'radio')\n                    .attr('name', `display-option-${uniqueID}`)\n                    .attr('value', row_id)\n                    .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                    .property('checked', (row_id === this._selected_item))\n                    .on('click', () => {\n                        // If an option is not specified in these display options, use the original defaults\n                        allowed_fields.forEach((field_name) => {\n                            const has_option = typeof display_options[field_name] !== 'undefined';\n                            dataLayer.layout[field_name] = has_option ? display_options[field_name] : defaultConfig[field_name];\n                        });\n\n                        this.parent_svg.emit(this._event_name, { choice: display_name }, true);\n                        this._selected_item = row_id;\n                        this.parent_panel.render();\n                        const legend = this.parent_panel.legend;\n                        if (legend) {\n                            legend.render();\n                        }\n                    });\n                row.append('td').append('label')\n                    .style('font-weight', 'normal')\n                    .attr('for', radioId)\n                    .text(display_name);\n            };\n            // Render the \"display options\" menu: default and special custom options\n            const defaultName = menuLayout.default_config_display_name || 'Default style';\n            renderRow(defaultName, defaultConfig, 'default');\n            menuLayout.options.forEach((item, index) => renderRow(item.display_name, item.display, index));\n            return this;\n        });\n    }\n\n    update() {\n        this.button.show();\n        return this;\n    }\n}\n\n/**\n * @typedef {object} SetStateOptionsConfigField\n * @property {string} display_name Human readable name for option label (eg \"European\")\n * @property value Value to set in plot.state (eg \"EUR\")\n */\n\n/**\n * An option has been chosen from the set_state dropdown menu\n *   Note: The widget can optionally be configured to broadcast this event under an alias (layout.custom_event_name)\n *\n * @event widget_set_state_choice\n * @property {Object} data { choice_name, choice_value, state_field }\n * @see event:any_lz_event\n */\n\n/**\n * Dropdown menu allowing the user to set the value of a specific `state_field` in plot.state\n * This is useful for things (like datasources) that allow dynamic configuration based on global information in state\n *\n * For example, the LDServer data adapter can use it to change LD reference population (for all panels) after render\n *\n * @alias module:LocusZoom_Widgets~set_state\n * @param {String} [layout.button_html=\"Set option...\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Choose an option to customize the plot\"] Hover text for the toolbar button\n * @param {bool} [layout.show_selected=false] Whether to append the selected value to the button label (\"LD Population: ALL\")\n * @param {string} [layout.state_field] The name of the field in plot.state that will be set by this button\n * @param {module:LocusZoom_Widgets~SetStateOptionsConfigField[]} layout.options Specify human labels and associated values for the dropdown menu\n * @param {string} [layout.custom_event_name='widget_set_state_choice'] The name of the event that will be emitted when an option is selected\n */\nclass SetState extends BaseWidget {\n    constructor(layout, parent) {\n        if (typeof layout.button_html != 'string') {\n            layout.button_html = 'Set option...';\n        }\n        if (typeof layout.button_title != 'string') {\n            layout.button_title = 'Choose an option to customize the plot';\n        }\n\n        super(layout, parent);\n\n        if (this.parent_panel) {\n            throw new Error('This widget is designed to set global options, so it can only be used at the top (plot) level');\n        }\n        if (!layout.state_field) {\n            throw new Error('Must specify the `state_field` that this widget controls');\n        }\n\n        this._event_name = layout.custom_event_name || 'widget_set_state_choice';\n\n        /**\n         * Which item in the menu is currently selected. (track for rerendering menu)\n         * @member {String}\n         * @private\n         */\n        // The first option listed is automatically assumed to be the default, unless a value exists in plot.state\n        this._selected_item = this.parent_plot.state[layout.state_field] || layout.options[0].value;\n        if (!layout.options.find((item) => {\n            return item.value === this._selected_item;\n        })) {\n            // Check only gets run at widget creation, but generally this widget is assumed to be an exclusive list of options\n            throw new Error('There is an existing state value that does not match the known values in this widget');\n        }\n\n        // Define the button + menu that provides the real functionality for this toolbar widget\n        this.button = new Button(this)\n            .setColor(layout.color)\n            .setHtml(layout.button_html + (layout.show_selected ? this._selected_item : ''))\n            .setTitle(layout.button_title)\n            .setOnclick(() => {\n                this.button.menu.populate();\n            });\n        this.button.menu.setPopulate(() => {\n            // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n            const uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n            this.button.menu.inner_selector.html('');\n            const table = this.button.menu.inner_selector.append('table');\n\n            const renderRow = (display_name, value, row_id) => { // Helper method\n                const row = table.append('tr');\n                const radioId = `${uniqueID}${row_id}`;\n                row.append('td')\n                    .append('input')\n                    .attr('id', radioId)\n                    .attr('type', 'radio')\n                    .attr('name', `set-state-${uniqueID}`)\n                    .attr('value', row_id)\n                    .style('margin', 0) // Override css libraries (eg skeleton) that style form inputs\n                    .property('checked', (value === this._selected_item))\n                    .on('click', () => {\n                        const new_state = {};\n                        new_state[layout.state_field] = value;\n                        this._selected_item = value;\n                        this.parent_plot.applyState(new_state);\n                        this.button.setHtml(layout.button_html + (layout.show_selected ? this._selected_item : ''));\n\n                        this.parent_svg.emit(this._event_name, { choice_name: display_name, choice_value: value, state_field: layout.state_field }, true);\n                    });\n                row.append('td').append('label')\n                    .style('font-weight', 'normal')\n                    .attr('for', radioId)\n                    .text(display_name);\n            };\n            layout.options.forEach((item, index) => renderRow(item.display_name, item.value, index));\n            return this;\n        });\n    }\n\n    update() {\n        this.button.show();\n        return this;\n    }\n}\n\n\nexport {\n    BaseWidget,  // This is used to create subclasses\n    Button as _Button, // This is used to create Widgets that contain a button. It actually shouldn't be in the registry because it's not usable directly..\n    DisplayOptions as display_options,\n    DownloadSVG as download,\n    DownloadPNG as download_png,\n    FilterField as filter_field,\n    Menu as menu,\n    MovePanelDown as move_panel_down,\n    MovePanelUp as move_panel_up,\n    RegionScale as region_scale,\n    ResizeToData as resize_to_data,\n    SetState as set_state,\n    ShiftRegion as shift_region,\n    RemovePanel as remove_panel,\n    Title as title,\n    ToggleLegend as toggle_legend,\n    ZoomRegion as zoom_region,\n};\n","import {ClassRegistry} from './base';\nimport * as widgets from '../components/toolbar/widgets';\n\n/**\n * A plugin registry that allows plots to use both pre-defined and user-provided toolbar widgets: interactive buttons\n *  and menus that control plot display, modify data, or show additional information as context.\n * @alias module:LocusZoom~Widgets\n * @type {module:registry/base~ClassRegistry}\n */\nconst registry = new ClassRegistry();\n\nfor (let [name, type] of Object.entries(widgets)) {\n    registry.add(name, type);\n}\n\n\nexport default registry;\n","import widgets from '../../registry/widgets';\nimport * as d3 from 'd3';\n\n/**\n * A Toolbar is an HTML element used for presenting arbitrary user interface widgets. Toolbars are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each toolbar is an HTML-based (read: not SVG) collection of widgets used to display information or provide\n *   user interface. Toolbars can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n *\n * This class is used internally for rendering, and is not part of the public interface\n * @private\n */\nclass Toolbar {\n    constructor(parent) {\n        // parent must be a locuszoom plot or panel\n        // if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)) {\n        //     throw new Error('Unable to create toolbar, parent must be a locuszoom plot or panel');\n        // }\n        /** @member {Plot|Panel} */\n        this.parent = parent;\n\n        /** @member {String} */\n        this.id = `${this.parent.getBaseId()}.toolbar`;\n\n        /** @member {('plot'|'panel')} */\n        this.type = (this.parent.parent) ? 'panel' : 'plot';\n\n        /** @member {Plot} */\n        this.parent_plot = this.parent.parent_plot;\n\n        /** @member {d3.selection} */\n        this.selector = null;\n\n        /** @member {BaseWidget[]} */\n        this.widgets = [];\n\n        /**\n         * The timer identifier as returned by setTimeout\n         * @member {Number}\n         */\n        this.hide_timeout = null;\n\n        /**\n         * Whether to hide the toolbar. Can be overridden by a child widget. Check via `shouldPersist`\n         * @protected\n         * @member {Boolean}\n         */\n        this.persist = false;\n\n        this.initialize();\n    }\n\n    /**\n     * Prepare the toolbar for first use: generate all widget instances for this toolbar, based on the provided\n     *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n     * @returns {Toolbar}\n     */\n    initialize() {\n        // Parse layout to generate widget instances\n        // In LZ 0.12, `dashboard.components` was renamed to `toolbar.widgets`. Preserve a backwards-compatible alias.\n        const options = (this.parent.layout.dashboard && this.parent.layout.dashboard.components) || this.parent.layout.toolbar.widgets;\n        if (Array.isArray(options)) {\n            options.forEach((layout) => {\n                try {\n                    const widget = widgets.create(layout.type, layout, this);\n                    this.widgets.push(widget);\n                } catch (e) {\n                    console.warn('Failed to create widget');\n                    console.error(e);\n                }\n            });\n        }\n\n        // Add mouseover event handlers to show/hide panel toolbar\n        if (this.type === 'panel') {\n            d3.select(this.parent.parent.svg.node().parentNode)\n                .on(`mouseover.${this.id}`, () => {\n                    clearTimeout(this.hide_timeout);\n                    if (!this.selector || this.selector.style('visibility') === 'hidden') {\n                        this.show();\n                    }\n                }).on(`mouseout.${this.id}`, () => {\n                    clearTimeout(this.hide_timeout);\n                    this.hide_timeout = setTimeout(() => {\n                        this.hide();\n                    }, 300);\n                });\n        }\n\n        return this;\n    }\n\n    /**\n     * Whether to persist the toolbar. Returns true if at least one widget should persist, or if the panel is engaged\n     *   in an active drag event.\n     * @returns {boolean}\n     */\n    shouldPersist() {\n        if (this.persist) {\n            return true;\n        }\n        let persist = false;\n        // Persist if at least one widget should also persist\n        this.widgets.forEach((widget) => {\n            persist = persist || widget.shouldPersist();\n        });\n        // Persist if in a parent drag event\n        persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n        return !!persist;\n    }\n\n    /**\n     * Make the toolbar appear. If it doesn't exist yet create it, including creating/positioning all widgets within,\n     *   and make sure it is set to be visible.\n     */\n    show() {\n        if (!this.selector) {\n            switch (this.type) {\n            case 'plot':\n                this.selector = d3.select(this.parent.svg.node().parentNode)\n                    .insert('div', ':first-child');\n                break;\n            case 'panel':\n                this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                    .insert('div', '.lz-data_layer-tooltip, .lz-toolbar-menu, .lz-curtain').classed('lz-panel-toolbar', true);\n                break;\n            default:\n                throw new Error(`Toolbar cannot be a child of ${this.type}`);\n            }\n\n            this.selector\n                .classed('lz-toolbar', true)\n                .classed(`lz-${this.type}-toolbar`, true)\n                .attr('id', this.id);\n        }\n        this.widgets.forEach((widget) => widget.show());\n        this.selector.style('visibility', 'visible');\n        return this.update();\n    }\n\n\n    /**\n     * Update the toolbar and rerender all child widgets. This can be called whenever plot state changes.\n     * @returns {Toolbar}\n     */\n    update() {\n        if (!this.selector) {\n            return this;\n        }\n        this.widgets.forEach((widget) => widget.update());\n        return this.position();\n    }\n\n\n    /**\n     * Position the toolbar (and child widgets) within the panel\n     * @returns {Toolbar}\n     */\n    position() {\n        if (!this.selector) {\n            return this;\n        }\n        // Position the toolbar itself (panel only)\n        if (this.type === 'panel') {\n            const page_origin = this.parent._getPageOrigin();\n            const top = `${(page_origin.y + 3.5).toString()}px`;\n            const left = `${page_origin.x.toString()}px`;\n            const width = `${(this.parent_plot.layout.width - 4).toString()}px`;\n            this.selector\n                .style('position', 'absolute')\n                .style('top', top)\n                .style('left', left)\n                .style('width', width);\n        }\n        // Recursively position widgets\n        this.widgets.forEach((widget) => widget.position());\n        return this;\n    }\n\n    /**\n     * Hide the toolbar (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n     *\n     * @returns {Toolbar}\n     */\n    hide() {\n        if (!this.selector || this.shouldPersist()) {\n            return this;\n        }\n        this.widgets.forEach((widget) => widget.hide());\n        this.selector\n            .style('visibility', 'hidden');\n        return this;\n    }\n\n    /**\n     * Completely remove toolbar and all child widgets. (may be overridden by persistence settings)\n     * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the toolbar\n     * @returns {Toolbar}\n     */\n    destroy(force) {\n        if (typeof force == 'undefined') {\n            force = false;\n        }\n        if (!this.selector) {\n            return this;\n        }\n        if (this.shouldPersist() && !force) {\n            return this;\n        }\n        this.widgets.forEach((widget) => widget.destroy(true));\n        this.widgets = [];\n        this.selector.remove();\n        this.selector = null;\n        return this;\n    }\n}\n\n\nexport {Toolbar as default};\n","/**\n * @module\n * @private\n */\nimport * as d3 from 'd3';\nimport {applyStyles} from '../helpers/common';\nimport {merge, nameToSymbol} from '../helpers/layouts';\n\n// FIXME: Document legend options\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nconst default_layout = {\n    orientation: 'vertical',\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false,\n};\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @param {Panel} parent\n*/\nclass Legend {\n    constructor(parent) {\n        // if (!(parent instanceof LocusZoom.Panel)) {\n        //     throw new Error('Unable to create legend, parent must be a locuszoom panel');\n        // }\n        /** @member {Panel} */\n        this.parent = parent;\n        /** @member {String} */\n        this.id = `${this.parent.getBaseId()}.legend`;\n\n        this.parent.layout.legend = merge(this.parent.layout.legend || {}, default_layout);\n        /** @member {Object} */\n        this.layout = this.parent.layout.legend;\n\n        /** @member {d3.selection} */\n        this.selector = null;\n        /** @member {d3.selection} */\n        this.background_rect = null;\n        /** @member {d3.selection[]} */\n        this.elements = [];\n        /**\n         * SVG selector for the group containing all elements in the legend\n         * @protected\n         * @member {d3.selection|null}\n         */\n        this.elements_group = null;\n\n        /**\n         * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n         * @deprecated\n         * @protected\n         * @member {Boolean}\n         */\n        this.hidden = false;\n\n        return this.render();\n    }\n\n    /**\n     * Render the legend in the parent panel\n     */\n    render() {\n        // Get a legend group selector if not yet defined\n        if (!this.selector) {\n            this.selector = this.parent.svg.group.append('g')\n                .attr('id', `${this.parent.getBaseId()}.legend`).attr('class', 'lz-legend');\n        }\n\n        // Get a legend background rect selector if not yet defined\n        if (!this.background_rect) {\n            this.background_rect = this.selector.append('rect')\n                .attr('width', 100)\n                .attr('height', 100)\n                .attr('class', 'lz-legend-background');\n        }\n\n        // Get a legend elements group selector if not yet defined\n        if (!this.elements_group) {\n            this.elements_group = this.selector.append('g');\n        }\n\n        // Remove all elements from the document and re-render from scratch\n        this.elements.forEach((element) => element.remove());\n        this.elements = [];\n\n        // Gather all elements from data layers in order (top to bottom) and render them\n        const padding = +this.layout.padding || 1;\n        let x = padding;\n        let y = padding;\n        let line_height = 0;\n        this.parent.data_layer_ids_by_z_index.slice().reverse().forEach((id) => {\n            if (Array.isArray(this.parent.data_layers[id].layout.legend)) {\n                this.parent.data_layers[id].layout.legend.forEach((element) => {\n                    const selector = this.elements_group.append('g')\n                        .attr('transform', `translate(${x}, ${y})`);\n                    const label_size = +element.label_size || +this.layout.label_size || 12;\n                    let label_x = 0;\n                    let label_y = (label_size / 2) + (padding / 2);\n                    line_height = Math.max(line_height, label_size + padding);\n                    // Draw the legend element symbol (line, rect, shape, etc)\n                    const shape = element.shape || '';\n                    const shape_factory = nameToSymbol(shape);\n                    if (shape === 'line') {\n                        // Line symbol\n                        const length = +element.length || 16;\n                        const path_y = (label_size / 4) + (padding / 2);\n                        selector\n                            .append('path')\n                            .attr('class', element.class || '')\n                            .attr('d', `M0,${path_y}L${length},${path_y}`)\n                            .call(applyStyles, element.style || {});\n                        label_x = length + padding;\n                    } else if (shape === 'rect') {\n                        // Rect symbol\n                        const width = +element.width || 16;\n                        const height = +element.height || width;\n                        selector\n                            .append('rect')\n                            .attr('class', element.class || '')\n                            .attr('width', width)\n                            .attr('height', height)\n                            .attr('fill', element.color || {})\n                            .call(applyStyles, element.style || {});\n\n                        label_x = width + padding;\n                        line_height = Math.max(line_height, height + padding);\n                    } else if (shape_factory) {\n                        // Shape symbol is a recognized d3 type, so we can draw it in the legend (circle, diamond, etc.)\n                        const size = +element.size || 40;\n                        const radius = Math.ceil(Math.sqrt(size / Math.PI));\n                        selector\n                            .append('path')\n                            .attr('class', element.class || '')\n                            .attr('d', d3.symbol().size(size).type(shape_factory))\n                            .attr('transform', `translate(${radius}, ${radius + (padding / 2)})`)\n                            .attr('fill', element.color || {})\n                            .call(applyStyles, element.style || {});\n\n                        label_x = (2 * radius) + padding;\n                        label_y = Math.max((2 * radius) + (padding / 2), label_y);\n                        line_height = Math.max(line_height, (2 * radius) + padding);\n                    }\n                    // Draw the legend element label\n                    selector\n                        .append('text')\n                        .attr('text-anchor', 'left')\n                        .attr('class', 'lz-label')\n                        .attr('x', label_x)\n                        .attr('y', label_y)\n                        .style('font-size', label_size)\n                        .text(element.label);\n\n                    // Position the legend element group based on legend layout orientation\n                    const bcr = selector.node().getBoundingClientRect();\n                    if (this.layout.orientation === 'vertical') {\n                        y += bcr.height + padding;\n                        line_height = 0;\n                    } else {\n                        // Ensure this element does not exceed the panel width\n                        // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                        const right_x = this.layout.origin.x + x + bcr.width;\n                        if (x > padding && right_x > this.parent.parent.layout.width) {\n                            y += line_height;\n                            x = padding;\n                            selector.attr('transform', `translate(${x}, ${y})`);\n                        }\n                        x += bcr.width + (3 * padding);\n                    }\n                    // Store the element\n                    this.elements.push(selector);\n                });\n            }\n        });\n\n        // Scale the background rect to the elements in the legend\n        const bcr = this.elements_group.node().getBoundingClientRect();\n        this.layout.width = bcr.width + (2 * this.layout.padding);\n        this.layout.height = bcr.height + (2 * this.layout.padding);\n        this.background_rect\n            .attr('width', this.layout.width)\n            .attr('height', this.layout.height);\n\n        // Set the visibility on the legend from the \"hidden\" flag\n        // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n        this.selector\n            .style('visibility', this.layout.hidden ? 'hidden' : 'visible');\n\n        return this.position();\n    }\n\n    /**\n     * Place the legend in position relative to the panel, as specified in the layout configuration\n     * @returns {Legend | null}\n     * TODO: should this always be chainable?\n     */\n    position() {\n        if (!this.selector) {\n            return this;\n        }\n        const bcr = this.selector.node().getBoundingClientRect();\n        if (!isNaN(+this.layout.pad_from_bottom)) {\n            this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n        }\n        if (!isNaN(+this.layout.pad_from_right)) {\n            this.layout.origin.x = this.parent.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n        }\n        this.selector.attr('transform', `translate(${this.layout.origin.x}, ${this.layout.origin.y})`);\n    }\n\n    /**\n     * Hide the legend (triggers a re-render)\n     * @public\n     */\n    hide() {\n        this.layout.hidden = true;\n        this.render();\n    }\n\n    /**\n     * Show the legend (triggers a re-render)\n     * @public\n     */\n    show() {\n        this.layout.hidden = false;\n        this.render();\n    }\n}\n\nexport {Legend as default};\n","import * as d3 from 'd3';\n\nimport {STATUSES} from './constants';\nimport Toolbar from './toolbar';\nimport {applyStyles, generateCurtain, generateLoader} from '../helpers/common';\nimport {parseFields, positionIntToString, prettyTicks} from '../helpers/display';\nimport {merge} from '../helpers/layouts';\nimport Legend from './legend';\nimport data_layers from '../registry/data_layers';\n\n\n/**\n * Default panel layout\n * @memberof Panel\n * @static\n * @type {Object}\n */\nconst default_layout = {\n    id: '',\n    tag: 'custom_data_type',\n    title: { text: '', style: {}, x: 10, y: 22 },\n    y_index: null,\n    min_height: 1,\n    height: 1,\n    origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: 'clear_selections',\n    toolbar: {\n        widgets: [],\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 },\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {},\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false,\n    },\n    show_loading_indicator: true,\n    data_layers: [],\n};\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n */\nclass Panel {\n    /**\n     * @param {string} [layout.id=''] An identifier string that must be unique across all panels in the plot\n     * @param {string} [layout.tag='custom_data_type'] Tags have no functional purpose, but they can be used\n     *   as a semantic label for what is being displayed in this element. This makes it easy to write custom code like \"find every panel\n     *   that shows association scatter plots, anywhere\": even if the IDs are different, the tag can be the same.\n     *   Most built-in panels will contain a tag that describes, in human-readable terms, what kind of data is being shown.\n     *   (see: {@link LayoutRegistry.mutate_attrs})\n     * @param {boolean} [layout.show_loading_indicator=true] Whether to show a \"loading indicator\" while data is being fetched\n     * @param {module:LocusZoom_DataLayers[]} [layout.data_layers] Data layer layout objects\n     * @param {module:LocusZoom_Widgets[]} [layout.toolbar.widgets] Configuration options for each toolbar widget; {@link module:LocusZoom_Widgets}\n     * @param {number} [layout.title.text] Text to show in panel title\n     * @param {number} [layout.title.style] CSS options to apply to the title\n     * @param {number} [layout.title.x=10] x-offset for title position\n     * @param {number} [layout.title.y=22] y-offset for title position\n     * @param {'vertical'|'horizontal'} [layout.legend.orientation='vertical']  Orientation with which elements in the legend should be arranged.\n     *   Presently only \"vertical\" and \"horizontal\" are supported values. When using the horizontal orientation\n     *   elements will automatically drop to a new line if the width of the legend would exceed the right edge of the\n     *   containing panel. Defaults to \"vertical\".\n     * @param {number} [layout.legend.origin.x=0]  X-offset, in pixels, for the top-left corner of the legend (relative to the top left corner of the panel).\n     * @param {number} [layout.legend.origin.y=0] Y-offset, in pixels, for the top-left corner of the legend (relative to the top left corner of the panel).\n     *   NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n     * @param {number} [layout.legend.padding=5]  Value in pixels to pad between the legend's outer border and the\n     *   elements within the legend. This value is also used for spacing between elements in the legend on different\n     *   lines (e.g. in a vertical orientation) and spacing between element shapes and labels, as well as between\n     *   elements in a horizontal orientation, are defined as a function of this value. Defaults to 5.\n     * @param {number} [layout.legend.label_size=12]  Font size for element labels in the legend (loosely analogous to the height of full-height letters, in pixels). Defaults to 12.\n     * @param {boolean} [layout.legend.hidden=false] Whether to hide the legend by default\n     * @param {number} [layout.y_index] The position of the panel (above or below other panels). This is usually set\n     *  automatically when the panel is added, and rarely controlled directly.\n     * @param {number} [layout.min_height=1] When resizing, do not allow height to go below this value\n     * @param {number} [layout.height=1] The actual height allocated to the panel (>= min_height)\n     * @param {number} [layout.margin.top=0] The margin (space between top of panel and edge of viewing area)\n     * @param {number} [layout.margin.right=0] The margin (space between right side of panel and edge of viewing area)\n     * @param {number} [layout.margin.bottom=0] The margin (space between bottom of panel and edge of viewing area)\n     * @param {number} [layout.margin.left=0] The margin (space between left side of panel and edge of viewing area)\n     * @param {'clear_selections'|null} [layout.background_click='clear_selections'] What happens when the background of the panel is clicked\n     * @param {'state'|null} [layout.axes.x.extent] If 'state', the x extent will be determined from plot.state (a\n     *   shared region). Otherwise it will be determined based on data later ranges.\n     * @param {string} [layout.axes.x.label] Label text for the provided axis\n     * @param {number} [layout.axes.x.label_offset]\n     * @param {boolean} [layout.axes.x.render] Whether to render this axis\n     * @param {'region'|null} [layout.axes.x.tick_format] If 'region', format ticks in a concise way suitable for\n     *   genomic coordinates, eg 23423456 => 23.42 (Mb)\n     * @param {Array} [layout.axes.x.ticks] An array of custom ticks that will override any automatically generated)\n     * @param {string} [layout.axes.y1.label] Label text for the provided axis\n     * @param {number} [layout.axes.y1.label_offset]\n     * @param {boolean} [layout.axes.y1.render=false] Whether to render this axis\n     * @param {Array} [layout.axes.y1.ticks] An array of custom ticks that will override any automatically generated)\n     * @param {string} [layout.axes.y2.label] Label text for the provided axis\n     * @param {number} [layout.axes.y2.label_offset]\n     * @param {boolean} [layout.axes.y2.render=false] Whether to render this axis\n     * @param {Array} [layout.axes.y2.ticks] An array of custom ticks that will override any automatically generated)\n     * @param {boolean} [layout.interaction.drag_background_to_pan=false] Allow the user to drag the panel background to pan\n     *   the plot to another genomic region.\n     * @param {boolean} [layout.interaction.drag_x_ticks_to_scale=false] Allow the user to rescale the x axis by dragging x ticks\n     * @param {boolean}  [layout.interaction.drag_y1_ticks_to_scale=false] Allow the user to rescale the y1 axis by dragging y1 ticks\n     * @param {boolean} [layout.interaction.drag_y2_ticks_to_scale=false] Allow the user to rescale the y2 axis by dragging y2 ticks\n     * @param {boolean} [layout.interaction.scroll_to_zoom=false] Allow the user to rescale the plot by mousewheel-scrolling\n     * @param {boolean} [layout.interaction.x_linked=false] Whether this panel should change regions to match all other linked panels\n     * @param {boolean} [layout.interaction.y1_linked=false] Whether this panel should rescale to match all other linked panels\n     * @param {boolean} [layout.interaction.y2_linked=false] Whether this panel should rescale to match all other linked panels\n     * @param {Plot|null} parent\n     */\n    constructor(layout, parent) {\n        if (typeof layout !== 'object') {\n            throw new Error('Unable to create panel, invalid layout');\n        }\n\n        /**\n         * @protected\n         * @member {Plot|null}\n         */\n        this.parent = parent || null;\n        /**\n         *  @protected\n         *  @member {Plot|null}\n         */\n        this.parent_plot = parent;\n\n        // Ensure a valid ID is present. If there is no valid ID then generate one\n        if (typeof layout.id !== 'string' || !layout.id.length) {\n            if (!this.parent) {\n                layout.id = `p${Math.floor(Math.random() * Math.pow(10, 8))}`;\n            } else {\n                const generateID = () => {\n                    let id = `p${Math.floor(Math.random() * Math.pow(10, 8))}`;\n                    if (id === null || typeof this.parent.panels[id] != 'undefined') {\n                        id = generateID();\n                    }\n                    return id;\n                };\n                layout.id = generateID();\n            }\n        } else if (this.parent) {\n            if (typeof this.parent.panels[layout.id] !== 'undefined') {\n                throw new Error(`Cannot create panel with id [${layout.id}]; panel with that id already exists`);\n            }\n        }\n        /**\n         * @public\n         * @member {String}\n         */\n        this.id = layout.id;\n\n        /**\n         * @private\n         * @member {Boolean}\n         */\n        this.initialized = false;\n        /**\n         * The index of this panel in the parent plot's `layout.panels`\n         * @private\n         * @member {number}\n         * */\n        this.layout_idx = null;\n        /**\n         * @private\n         * @member {Object}\n         */\n        this.svg = {};\n\n        /**\n         * A JSON-serializable object used to describe the composition of the Panel\n         * @public\n         * @member {Object}\n         */\n        this.layout = merge(layout || {}, default_layout);\n\n        // Define state parameters specific to this panel\n        if (this.parent) {\n            /**\n             * @private\n             * @member {Object}\n             */\n            this.state = this.parent.state;\n\n            /**\n             *  @private\n             *  @member {String}\n             */\n            this.state_id = this.id;\n            this.state[this.state_id] = this.state[this.state_id] || {};\n        } else {\n            this.state = null;\n            this.state_id = null;\n        }\n\n        /**\n         * Direct access to data layer instances, keyed by data layer ID. Used primarily for introspection/ development.\n         * @public\n         * @member {Object.<String, BaseDataLayer>}\n         */\n        this.data_layers = {};\n        /**\n         * @private\n         * @member {String[]}\n         */\n        this.data_layer_ids_by_z_index = [];\n\n        /**\n         * Track data requests in progress\n         * @member {Promise[]}\n         * @private\n         */\n        this.data_promises = [];\n\n        /**\n         * @private\n         * @member {d3.scale}\n         */\n        this.x_scale  = null;\n        /**\n         * @private\n         * @member {d3.scale}\n         */\n        this.y1_scale = null;\n        /**\n         *  @private\n         *  @member {d3.scale}\n         */\n        this.y2_scale = null;\n\n        /**\n         * @private\n         * @member {d3.extent}\n         */\n        this.x_extent  = null;\n        /**\n         *  @private\n         *  @member {d3.extent}\n         */\n        this.y1_extent = null;\n        /**\n         *  @private\n         *  @member {d3.extent}\n         */\n        this.y2_extent = null;\n\n        /**\n         * @private\n         * @member {Number[]}\n         */\n        this.x_ticks  = [];\n        /**\n         *  @private\n         *  @member {Number[]}\n         */\n        this.y1_ticks = [];\n        /**\n         * @private\n         * @member {Number[]}\n         */\n        this.y2_ticks = [];\n\n        /**\n         * A timeout ID as returned by setTimeout\n         * @private\n         * @member {number}\n         */\n        this.zoom_timeout = null;\n\n        /**\n         * Known event hooks that the panel can respond to\n         * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n         * @protected\n         * @member {Object}\n         */\n        this.event_hooks = {};\n\n        // Initialize the layout\n        this.initializeLayout();\n    }\n\n    /******* Public methods: intended for direct external manipulation of panel internals */\n\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered.\n     *\n     * @public\n     * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n     * @param {String} event The name of the event. Consult documentation for the names of built-in events.\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    on(event, hook) {\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof event !== 'string') {\n            throw new Error(`Unable to register event hook. Event name must be a string: ${event.toString()}`);\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        if (!this.event_hooks[event]) {\n            // We do not validate on known event names, because LZ is allowed to track and emit custom events like \"widget button clicked\".\n            this.event_hooks[event] = [];\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    }\n\n    /**\n     * Remove one or more previously defined event listeners\n     * @public\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {Panel}\n     */\n    off(event, hook) {\n        const theseHooks = this.event_hooks[event];\n        if (typeof event != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error(`Unable to remove event hook, invalid event: ${event.toString()}`);\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            const hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @public\n     * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {Panel}\n     */\n    emit(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof event != 'string') {\n            throw new Error(`LocusZoom attempted to throw an invalid event: ${event.toString()}`);\n        }\n        if (typeof eventData === 'boolean' && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        const sourceID = this.getBaseId();\n        const eventContext = { sourceID: sourceID, target: this, data: eventData || null };\n\n        if (this.event_hooks[event]) {\n            // If the tree_fall event is emitted in a forest and no one is around to hear it, does it really make a sound?\n            this.event_hooks[event].forEach((hookToRun) => {\n                // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n                // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n                hookToRun.call(this, eventContext);\n            });\n        }\n\n        if (bubble && this.parent) {\n            // Even if this event has no listeners locally, it might still have listeners on the parent\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    }\n\n    /**\n     * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n     *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n     *   string, the title DOM element will be set to display: none.\n     *\n     * @public\n     * @param {string|object|null} title The title text, or an object with additional configuration\n     * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n     * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n     * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n        NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n     * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n     * @returns {Panel}\n     */\n    setTitle(title) {\n        if (typeof this.layout.title == 'string') {\n            const text = this.layout.title;\n            this.layout.title = { text: text, x: 0, y: 0, style: {} };\n        }\n        if (typeof title == 'string') {\n            this.layout.title.text = title;\n        } else if (typeof title == 'object' && title !== null) {\n            this.layout.title = merge(title, this.layout.title);\n        }\n        if (this.layout.title.text.length) {\n            this.title\n                .attr('display', null)\n                .attr('x', parseFloat(this.layout.title.x))\n                .attr('y', parseFloat(this.layout.title.y))\n                .text(this.layout.title.text)\n                .call(applyStyles, this.layout.title.style);\n\n        } else {\n            this.title.attr('display', 'none');\n        }\n        return this;\n    }\n\n    /**\n     * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n     * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n     *   in the layout provided.\n     *\n     * **NOTE**: It is very rare that new data layers are added after a panel is rendered.\n     * @public\n     * @param {object} layout\n     * @returns {BaseDataLayer}\n     */\n    addDataLayer(layout) {\n\n        // Sanity checks\n        if (typeof layout !== 'object' || typeof layout.id !== 'string' || !layout.id.length) {\n            throw new Error('Invalid data layer layout');\n        }\n        if (typeof this.data_layers[layout.id] !== 'undefined') {\n            throw new Error(`Cannot create data_layer with id [${layout.id}]; data layer with that id already exists in the panel`);\n        }\n        if (typeof layout.type !== 'string') {\n            throw new Error('Invalid data layer type');\n        }\n\n        // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n        if (typeof layout.y_axis == 'object' && (typeof layout.y_axis.axis == 'undefined' || ![1, 2].includes(layout.y_axis.axis))) {\n            layout.y_axis.axis = 1;\n        }\n\n        // Create the Data Layer\n        const data_layer = data_layers.create(layout.type, layout, this);\n\n        // Store the Data Layer on the Panel\n        this.data_layers[data_layer.id] = data_layer;\n\n        // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n        if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n            && this.data_layer_ids_by_z_index.length > 0) {\n            // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n            if (data_layer.layout.z_index < 0) {\n                data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n            }\n            this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n            this.data_layer_ids_by_z_index.forEach((dlid, idx) => {\n                this.data_layers[dlid].layout.z_index = idx;\n            });\n        } else {\n            const length = this.data_layer_ids_by_z_index.push(data_layer.id);\n            this.data_layers[data_layer.id].layout.z_index = length - 1;\n        }\n\n        // Determine if this data layer was already in the layout.data_layers array.\n        // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n        let layout_idx = null;\n        this.layout.data_layers.forEach((data_layer_layout, idx) => {\n            if (data_layer_layout.id === data_layer.id) {\n                layout_idx = idx;\n            }\n        });\n        if (layout_idx === null) {\n            layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n        }\n        this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n        return this.data_layers[data_layer.id];\n    }\n\n    /**\n     * Remove a data layer by id\n     * @public\n     * @param {string} id\n     * @returns {Panel}\n     */\n    removeDataLayer(id) {\n        if (!this.data_layers[id]) {\n            throw new Error(`Unable to remove data layer, ID not found: ${id}`);\n        }\n\n        // Destroy all tooltips for the data layer\n        this.data_layers[id].destroyAllTooltips();\n\n        // Remove the svg container for the data layer if it exists\n        if (this.data_layers[id].svg.container) {\n            this.data_layers[id].svg.container.remove();\n        }\n\n        // Delete the data layer and its presence in the panel layout and state\n        this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n        delete this.state[this.data_layers[id].state_id];\n        delete this.data_layers[id];\n\n        // Remove the data_layer id from the z_index array\n        this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n        // Update layout_idx and layout.z_index values for all remaining data_layers\n        this.applyDataLayerZIndexesToDataLayerLayouts();\n        this.layout.data_layers.forEach((data_layer_layout, idx) => {\n            this.data_layers[data_layer_layout.id].layout_idx = idx;\n        });\n\n        return this;\n    }\n\n    /**\n     * Clear all selections on all data layers\n     * @public\n     * @returns {Panel}\n     */\n    clearSelections() {\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].setAllElementStatus('selected', false);\n        });\n        return this;\n    }\n\n    /**\n     * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n     *   prepared the first time via `initialize`\n     * @public\n     * @returns {Panel}\n     */\n    render() {\n\n        // Position the panel container\n        this.svg.container.attr('transform', `translate(${this.layout.origin.x}, ${this.layout.origin.y})`);\n\n        // Set size on the clip rect\n        this.svg.clipRect\n            .attr('width', this.parent_plot.layout.width)\n            .attr('height', this.layout.height);\n\n        // Set and position the inner border, style if necessary\n        this.inner_border\n            .attr('x', this.layout.margin.left)\n            .attr('y', this.layout.margin.top)\n            .attr('width', this.parent_plot.layout.width - (this.layout.margin.left + this.layout.margin.right))\n            .attr('height', this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n        if (this.layout.inner_border) {\n            this.inner_border\n                .style('stroke-width', 1)\n                .style('stroke', this.layout.inner_border);\n        }\n\n        // Set/update panel title if necessary\n        this.setTitle();\n\n        // Regenerate all extents\n        this.generateExtents();\n\n        // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n        // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n        const constrain = function (value, limit_exponent) {\n            const neg_min = Math.pow(-10, limit_exponent);\n            const neg_max = Math.pow(-10, -limit_exponent);\n            const pos_min = Math.pow(10, -limit_exponent);\n            const pos_max = Math.pow(10, limit_exponent);\n            if (value === Infinity) {\n                value = pos_max;\n            }\n            if (value === -Infinity) {\n                value = neg_min;\n            }\n            if (value === 0) {\n                value = pos_min;\n            }\n            if (value > 0) {\n                value = Math.max(Math.min(value, pos_max), pos_min);\n            }\n            if (value < 0) {\n                value = Math.max(Math.min(value, neg_max), neg_min);\n            }\n            return value;\n        };\n\n        // Define default and shifted ranges for all axes\n        const ranges = {};\n        if (this.x_extent) {\n            const base_x_range = { start: 0, end: this.layout.cliparea.width };\n            if (this.layout.axes.x.range) {\n                base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n                base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n            }\n            ranges.x = [base_x_range.start, base_x_range.end];\n            ranges.x_shifted = [base_x_range.start, base_x_range.end];\n        }\n        if (this.y1_extent) {\n            const base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n            if (this.layout.axes.y1.range) {\n                base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n                base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n            }\n            ranges.y1 = [base_y1_range.start, base_y1_range.end];\n            ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n        }\n        if (this.y2_extent) {\n            const base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n            if (this.layout.axes.y2.range) {\n                base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n                base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n            }\n            ranges.y2 = [base_y2_range.start, base_y2_range.end];\n            ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n        }\n\n        // Shift ranges based on any drag or zoom interactions currently underway\n        if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.includes(this.id))) {\n            let anchor, scalar = null;\n            if (this.parent.interaction.zooming && typeof this.x_scale == 'function') {\n                const current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n                const current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n                let zoom_factor = this.parent.interaction.zooming.scale;\n                const potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n                if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)) {\n                    zoom_factor = 1 / (Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n                } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)) {\n                    zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n                }\n                const new_extent_size = Math.floor(current_extent_size * zoom_factor);\n                anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n                const offset_ratio = anchor / this.layout.cliparea.width;\n                const new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n                ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n            } else if (this.parent.interaction.dragging) {\n                switch (this.parent.interaction.dragging.method) {\n                case 'background':\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                    break;\n                case 'x_tick':\n                    if (d3.event && d3.event.shiftKey) {\n                        ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                        ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                    } else {\n                        anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                        scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                        ranges.x_shifted[0] = 0;\n                        ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                    }\n                    break;\n                case 'y1_tick':\n                case 'y2_tick': {\n                    const y_shifted = `y${this.parent.interaction.dragging.method[1]}_shifted`;\n                    if (d3.event && d3.event.shiftKey) {\n                        ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                        ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                    } else {\n                        anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                        scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                        ranges[y_shifted][0] = this.layout.cliparea.height;\n                        ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                    }\n                }\n                }\n            }\n        }\n\n        // Generate scales and ticks for all axes, then render them\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            if (!this[`${axis}_extent`]) {\n                return;\n            }\n\n            // Base Scale\n            this[`${axis}_scale`] = d3.scaleLinear()\n                .domain(this[`${axis}_extent`])\n                .range(ranges[`${axis}_shifted`]);\n\n            // Shift the extent\n            this[`${axis}_extent`] = [\n                this[`${axis}_scale`].invert(ranges[axis][0]),\n                this[`${axis}_scale`].invert(ranges[axis][1]),\n            ];\n\n            // Finalize Scale\n            this[`${axis}_scale`] = d3.scaleLinear()\n                .domain(this[`${axis}_extent`]).range(ranges[axis]);\n\n            // Render axis (and generate ticks as needed)\n            this.renderAxis(axis);\n        });\n\n        // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n        if (this.layout.interaction.scroll_to_zoom) {\n            const zoom_handler = () => {\n                // Look for a shift key press while scrolling to execute.\n                // If not present, gracefully raise a notification and allow conventional scrolling\n                if (!(d3.event.shiftKey || d3.event.altKey)) {\n                    if (this.parent._canInteract(this.id)) {\n                        this.loader.show('Press <tt>[SHIFT]</tt> or <tt>[ALT]</tt> while scrolling to zoom').hide(1000);\n                    }\n                    return;\n                }\n                d3.event.preventDefault();\n                if (!this.parent._canInteract(this.id)) {\n                    return;\n                }\n                const coords = d3.mouse(this.svg.container.node());\n                const delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n                if (delta === 0) {\n                    return;\n                }\n                this.parent.interaction = {\n                    panel_id: this.id,\n                    linked_panel_ids: this.getLinkedPanelIds('x'),\n                    zooming: {\n                        scale: (delta < 1) ? 0.9 : 1.1,\n                        center: coords[0],\n                    },\n                };\n                this.render();\n                this.parent.interaction.linked_panel_ids.forEach((panel_id) => {\n                    this.parent.panels[panel_id].render();\n                });\n                if (this.zoom_timeout !== null) {\n                    clearTimeout(this.zoom_timeout);\n                }\n                this.zoom_timeout = setTimeout(() => {\n                    this.parent.interaction = {};\n                    this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n                }, 500);\n            };\n            // FIXME: Consider moving back to d3.zoom and rewriting drag + zoom to use behaviors.\n            this.svg.container\n                .on('wheel.zoom', zoom_handler)\n                .on('mousewheel.zoom', zoom_handler)\n                .on('DOMMouseScroll.zoom', zoom_handler);\n        }\n\n        // Render data layers in order by z-index\n        this.data_layer_ids_by_z_index.forEach((data_layer_id) => {\n            this.data_layers[data_layer_id].draw().render();\n        });\n\n        // Rerender legend last (on top of data). A legend must have been defined at the start in order for this to work.\n        if (this.legend) {\n            this.legend.render();\n        }\n        return this;\n    }\n\n    /**\n     * Add a \"basic\" loader to a panel. This is rarely used directly: the `show_loading_indicator` panel layout\n     *   directive is the preferred way to trigger this function. The imperative form is useful if for some reason a\n     *   loading indicator needs to be added only after first render.\n     * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n     *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n     *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n     *\n     * @protected\n     * @listens event:data_requested\n     * @listens event:data_rendered\n     * @param {Boolean} show_immediately\n     * @returns {Panel}\n     */\n    addBasicLoader(show_immediately = true) {\n        if (this.layout.show_loading_indicator && this.initialized) {\n            // Prior to LZ 0.13, this function was called only after the plot was first rendered. Now, it is run by default.\n            //   Some older pages could thus end up adding a loader twice: to avoid duplicate render events,\n            //   short-circuit if a loader is already present after the first render has finished.\n            return this;\n        }\n        if (show_immediately) {\n            this.loader.show('Loading...').animate();\n        }\n        this.on('data_requested', () => {\n            this.loader.show('Loading...').animate();\n        });\n        this.on('data_rendered', () => {\n            this.loader.hide();\n        });\n\n        // Update layout to reflect new option\n        this.layout.show_loading_indicator = true;\n        return this;\n    }\n\n    /************* Private interface: only used internally */\n    /** @private */\n    applyDataLayerZIndexesToDataLayerLayouts () {\n        this.data_layer_ids_by_z_index.forEach((dlid, idx) => {\n            this.data_layers[dlid].layout.z_index = idx;\n        });\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    getBaseId () {\n        return `${this.parent.id}.${this.id}`;\n    }\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @private\n     * @returns {{x: Number, y: Number}}\n     */\n    _getPageOrigin() {\n        const plot_origin = this.parent._getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y,\n        };\n    }\n\n    /**\n     * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n     *   and preparing / positioning data layers as appropriate.\n     * @private\n     * @returns {Panel}\n     */\n    initializeLayout() {\n        // Set panel dimensions, origin, and margin\n        this.setDimensions();\n        this.setOrigin();\n        this.setMargin();\n\n        // Set ranges\n        // TODO: Define stub values in constructor\n        this.x_range = [0, this.layout.cliparea.width];\n        this.y1_range = [this.layout.cliparea.height, 0];\n        this.y2_range = [this.layout.cliparea.height, 0];\n\n        // Initialize panel axes\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render === false) {\n                // The default layout sets the axis to an empty object, so set its render boolean here\n                this.layout.axes[axis].render = false;\n            } else {\n                this.layout.axes[axis].render = true;\n                this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            }\n        });\n\n        // Add data layers (which define x and y extents)\n        this.layout.data_layers.forEach((data_layer_layout) => {\n            this.addDataLayer(data_layer_layout);\n        });\n\n        return this;\n    }\n\n    /**\n     * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n     *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n     *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n     *\n     * @private\n     * @param {number} [width]\n     * @param {number} [height]\n     * @returns {Panel}\n     */\n    setDimensions(width, height) {\n        if (typeof width != 'undefined' && typeof height != 'undefined') {\n            if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n                this.parent.layout.width = Math.round(+width);\n                // Ensure that the requested height satisfies all minimum values\n                this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n            }\n        }\n        this.layout.cliparea.width = Math.max(this.parent_plot.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n        this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n        if (this.svg.clipRect) {\n            this.svg.clipRect\n                .attr('width', this.parent.layout.width)\n                .attr('height', this.layout.height);\n        }\n        if (this.initialized) {\n            this.render();\n            this.curtain.update();\n            this.loader.update();\n            this.toolbar.update();\n            if (this.legend) {\n                this.legend.position();\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Set panel origin on the plot, and re-render as appropriate\n     *\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @returns {Panel}\n     */\n    setOrigin(x, y) {\n        if (!isNaN(x) && x >= 0) {\n            this.layout.origin.x = Math.max(Math.round(+x), 0);\n        }\n        if (!isNaN(y) && y >= 0) {\n            this.layout.origin.y = Math.max(Math.round(+y), 0);\n        }\n        if (this.initialized) {\n            this.render();\n        }\n        return this;\n    }\n\n    /**\n     * Set margins around this panel\n     * @private\n     * @param {number} top\n     * @param {number} right\n     * @param {number} bottom\n     * @param {number} left\n     * @returns {Panel}\n     */\n    setMargin(top, right, bottom, left) {\n        let extra;\n        if (!isNaN(top)    && top    >= 0) {\n            this.layout.margin.top = Math.max(Math.round(+top), 0);\n        }\n        if (!isNaN(right)  && right  >= 0) {\n            this.layout.margin.right = Math.max(Math.round(+right), 0);\n        }\n        if (!isNaN(bottom) && bottom >= 0) {\n            this.layout.margin.bottom = Math.max(Math.round(+bottom), 0);\n        }\n        if (!isNaN(left)   && left   >= 0) {\n            this.layout.margin.left = Math.max(Math.round(+left), 0);\n        }\n        // If the specified margins are greater than the available width, then shrink the margins.\n        if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height) {\n            extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n            this.layout.margin.top -= extra;\n            this.layout.margin.bottom -= extra;\n        }\n        if (this.layout.margin.left + this.layout.margin.right > this.parent_plot.layout.width) {\n            extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.parent_plot.layout.width) / 2);\n            this.layout.margin.left -= extra;\n            this.layout.margin.right -= extra;\n        }\n        ['top', 'right', 'bottom', 'left'].forEach((m) => {\n            this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n        });\n        this.layout.cliparea.width = Math.max(this.parent_plot.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n        this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n        this.layout.cliparea.origin.x = this.layout.margin.left;\n        this.layout.cliparea.origin.y = this.layout.margin.top;\n\n        if (this.initialized) {\n            this.render();\n        }\n        return this;\n    }\n\n    /**\n     * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n     *   elements such as axes,  title, and loader/curtain.\n     * @private\n     * @returns {Panel}\n     */\n    initialize() {\n\n        // Append a container group element to house the main panel group element and the clip path\n        // Position with initial layout parameters\n        const base_id = this.getBaseId();\n        this.svg.container = this.parent.svg.append('g')\n            .attr('id', `${base_id}.panel_container`)\n            .attr('transform', `translate(${this.layout.origin.x || 0}, ${this.layout.origin.y || 0})`);\n\n        // Append clip path to the parent svg element, size with initial layout parameters\n        const clipPath = this.svg.container.append('clipPath')\n            .attr('id', `${base_id}.clip`);\n        this.svg.clipRect = clipPath.append('rect')\n            .attr('width', this.parent_plot.layout.width)\n            .attr('height', this.layout.height);\n\n        // Append svg group for rendering all panel child elements, clipped by the clip path\n        this.svg.group = this.svg.container.append('g')\n            .attr('id', `${base_id}.panel`)\n            .attr('clip-path', `url(#${base_id}.clip)`);\n\n        // Add curtain and loader to the panel\n        /**\n         * @protected\n         * @member {Object}\n         */\n        this.curtain = generateCurtain.call(this);\n        /**\n         * @protected\n         * @member {Object}\n         */\n        this.loader = generateLoader.call(this);\n\n        if (this.layout.show_loading_indicator) {\n            // Activate the loading indicator prior to first render, and only show when data is loading\n            this.addBasicLoader(false);\n        }\n\n        /**\n         * Create the toolbar object and hang widgets on it as defined by panel layout\n         * @protected\n         * @member {Toolbar}\n         */\n        this.toolbar = new Toolbar(this);\n\n        // Inner border\n        this.inner_border = this.svg.group.append('rect')\n            .attr('class', 'lz-panel-background')\n            .on('click', () => {\n                if (this.layout.background_click === 'clear_selections') {\n                    this.clearSelections();\n                }\n            });\n\n        // Add the title\n        /**\n         * @private\n         * @member {Element}\n         */\n        this.title = this.svg.group.append('text').attr('class', 'lz-panel-title');\n        if (typeof this.layout.title != 'undefined') {\n            this.setTitle();\n        }\n\n        // Initialize Axes\n        this.svg.x_axis = this.svg.group.append('g')\n            .attr('id', `${base_id}.x_axis`)\n            .attr('class', 'lz-x lz-axis');\n        if (this.layout.axes.x.render) {\n            this.svg.x_axis_label = this.svg.x_axis.append('text')\n                .attr('class', 'lz-x lz-axis lz-label')\n                .attr('text-anchor', 'middle');\n        }\n        this.svg.y1_axis = this.svg.group.append('g')\n            .attr('id', `${base_id}.y1_axis`).attr('class', 'lz-y lz-y1 lz-axis');\n        if (this.layout.axes.y1.render) {\n            this.svg.y1_axis_label = this.svg.y1_axis.append('text')\n                .attr('class', 'lz-y1 lz-axis lz-label')\n                .attr('text-anchor', 'middle');\n        }\n        this.svg.y2_axis = this.svg.group.append('g')\n            .attr('id', `${base_id}.y2_axis`)\n            .attr('class', 'lz-y lz-y2 lz-axis');\n        if (this.layout.axes.y2.render) {\n            this.svg.y2_axis_label = this.svg.y2_axis.append('text')\n                .attr('class', 'lz-y2 lz-axis lz-label')\n                .attr('text-anchor', 'middle');\n        }\n\n        // Initialize child Data Layers\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].initialize();\n        });\n\n        /**\n         * Legend object, as defined by panel layout and child data layer layouts\n         * @protected\n         * @member {Legend}\n         * */\n        this.legend = null;\n        if (this.layout.legend) {\n            this.legend = new Legend(this);\n        }\n\n        // Establish panel background drag interaction mousedown event handler (on the panel background)\n        if (this.layout.interaction.drag_background_to_pan) {\n            const namespace = `.${this.parent.id}.${this.id}.interaction.drag`;\n            const mousedown = () => this.parent.startDrag(this, 'background');\n            this.svg.container.select('.lz-panel-background')\n                .on(`mousedown${namespace}.background`, mousedown)\n                .on(`touchstart${namespace}.background`, mousedown);\n        }\n\n        return this;\n    }\n\n    /**\n     * Refresh the sort order of all data layers (called by data layer moveForward and moveBack methods)\n     * @private\n     */\n    resortDataLayers() {\n        const sort = [];\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            sort.push(this.data_layers[id].layout.z_index);\n        });\n        this.svg.group\n            .selectAll('g.lz-data_layer-container')\n            .data(sort)\n            .sort(d3.ascending);\n        this.applyDataLayerZIndexesToDataLayerLayouts();\n    }\n\n    /**\n     * Get an array of panel IDs that are axis-linked to this panel\n     * @private\n     * @param {('x'|'y1'|'y2')} axis\n     * @returns {Array}\n     */\n    getLinkedPanelIds(axis) {\n        axis = axis || null;\n        const linked_panel_ids = [];\n        if (!['x', 'y1', 'y2'].includes(axis)) {\n            return linked_panel_ids;\n        }\n        if (!this.layout.interaction[`${axis}_linked`]) {\n            return linked_panel_ids;\n        }\n        this.parent.panel_ids_by_y_index.forEach((panel_id) => {\n            if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[`${axis}_linked`]) {\n                linked_panel_ids.push(panel_id);\n            }\n        });\n        return linked_panel_ids;\n    }\n\n    /**\n     * Move a panel up relative to others by y-index\n     * @private\n     * @returns {Panel}\n     */\n    moveUp() {\n        if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]) {\n            this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n            this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n            this.parent.applyPanelYIndexesToPanelLayouts();\n            this.parent.positionPanels();\n        }\n        return this;\n    }\n\n    /**\n     * Move a panel down (y-axis) relative to others in the plot\n     * @private\n     * @returns {Panel}\n     */\n    moveDown() {\n        if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]) {\n            this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n            this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n            this.parent.applyPanelYIndexesToPanelLayouts();\n            this.parent.positionPanels();\n        }\n        return this;\n    }\n\n    /**\n     * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n     *   from the API as the viewing region changes\n     * @private\n     * @fires event:data_requested\n     * @fires event:layout_changed\n     * @fires event:data_rendered\n     * @returns {Promise}\n     */\n    reMap() {\n        this.emit('data_requested');\n        this.data_promises = [];\n\n        // Remove any previous error messages before attempting to load new data\n        this.curtain.hide();\n        // Trigger reMap on each Data Layer\n        for (let id in this.data_layers) {\n            try {\n                this.data_promises.push(this.data_layers[id].reMap());\n            } catch (error) {\n                console.error(error);\n                this.curtain.show(error.message || error);\n            }\n        }\n        // When all finished trigger a render\n        return Promise.all(this.data_promises)\n            .then(() => {\n                this.initialized = true;\n                this.render();\n                this.emit('layout_changed', true);\n                this.emit('data_rendered');\n            })\n            .catch((error) => {\n                console.error(error);\n                this.curtain.show(error.message || error);\n            });\n    }\n\n    /**\n     * Iterate over data layers to generate panel axis extents\n     * @private\n     * @returns {Panel}\n     */\n    generateExtents() {\n\n        // Reset extents\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            this[`${axis}_extent`] = null;\n        });\n\n        // Loop through the data layers\n        for (let id in this.data_layers) {\n\n            const data_layer = this.data_layers[id];\n\n            // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n            if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled) {\n                this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent('x')));\n            }\n\n            // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n            if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled) {\n                const y_axis = `y${data_layer.layout.y_axis.axis}`;\n                this[`${y_axis}_extent`] = d3.extent((this[`${y_axis}_extent`] || []).concat(data_layer.getAxisExtent('y')));\n            }\n\n        }\n\n        // Override x_extent from state if explicitly defined to do so\n        if (this.layout.axes.x && this.layout.axes.x.extent === 'state') {\n            this.x_extent = [ this.state.start, this.state.end ];\n        }\n        return this;\n    }\n\n    /**\n     * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n     *   1. An array of specific tick marks\n     *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n     *     object to override the layer's default presentation settings\n     *   3. Generate generic tick marks based on the extent of the data\n     *\n     * @private\n     * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n     * @returns {Number[]|Object[]}  TODO: number format?\n     *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n     *   An array of objects: each object must have an 'x' attribute to position the tick.\n     *   Other supported object keys:\n     *     * text: string to render for a given tick\n     *     * style: d3-compatible CSS style object\n     *     * transform: SVG transform attribute string\n     *     * color: string or LocusZoom scalable parameter object\n     */\n    generateTicks(axis) {\n\n        // Parse an explicit 'ticks' attribute in the axis layout\n        if (this.layout.axes[axis].ticks) {\n            const layout = this.layout.axes[axis];\n\n            const baseTickConfig = layout.ticks;\n            if (Array.isArray(baseTickConfig)) {\n                // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n                return baseTickConfig;\n            }\n\n            if (typeof baseTickConfig === 'object') {\n                // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n                //   data layer to report the tick marks that it thinks it needs\n                // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n                const self = this;\n\n                // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n                const config = { position: baseTickConfig.position };\n\n                const combinedTicks = this.data_layer_ids_by_z_index.reduce((acc, data_layer_id) => {\n                    const nextLayer = self.data_layers[data_layer_id];\n                    return acc.concat(nextLayer.getTicks(axis, config));\n                }, []);\n\n                return combinedTicks.map((item) => {\n                    // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                    let itemConfig = {};\n                    itemConfig = merge(itemConfig, baseTickConfig);\n                    return merge(itemConfig, item);\n                });\n            }\n        }\n\n        // If no other configuration is provided, attempt to generate ticks from the extent\n        if (this[`${axis}_extent`]) {\n            return prettyTicks(this[`${axis}_extent`], 'both');\n        }\n        return [];\n    }\n\n    /**\n     * Render ticks for a particular axis\n     * @private\n     * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n     * @returns {Panel}\n     */\n    renderAxis(axis) {\n\n        if (!['x', 'y1', 'y2'].includes(axis)) {\n            throw new Error(`Unable to render axis; invalid axis identifier: ${axis}`);\n        }\n\n        const canRender = this.layout.axes[axis].render\n            && typeof this[`${axis}_scale`] == 'function'\n            && !isNaN(this[`${axis}_scale`](0));\n\n        // If the axis has already been rendered then check if we can/can't render it\n        // Make sure the axis element is shown/hidden to suit\n        if (this[`${axis}_axis`]) {\n            this.svg.container.select(`g.lz-axis.lz-${axis}`)\n                .style('display', canRender ? null : 'none');\n        }\n\n        if (!canRender) {\n            return this;\n        }\n\n        // Axis-specific values to plug in where needed\n        const axis_params = {\n            x: {\n                position: `translate(${this.layout.margin.left}, ${this.layout.height - this.layout.margin.bottom})`,\n                orientation: 'bottom',\n                label_x: this.layout.cliparea.width / 2,\n                label_y: (this.layout.axes[axis].label_offset || 0),\n                label_rotate: null,\n            },\n            y1: {\n                position: `translate(${this.layout.margin.left}, ${this.layout.margin.top})`,\n                orientation: 'left',\n                label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n                label_y: this.layout.cliparea.height / 2,\n                label_rotate: -90,\n            },\n            y2: {\n                position: `translate(${this.parent_plot.layout.width - this.layout.margin.right}, ${this.layout.margin.top})`,\n                orientation: 'right',\n                label_x: (this.layout.axes[axis].label_offset || 0),\n                label_y: this.layout.cliparea.height / 2,\n                label_rotate: -90,\n            },\n        };\n\n        // Generate Ticks\n        this[`${axis}_ticks`] = this.generateTicks(axis);\n\n        // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n        const ticksAreAllNumbers = ((ticks) => {\n            for (let i = 0; i < ticks.length; i++) {\n                if (isNaN(ticks[i])) {\n                    return false;\n                }\n            }\n            return true;\n        })(this[`${axis}_ticks`]);\n\n        // Initialize the axis; set scale and orientation\n        let axis_factory;\n        switch (axis_params[axis].orientation) {\n        case 'right':\n            axis_factory = d3.axisRight;\n            break;\n        case 'left':\n            axis_factory = d3.axisLeft;\n            break;\n        case 'bottom':\n            axis_factory = d3.axisBottom;\n            break;\n        default:\n            throw new Error('Unrecognized axis orientation');\n        }\n\n        this[`${axis}_axis`] = axis_factory(this[`${axis}_scale`])\n            .tickPadding(3);\n\n        // Set tick values and format\n        if (ticksAreAllNumbers) {\n            this[`${axis}_axis`].tickValues(this[`${axis}_ticks`]);\n            if (this.layout.axes[axis].tick_format === 'region') {\n                this[`${axis}_axis`].tickFormat((d) => positionIntToString(d, 6));\n            }\n        } else {\n            let ticks = this[`${axis}_ticks`].map((t) => {\n                return (t[axis.substr(0, 1)]);\n            });\n            this[`${axis}_axis`].tickValues(ticks)\n                .tickFormat((t, i) => {\n                    return this[`${axis}_ticks`][i].text;\n                });\n        }\n\n        // Position the axis in the SVG and apply the axis construct\n        this.svg[`${axis}_axis`]\n            .attr('transform', axis_params[axis].position)\n            .call(this[`${axis}_axis`]);\n\n        // If necessary manually apply styles and transforms to ticks as specified by the layout\n        if (!ticksAreAllNumbers) {\n            const tick_selector = d3.selectAll(`g#${this.getBaseId().replace('.', '\\\\.')}\\\\.${axis}_axis g.tick`);\n            const panel = this;\n            tick_selector.each(function (d, i) {\n                const selector = d3.select(this).select('text');\n                if (panel[`${axis}_ticks`][i].style) {\n                    applyStyles(selector, panel[`${axis}_ticks`][i].style);\n                }\n                if (panel[`${axis}_ticks`][i].transform) {\n                    selector.attr('transform', panel[`${axis}_ticks`][i].transform);\n                }\n            });\n        }\n\n        // Render the axis label if necessary\n        const label = this.layout.axes[axis].label || null;\n        if (label !== null) {\n            this.svg[`${axis}_axis_label`]\n                .attr('x', axis_params[axis].label_x)\n                .attr('y', axis_params[axis].label_y)\n                .text(parseFields(label, this.state))\n                .attr('fill', 'currentColor');\n            if (axis_params[axis].label_rotate !== null) {\n                this.svg[`${axis}_axis_label`]\n                    .attr('transform', `rotate(${axis_params[axis].label_rotate} ${axis_params[axis].label_x}, ${axis_params[axis].label_y})`);\n            }\n        }\n\n        // Attach interactive handlers to ticks as needed\n        ['x', 'y1', 'y2'].forEach((axis) => {\n            if (this.layout.interaction[`drag_${axis}_ticks_to_scale`]) {\n                const namespace = `.${this.parent.id}.${this.id}.interaction.drag`;\n                const tick_mouseover = function() {\n                    if (typeof d3.select(this).node().focus == 'function') {\n                        d3.select(this).node().focus();\n                    }\n                    let cursor = (axis === 'x') ? 'ew-resize' : 'ns-resize';\n                    if (d3.event && d3.event.shiftKey) {\n                        cursor = 'move';\n                    }\n                    d3.select(this)\n                        .style('font-weight', 'bold')\n                        .style('cursor', cursor )\n                        .on(`keydown${namespace}`, tick_mouseover)\n                        .on(`keyup${namespace}`, tick_mouseover);\n                };\n                this.svg.container.selectAll(`.lz-axis.lz-${axis} .tick text`)\n                    .attr('tabindex', 0) // necessary to make the tick focusable so keypress events can be captured\n                    .on(`mouseover${namespace}`, tick_mouseover)\n                    .on(`mouseout${namespace}`, function() {\n                        d3.select(this)\n                            .style('font-weight', 'normal')\n                            .on(`keydown${namespace}`, null)\n                            .on(`keyup${namespace}`, null);\n                    })\n                    .on(`mousedown${namespace}`, () => {\n                        this.parent.startDrag(this, `${axis}_tick`);\n                    });\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Force the height of this panel to the largest absolute height of the data in\n     *   all child data layers (if not null for any child data layers)\n     * @private\n     * @param {number|null} [target_height] A target height, which will be used in situations when the expected height can be\n     *   pre-calculated (eg when the layers are transitioning)\n     */\n    scaleHeightToData(target_height) {\n        target_height = +target_height || null;\n        if (target_height === null) {\n            this.data_layer_ids_by_z_index.forEach((id) => {\n                const dh = this.data_layers[id].getAbsoluteDataHeight();\n                if (+dh) {\n                    if (target_height === null) {\n                        target_height = +dh;\n                    } else {\n                        target_height = Math.max(target_height, +dh);\n                    }\n                }\n            });\n        }\n        if (+target_height) {\n            target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n            // FIXME: plot.setDimensions calls panel.setDimensions (though without arguments)\n            this.setDimensions(this.parent_plot.layout.width, target_height);\n            this.parent.setDimensions();\n            this.parent.positionPanels();\n        }\n    }\n\n    /**\n     * Set/unset element statuses across all data layers\n     * @private\n     * @param {String} status\n     * @param {Boolean} toggle\n     */\n    setAllElementStatus(status, toggle) {\n        this.data_layer_ids_by_z_index.forEach((id) => {\n            this.data_layers[id].setAllElementStatus(status, toggle);\n        });\n    }\n}\n\nSTATUSES.verbs.forEach((verb, idx) => {\n    const adjective = STATUSES.adjectives[idx];\n    const antiverb = `un${verb}`;\n\n    // Set/unset status for all elements\n    /**\n     * @private\n     * @function highlightAllElements\n     */\n    /**\n     *  @private\n     *  @function selectAllElements\n     */\n    /**\n     *  @private\n     *  @function fadeAllElements\n     */\n    /**\n     *  @private\n     *  @function hideAllElements\n     */\n    Panel.prototype[`${verb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function unhighlightAllElements\n     */\n    /**\n     *  @private\n     *  @function unselectAllElements\n     */\n    /**\n     * @private\n     * @function unfadeAllElements\n     */\n    /**\n     *  @private\n     *  @function unhideAllElements\n     */\n    Panel.prototype[`${antiverb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\nexport {Panel as default};\n","/**\n * Helpers that control the display of individual points and field values\n * @module\n * @private\n */\nimport * as d3 from 'd3';\n\nimport Field from '../data/field';\nimport Plot from '../components/plot';\nimport {applyStyles} from './common';\n\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {Number} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nfunction positionIntToString(pos, exp, suffix) {\n    const exp_symbols = { 0: '', 3: 'K', 6: 'M', 9: 'G' };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null) {\n        const log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    const places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    const min_exp = Math.min(Math.max(exp, 0), 2);\n    const places = Math.min(Math.max(places_exp, min_exp), 12);\n    let ret = `${(pos / Math.pow(10, exp)).toFixed(places)}`;\n    if (suffix && typeof exp_symbols[exp] !== 'undefined') {\n        ret += ` ${exp_symbols[exp]}b`;\n    }\n    return ret;\n}\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nfunction positionStringToInt(p) {\n    let val = p.toUpperCase();\n    val = val.replace(/,/g, '');\n    const suffixre = /([KMG])[B]*$/;\n    const suffix = suffixre.exec(val);\n    let mult = 1;\n    if (suffix) {\n        if (suffix[1] === 'M') {\n            mult = 1e6;\n        } else if (suffix[1] === 'G') {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre, '');\n    }\n    val = Number(val) * mult;\n    return val;\n}\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nfunction prettyTicks(range, clip_range, target_tick_count) {\n    if (typeof target_tick_count == 'undefined' || isNaN(parseInt(target_tick_count))) {\n        target_tick_count = 5;\n    }\n    target_tick_count = +target_tick_count;\n\n    const min_n = target_tick_count / 3;\n    const shrink_sml = 0.75;\n    const high_u_bias = 1.5;\n    const u5_bias = 0.5 + 1.5 * high_u_bias;\n\n    const d = Math.abs(range[0] - range[1]);\n    let c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2) {\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n\n    const base = Math.pow(10, Math.floor(Math.log(c) / Math.LN10));\n    let base_toFixed = 0;\n    if (base < 1 && base !== 0) {\n        base_toFixed = Math.abs(Math.round(Math.log(base) / Math.LN10));\n    }\n\n    let unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ) {\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ) {\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ) {\n                unit = 10 * base;\n            }\n        }\n    }\n\n    let ticks = [];\n    let i = parseFloat((Math.floor(range[0] / unit) * unit).toFixed(base_toFixed));\n    while (i < range[1]) {\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0) {\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n\n    if (typeof clip_range == 'undefined' || ['low', 'high', 'both', 'neither'].indexOf(clip_range) === -1) {\n        clip_range = 'neither';\n    }\n    if (clip_range === 'low' || clip_range === 'both') {\n        if (ticks[0] < range[0]) {\n            ticks = ticks.slice(1);\n        }\n    }\n    if (clip_range === 'high' || clip_range === 'both') {\n        if (ticks[ticks.length - 1] > range[1]) {\n            ticks.pop();\n        }\n    }\n\n    return ticks;\n}\n\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values in data! Will ignore non-scalars. This is useful in, eg, tooltip templates.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if field_name}} Conditional text {{/if}}` will insert the contents of the tag only if the value exists.\n *     This can be used with namespaced values, `{{#if assoc:field}}`; any dynamic namespacing will be applied when the\n *     layout is first retrieved. For numbers, transforms like `{{#if field|is_numeric}}` can help to ensure that 0\n *     values are displayed when expected.\n *     Can optionally take an else block, useful for things like toggle buttons: {{#if field}} ... {{#else}} ... {{/if}}\n * @param {Object} data The data associated with a particular element. Eg, tooltips often appear over a specific point.\n * @param {Object|null} extra Any additional fields (eg element annotations) associated with the specified datum\n * @returns {string}\n */\nfunction parseFields(html, data, extra) {\n    if (typeof data != 'object') {\n        throw new Error('invalid arguments: data is not an object');\n    }\n    if (typeof html != 'string') {\n        throw new Error('invalid arguments: html is not a string');\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    const tokens = [];\n    const regex = /{{(?:(#if )?([A-Za-z0-9_:|]+)|(#else)|(\\/if))}}/;\n    while (html.length > 0) {\n        const m = regex.exec(html);\n        if (!m) {\n            tokens.push({text: html});\n            html = '';\n        } else if (m.index !== 0) {\n            tokens.push({text: html.slice(0, m.index)});\n            html = html.slice(m.index);\n        } else if (m[1] === '#if ') {\n            tokens.push({condition: m[2]});\n            html = html.slice(m[0].length);\n        } else if (m[2]) {\n            tokens.push({variable: m[2]});\n            html = html.slice(m[0].length);\n        } else if (m[3] === '#else') {\n            tokens.push({branch: 'else'});\n            html = html.slice(m[0].length);\n        } else if (m[4] === '/if') {\n            tokens.push({close: 'if'});\n            html = html.slice(m[0].length);\n        } else {\n            console.error(`Error tokenizing tooltip when remaining template is ${JSON.stringify(html)} and previous tokens are ${JSON.stringify(tokens)} and current regex match is ${JSON.stringify([m[1], m[2], m[3]])}`);\n            html = html.slice(m[0].length);\n        }\n    }\n    const astify = function () {\n        const token = tokens.shift();\n        if (typeof token.text !== 'undefined' || token.variable) {\n            return token;\n        } else if (token.condition) {\n            let dest = token.then = [];\n            token.else = [];\n            // Inside an if block, consume all tokens related to text and/or else block\n            while (tokens.length > 0) {\n                if (tokens[0].close === 'if') {\n                    tokens.shift();\n                    break;\n                }\n                if (tokens[0].branch === 'else') {\n                    tokens.shift();\n                    dest = token.else;\n                }\n                dest.push(astify());\n            }\n            return token;\n        } else {\n            console.error(`Error making tooltip AST due to unknown token ${JSON.stringify(token)}`);\n            return { text: '' };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    const ast = [];\n    while (tokens.length > 0) {\n        ast.push(astify());\n    }\n\n    const resolve = function (variable) {\n        if (!Object.prototype.hasOwnProperty.call(resolve.cache, variable)) {\n            resolve.cache[variable] = (new Field(variable)).resolve(data, extra);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    const render_node = function (node) {\n        if (typeof node.text !== 'undefined') {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                const value = resolve(node.variable);\n                if (['string', 'number', 'boolean'].indexOf(typeof value) !== -1) {\n                    return value;\n                }\n                if (value === null) {\n                    return '';\n                }\n            } catch (error) {\n                console.error(`Error while processing variable ${JSON.stringify(node.variable)}`);\n            }\n            return `{{${node.variable}}}`;\n        } else if (node.condition) {\n            try {\n                const condition = resolve(node.condition);\n                if (condition) {\n                    return node.then.map(render_node).join('');\n                } else if (node.else) {\n                    return node.else.map(render_node).join('');\n                }\n            } catch (error) {\n                console.error(`Error while processing condition ${JSON.stringify(node.variable)}`);\n            }\n            return '';\n        } else {\n            console.error(`Error rendering tooltip due to unknown AST node ${JSON.stringify(node)}`);\n        }\n    };\n    return ast.map(render_node).join('');\n}\n\n/**\n * Populate a single element with a LocusZoom plot. This is the primary means of generating a new plot, and is part\n *  of the public interface for LocusZoom.\n * @alias module:LocusZoom~populate\n * @public\n * @param {String|d3.selection} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {module:LocusZoom~DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {Plot} The newly created plot instance\n */\nfunction populate(selector, datasource, layout) {\n    if (typeof selector == 'undefined') {\n        throw new Error('LocusZoom.populate selector not defined');\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html('');\n    let plot;\n    d3.select(selector).call(function(target) {\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof target.node().id == 'undefined') {\n            let iterator = 0;\n            while (!d3.select(`#lz-${iterator}`).empty()) {\n                iterator++;\n            }\n            target.attr('id', `#lz-${iterator}`);\n        }\n        // Create the plot\n        plot = new Plot(target.node().id, datasource, layout);\n        plot.container = target.node();\n        // Detect HTML `data-region` attribute, and use it to fill in state values if present\n        if (typeof target.node().dataset !== 'undefined' && typeof target.node().dataset.region !== 'undefined') {\n            const parsed_state = parsePositionQuery(target.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key) {\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select(`div#${plot.id}`)\n            .append('svg')\n            .attr('version', '1.1')\n            .attr('xmlns', 'http://www.w3.org/2000/svg')\n            .attr('id', `${plot.id}_svg`)\n            .attr('class', 'lz-locuszoom')\n            .call(applyStyles, plot.layout.style);\n\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (datasource) {\n            plot.refresh();\n        }\n    });\n    return plot;\n}\n\n/**\n * Parse region queries into their constituent parts\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nfunction parsePositionQuery(x) {\n    const chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    const chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    let match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === '+') {\n            const center = positionStringToInt(match[2]);\n            const offset = positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset,\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: positionStringToInt(match[2]),\n                end: positionStringToInt(match[4]),\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: positionStringToInt(match[2]),\n        };\n    }\n    return null;\n}\n\nexport { parseFields, parsePositionQuery, populate, positionIntToString, positionStringToInt, prettyTicks };\n","import * as d3 from 'd3';\n\nimport {deepCopy, merge} from '../helpers/layouts';\nimport Requester from '../data/requester';\nimport Toolbar from './toolbar';\nimport Panel from './panel';\nimport {generateCurtain, generateLoader} from '../helpers/common';\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @memberof Plot\n * @protected\n * @static\n * @type {Object}\n */\nconst default_layout = {\n    state: {},\n    width: 800,\n    min_width: 400,\n    min_region_scale: null,\n    max_region_scale: null,\n    responsive_resize: false,\n    panels: [],\n    toolbar: {\n        widgets: [],\n    },\n    panel_boundaries: true,\n    mouse_guide: true,\n};\n\n\n/**\n * Fields common to every event emitted by LocusZoom. This is not an actual event that should ever be used directly;\n *  see list below.\n *\n * Note: plot-level listeners *can* be defined for this event, but you should almost never do this.\n *  Use the most specific event name to describe the thing you are interested in.\n *\n * Listening to 'any_lz_event' is only for advanced usages, such as proxying (repeating) LZ behavior to a piece of\n *  wrapper code. One example is converting all LocusZoom events to vue.js events.\n *\n * @event any_lz_event\n * @type {object}\n * @property {string} sourceID The fully qualified ID of the entity that originated the event, eg `lz-plot.association`\n * @property {Plot|Panel} target A reference to the plot or panel instance that originated the event.\n * @property {object|null} data Additional data provided. (see event-specific documentation)\n */\n\n/**\n * A panel was removed from the plot. Commonly initiated by the \"remove panel\" toolbar widget.\n * @event panel_removed\n * @property {string} data The id of the panel that was removed (eg 'genes')\n * @see event:any_lz_event\n */\n\n/**\n * A request for new or cached data was initiated. This can be used for, eg, showing data loading indicators.\n * @event data_requested\n * @see event:any_lz_event\n */\n\n/**\n * A request for new data has completed, and all data has been rendered in the plot.\n * @event data_rendered\n * @see event:any_lz_event\n */\n\n/**\n * An action occurred that changed, or could change, the layout.\n *   Many rerendering operations can fire this event and it is somewhat generic: it includes resize, highlight,\n *   and rerender on new data.\n * Caution: Direct layout mutations might not be captured by this event. It is deprecated due to its limited utility.\n * @event layout_changed\n * @deprecated\n * @see event:any_lz_event\n */\n\n/**\n * The user has requested any state changes, eg via `plot.applyState`. This reports the original requested values even\n *  if they are overridden by plot logic. Only triggered when a state change causes a re-render.\n * @event state_changed\n * @property {object} data The set of all state changes requested\n * @see event:any_lz_event\n * @see {@link event:region_changed} for a related event that provides more accurate information in some cases\n */\n\n/**\n * The plot region has changed. Reports the actual coordinates of the plot after the zoom event. If plot.applyState is\n *  called with an invalid region (eg zooming in or out too far), this reports the actual final coordinates, not what was requested.\n *  The actual coordinates are subject to region min/max, etc.\n * @event region_changed\n * @property {object} data The {chr, start, end} coordinates of the requested region.\n * @see event:any_lz_event\n */\n\n/**\n * Indicate whether the element was selected (or unselected)\n * @event element_selection\n * @property {object} data An object with keys { element, active }, representing the datum bound to the element and the\n *   selection status (boolean)\n * @see {@link event:element_clicked} if you are interested in tracking clicks that result in other behaviors, like links\n * @see event:any_lz_event\n */\n\n/**\n * Indicates whether an element was clicked. (regardless of the behavior associated with clicking)\n * @event element_clicked\n * @see {@link event:element_selection} for a more specific and more frequently useful event\n * @see event:any_lz_event\n */\n\n/**\n * Indicate whether a match was requested from within a data layer.\n * @event match_requested\n * @property {object} data An object of `{value, active}` representing the scalar value to be matched and whether a match is\n *   being initiated or canceled\n * @see event:any_lz_event\n */\n\n/**\n * Check that position fields (chr, start, end) are provided where appropriate, and ensure that the plot fits within\n *  any constraints specified by the layout\n *\n * This function has side effects; it mutates the proposed state in order to meet certain bounds checks etc.\n * @private\n * @param {Object} new_state\n * @param {Number} new_state.chr\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nfunction _updateStatePosition(new_state, layout) {\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    let validated_region = false;\n    let attempted_midpoint = null;\n    let attempted_scale;\n    if (typeof new_state.chr != 'undefined' && typeof new_state.start != 'undefined' && typeof new_state.end != 'undefined') {\n        // Determine a numeric scale and midpoint for the attempted region,\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)) {\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)) {\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0) {\n                const temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0) {\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (layout.min_region_scale && validated_region && attempted_scale < layout.min_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (layout.max_region_scale && validated_region && attempted_scale > layout.max_region_scale) {\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n}\n\n\nclass Plot {\n    /**\n     * An independent LocusZoom object that renders a unique set of data and subpanels.\n     * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n     *\n     * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n     * to use the `LocusZoom.populate` helper method.\n     *\n     * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n     *   where the plot is rendered..\n     * @param {DataSources} datasource Ensemble of data providers used by the plot\n     * @param {object} [layout.state] Initial state parameters; the most common options are 'chr', 'start', and 'end'\n     *   to specify initial region view\n     * @param {number} [layout.width=800] The width of the plot and all child panels\n     * @param {number} [layout.min_width=400] Do not allow the panel to be resized below this width\n     * @param {number} [layout.min_region_scale] The minimum region width (do not allow the user to zoom smaller than this region size)\n     * @param {number} [layout.max_region_scale] The maximum region width (do not allow the user to zoom wider than this region size)\n     * @param {boolean} [layout.responsive_resize=false] Whether to resize plot width as the screen is resized\n     * @param {Object[]} [layout.panels] Configuration options for each panel to be added\n     * @param {module:LocusZoom_Widgets[]} [layout.toolbar.widgets] Configuration options for each widget to place on the\n     *   plot-level toolbar\n     * @param {boolean} [layout.panel_boundaries=true] Whether to show interactive resize handles to change panel dimensions\n     * @param {boolean} [layout.mouse_guide=true] Whether to always show horizontal and vertical dotted lines that intersect at the current location of the mouse pointer.\n     *   This line spans the entire plot area and is especially useful for plots with multiple panels.\n     */\n    constructor(id, datasource, layout) {\n        /**\n         * @private\n         * @member Boolean}\n         */\n        this.initialized = false;\n\n        /**\n         *  @private\n         *  @member {Plot}\n         */\n        this.parent_plot = this;\n\n        /**\n         *  @public\n         *  @member {String}\n         */\n        this.id = id;\n\n        /**\n         * @private\n         * @member {Element}\n         */\n        this.container = null;\n        /**\n         * Selector for a node that will contain the plot. (set externally by populate methods)\n         * @private\n         * @member {d3.selection}\n         */\n        this.svg = null;\n\n        /**\n         * Direct access to panel instances, keyed by panel ID. Used primarily for introspection/ development.\n         *  @public\n         *  @member {Object.<String, Panel>}\n         */\n        this.panels = {};\n        /**\n         * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n         * @private\n         * @member {String[]}\n         */\n        this.panel_ids_by_y_index = [];\n\n        /**\n         * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n         * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n         * @ignore\n         * @protected\n         * @member {Promise[]}\n         */\n        this.remap_promises = [];\n\n\n        /**\n         * The current layout options for the plot, including the effect of any resizing events or dynamically\n         *  generated config produced during rendering options.\n         * @public\n         * @type {Object}\n         */\n        this.layout = layout;\n        merge(this.layout, default_layout); // TODO: evaluate how the default layout is applied\n\n        /**\n         * Values in the layout object may change during rendering etc. Retain a copy of the original plot options.\n         * This is useful for, eg, dynamically generated color schemes that need to start from scratch when new data is\n         * loaded: it contains the \"defaults\", not just the result of a calculated value.\n         * @ignore\n         * @protected\n         * @member {Object}\n         */\n        this._base_layout = deepCopy(this.layout);\n\n        /**\n         * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n         *   with initial state/setup.\n         *\n         * Tracks state of the plot, eg start and end position\n         * @public\n         * @member {Object}\n         */\n        this.state = this.layout.state;\n\n        /**\n         * @private\n         * @member {Requester}\n         */\n        this.lzd = new Requester(datasource);\n\n        /**\n         * Track global event listeners that are used by LZ. This allows cleanup of listeners when plot is destroyed.\n         * @private\n         * @member {Map} A nested hash of entries: { parent: {event_name: [listeners] } }\n         */\n        this._external_listeners = new Map();\n\n        /**\n         * Known event hooks that the panel can respond to\n         * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n         * @protected\n         * @member {Object}\n         */\n        this.event_hooks = {};\n\n        /**\n         * @callback eventCallback\n         * @param {object} eventData A description of the event\n         * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n         *  triggered the event. Will be automatically filled in if not explicitly provided.\n         * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n         *   associated with a clicked plot element\n         */\n\n        /**\n         * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n         * TODO: Add/ document details of interaction structure as we expand\n         * @private\n         * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n         * @returns {Plot}\n         */\n        this.interaction = {};\n\n        // Initialize the layout\n        this.initializeLayout();\n    }\n\n    /******* User-facing methods that allow manipulation of the plot instance: the public interface */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered.\n     *\n     * @public\n     * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n     * @param {String} event The name of an event. Consult documentation for the names of built-in events.\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    on(event, hook) {\n        if (typeof event !== 'string') {\n            throw new Error(`Unable to register event hook. Event name must be a string: ${event.toString()}`);\n        }\n        if (typeof hook != 'function') {\n            throw new Error('Unable to register event hook, invalid hook function passed');\n        }\n        if (!this.event_hooks[event]) {\n            // We do not validate on known event names, because LZ is allowed to track and emit custom events like \"widget button clicked\".\n            this.event_hooks[event] = [];\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    }\n\n    /**\n     * Remove one or more previously defined event listeners\n     * @public\n     * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {Plot}\n     */\n    off(event, hook) {\n        const theseHooks = this.event_hooks[event];\n        if (typeof event != 'string' || !Array.isArray(theseHooks)) {\n            throw new Error(`Unable to remove event hook, invalid event: ${event.toString()}`);\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            const hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw new Error('The specified event listener is not registered and therefore cannot be removed');\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @public\n     * @see {@link event:any_lz_event} for a list of pre-defined events commonly used by LocusZoom\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {Plot}\n     */\n    emit(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        const these_hooks = this.event_hooks[event];\n        if (typeof event != 'string') {\n            throw new Error(`LocusZoom attempted to throw an invalid event: ${event.toString()}`);\n        } else if (!these_hooks && !this.event_hooks['any_lz_event']) {\n            // If the tree_fall event is emitted in a forest and no one is around to hear it, does it really make a sound?\n            return this;\n        }\n        const sourceID = this.getBaseId();\n        let eventContext;\n        if (eventData && eventData.sourceID) {\n            // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n            //  when re-emitting the event to plot-level listeners\n            eventContext = eventData;\n        } else {\n            eventContext = {sourceID: sourceID, target: this, data: eventData || null};\n        }\n        if (these_hooks) {\n            // This event may have no hooks, but we could be passing by on our way to any_lz_event (below)\n            these_hooks.forEach((hookToRun) => {\n                // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n                //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n                //  override anything provided to `call` below.\n                hookToRun.call(this, eventContext);\n            });\n        }\n\n        // At the plot level (only), all events will be re-emitted under the special name \"any_lz_event\"- a single place to\n        //  globally listen to every possible event.\n        // This is not intended for direct use. It is for UI frameworks like Vue.js, which may need to wrap LZ\n        //   instances and proxy all events to their own declarative event system\n        if (event !== 'any_lz_event') {\n            const anyEventData = Object.assign({ event_name: event }, eventContext);\n            this.emit('any_lz_event', anyEventData);\n        }\n        return this;\n    }\n\n    /**\n     * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n     * @public\n     * @param {Object} layout\n     * @returns {Panel}\n     */\n    addPanel(layout) {\n        // Sanity checks\n        if (typeof layout !== 'object') {\n            throw new Error('Invalid panel layout');\n        }\n\n        // Create the Panel and set its parent\n        const panel = new Panel(layout, this);\n\n        // Store the Panel on the Plot\n        this.panels[panel.id] = panel;\n\n        // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n        if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n            && this.panel_ids_by_y_index.length > 0) {\n            // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n            if (panel.layout.y_index < 0) {\n                panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n            }\n            this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n            this.applyPanelYIndexesToPanelLayouts();\n        } else {\n            const length = this.panel_ids_by_y_index.push(panel.id);\n            this.panels[panel.id].layout.y_index = length - 1;\n        }\n\n        // Determine if this panel was already in the layout.panels array.\n        // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n        let layout_idx = null;\n        this.layout.panels.forEach((panel_layout, idx) => {\n            if (panel_layout.id === panel.id) {\n                layout_idx = idx;\n            }\n        });\n        if (layout_idx === null) {\n            layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n        }\n        this.panels[panel.id].layout_idx = layout_idx;\n\n        // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n        if (this.initialized) {\n            this.positionPanels();\n            // Initialize and load data into the new panel\n            this.panels[panel.id].initialize();\n            this.panels[panel.id].reMap();\n            // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n            // positioning. TODO: make this additional call unnecessary.\n            this.setDimensions(this.layout.width, this._total_height);\n        }\n        return this.panels[panel.id];\n    }\n\n    /**\n     * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n     *\n     * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n     *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n     * TODO: Is this method still necessary in modern usage? Hide from docs for now.\n     * @public\n     * @ignore\n     * @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n     * @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n     *   and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n     * @returns {Plot}\n     */\n    clearPanelData(panelId, mode) {\n        mode = mode || 'wipe';\n\n        // TODO: Add unit tests for this method\n        let panelsList;\n        if (panelId) {\n            panelsList = [panelId];\n        } else {\n            panelsList = Object.keys(this.panels);\n        }\n\n        panelsList.forEach((pid) => {\n            this.panels[pid].data_layer_ids_by_z_index.forEach((dlid) => {\n                const layer = this.panels[pid].data_layers[dlid];\n                layer.destroyAllTooltips();\n\n                delete layer.layer_state;\n                delete this.layout.state[layer.state_id];\n                if (mode === 'reset') {\n                    layer._setDefaultState();\n                }\n            });\n        });\n        return this;\n    }\n\n    /**\n     * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n     * @public\n     * @fires event:panel_removed\n     * @param {String} id\n     * @returns {Plot}\n     */\n    removePanel(id) {\n        if (!this.panels[id]) {\n            throw new Error(`Unable to remove panel, ID not found: ${id}`);\n        }\n\n        // Hide all panel boundaries\n        this.panel_boundaries.hide();\n\n        // Destroy all tooltips and state vars for all data layers on the panel\n        this.clearPanelData(id);\n\n        // Remove all panel-level HTML overlay elements\n        this.panels[id].loader.hide();\n        this.panels[id].toolbar.destroy(true);\n        this.panels[id].curtain.hide();\n\n        // Remove the svg container for the panel if it exists\n        if (this.panels[id].svg.container) {\n            this.panels[id].svg.container.remove();\n        }\n\n        // Delete the panel and its presence in the plot layout and state\n        this.layout.panels.splice(this.panels[id].layout_idx, 1);\n        delete this.panels[id];\n        delete this.layout.state[id];\n\n        // Update layout_idx values for all remaining panels\n        this.layout.panels.forEach((panel_layout, idx) => {\n            this.panels[panel_layout.id].layout_idx = idx;\n        });\n\n        // Remove the panel id from the y_index array\n        this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n        this.applyPanelYIndexesToPanelLayouts();\n\n        // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n        if (this.initialized) {\n            this.positionPanels();\n            // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n            // positioning. TODO: make this additional call unnecessary.\n            this.setDimensions(this.layout.width, this._total_height);\n        }\n\n        this.emit('panel_removed', id);\n\n        return this;\n    }\n\n    /**\n     * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n     * @public\n     * @returns {Promise}\n     */\n    refresh() {\n        return this.applyState();\n    }\n\n    /**\n     * A user-defined callback function that can receive (and potentially act on) new plot data.\n     * @callback externalDataCallback\n     * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n     *  a data layer making an equivalent request.\n     */\n\n    /**\n     * A user-defined callback function that can respond to errors received during a previous operation\n     * @callback externalErrorCallback\n     * @param err A representation of the error that occurred\n     */\n\n    /**\n     * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n     *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n     *\n     * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n     *  using the same fields syntax and underlying methods as data layers.\n     *\n     * @public\n     * @listens event:data_rendered\n     * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n     *  Different data sources should be prefixed by the namespace name.\n     * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n     *  new data is received by the plot. Receives two arguments: (data, plot).\n     * @param {Object} [opts] Options\n     * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n     *  occurs during the data request or subsequent callback operations\n     * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n     *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n     *  uncombined record info\n     *  @return {function} The newly created event listener, to allow for later cleanup/removal\n     */\n    subscribeToData(fields, success_callback, opts) {\n        opts = opts || {};\n\n        // Register an event listener that is notified whenever new data has been rendered\n        const error_callback = opts.onerror || function (err) {\n            console.log('An error occurred while acting on an external callback', err);\n        };\n\n        const listener = () => {\n            try {\n                this.lzd.getData(this.state, fields)\n                    .then((new_data) => success_callback(opts.discrete ? new_data.discrete : new_data.body, this))\n                    .catch(error_callback);\n            } catch (error) {\n                // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n                error_callback(error);\n            }\n        };\n        this.on('data_rendered', listener);\n        return listener;\n    }\n\n    /**\n     * Update state values and trigger a pull for fresh data on all data sources for all data layers\n     * @public\n     * @param {Object} state_changes\n     * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n     * @listens event:match_requested\n     * @fires event:data_requested\n     * @fires event:layout_changed\n     * @fires event:data_rendered\n     * @fires event:state_changed\n     * @fires event:region_changed\n     */\n    applyState(state_changes) {\n        state_changes = state_changes || {};\n        if (typeof state_changes != 'object') {\n            throw new Error(`applyState only accepts an object; ${typeof state_changes} given`);\n        }\n\n        // Track what parameters will be modified. For bounds checking, we must take some preset values into account.\n        let mods = { chr: this.state.chr, start: this.state.start, end: this.state.end };\n        for (let property in state_changes) {\n            mods[property] = state_changes[property];\n        }\n        mods = _updateStatePosition(mods, this.layout);\n\n        // Apply new state to the actual state\n        for (let property in mods) {\n            this.state[property] = mods[property];\n        }\n\n        // Generate requests for all panels given new state\n        this.emit('data_requested');\n        this.remap_promises = [];\n        this.loading_data = true;\n        for (let id in this.panels) {\n            this.remap_promises.push(this.panels[id].reMap());\n        }\n\n        return Promise.all(this.remap_promises)\n            .catch((error) => {\n                console.error(error);\n                this.curtain.show(error.message || error);\n                this.loading_data = false;\n            })\n            .then(() => {\n                // Update toolbar / widgets\n                this.toolbar.update();\n\n                // Apply panel-level state values\n                this.panel_ids_by_y_index.forEach((panel_id) => {\n                    const panel = this.panels[panel_id];\n                    panel.toolbar.update();\n                    // Apply data-layer-level state values\n                    panel.data_layer_ids_by_z_index.forEach((data_layer_id) => {\n                        panel.data_layers[data_layer_id].applyAllElementStatus();\n                    });\n                });\n\n                // Emit events\n                this.emit('layout_changed');\n                this.emit('data_rendered');\n                this.emit('state_changed', state_changes);\n\n                // An interesting quirk of region changing in LZ: the final region is not always the same as the requested region\n                //   (example: zoom out beyond max, or request non-integer position)\n                // Echo the actual plot region as the final source of truth\n                const { chr, start, end } = this.state;\n                const position_changed = Object.keys(state_changes)\n                    .some((key) => ['chr', 'start', 'end'].includes(key));\n\n                if (position_changed) {\n                    this.emit('region_changed', { chr, start, end });\n                }\n\n                this.loading_data = false;\n            });\n    }\n\n    /**\n     * Keep a record of event listeners that are defined outside of the LocusZoom boundary (and therefore would not\n     *  get cleaned up when the plot was removed from the DOM). For example, window resize or mouse events.\n     * This allows safe cleanup of the plot on removal from the page. This method is useful for authors of LocusZoom plugins.\n     * @param {Node} target The node on which the listener has been defined\n     * @param {String} event_name\n     * @param {function} listener The handle for the event listener to be cleaned up\n     */\n    trackExternalListener(target, event_name, listener) {\n        if (!this._external_listeners.has(target)) {\n            this._external_listeners.set(target, new Map());\n        }\n        const container = this._external_listeners.get(target);\n\n        const tracker = container.get(event_name) || [];\n        if (!tracker.includes(listener)) {\n            tracker.push(listener);\n        }\n        container.set(event_name, tracker);\n    }\n\n    /**\n     * Remove the plot from the page, and clean up any globally registered event listeners\n     *\n     * Internally, the plot retains references to some nodes via selectors; it may be useful to delete the plot\n     *  instance after calling this method\n     */\n    destroy() {\n        for (let [target, registered_events] of this._external_listeners.entries()) {\n            for (let [event_name, listeners] of registered_events) {\n                for (let listener of listeners) {\n                    target.removeEventListener(event_name, listener);\n                }\n            }\n        }\n\n        // Clear the SVG, plus other HTML nodes (like toolbar) that live under the same parent\n        const parent = this.svg.node().parentNode;\n        if (!parent) {\n            throw new Error('Plot has already been removed');\n        }\n        while (parent.lastElementChild) {\n            parent.removeChild(parent.lastElementChild);\n        }\n        // Clear toolbar event listeners defined on the parent lz-container. As of 2020 this appears to be the\n        //  state of the art cross-browser DOM API for this task.\n        // eslint-disable-next-line no-self-assign\n        parent.outerHTML = parent.outerHTML;\n\n        this.initialized = false;\n\n        this.svg = null;\n        this.panels = null;\n    }\n\n    /******* The private interface: methods only used by LocusZoom internals */\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @private\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    _canInteract(panel_id) {\n        panel_id = panel_id || null;\n        if (panel_id) {\n            return ((typeof this.interaction.panel_id == 'undefined' || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    }\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     *  This returns a result with absolute position relative to the page, regardless of current scrolling\n     * Necessary for positioning any HTML elements over the plot\n     * @private\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    _getPageOrigin() {\n        const bounding_client_rect = this.svg.node().getBoundingClientRect();\n        let x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        let y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        let container = this.svg.node();\n        while (container.parentNode !== null) {\n            // TODO: Recursively seeks offsets for highest non-static parent node. This can lead to incorrect\n            //   calculations of, for example, x coordinate relative to the page. Revisit this logic.\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style('position') !== 'static') {\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height,\n        };\n    }\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @private\n     * @returns {{top: number, left: number}}\n     */\n    getContainerOffset() {\n        const offset = { top: 0, left: 0 };\n        let container = this.container.offsetParent || null;\n        while (container !== null) {\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    }\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     * @private\n     */\n    applyPanelYIndexesToPanelLayouts () {\n        this.panel_ids_by_y_index.forEach((pid, idx) => {\n            this.panels[pid].layout.y_index = idx;\n        });\n    }\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @private\n     * @returns {String}\n     */\n    getBaseId () {\n        return this.id;\n    }\n\n    /**\n     * Resize the plot to fit the bounding container\n     * @private\n     * @returns {Plot}\n     */\n    rescaleSVG() {\n        const clientRect = this.svg.node().getBoundingClientRect();\n        this.setDimensions(clientRect.width, clientRect.height);\n        return this;\n    }\n\n    /**\n     * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n     * @private\n     * @returns {Plot}\n     */\n    initializeLayout() {\n\n        // Sanity check layout values\n        if (isNaN(this.layout.width) || this.layout.width <= 0) {\n            throw new Error('Plot layout parameter `width` must be a positive number');\n        }\n\n        // Backwards compatible check: there was previously a third option. Anything truthy should thus act as \"responsive_resize: true\"\n        this.layout.responsive_resize = !!this.layout.responsive_resize;\n\n        // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n        if (this.layout.responsive_resize) {\n            const resize_listener = () => this.rescaleSVG();\n            window.addEventListener('resize', resize_listener);\n            this.trackExternalListener(window, 'resize', resize_listener);\n\n            // Forcing one additional setDimensions() call after the page is loaded clears up\n            // any disagreements between the initial layout and the loaded responsive container's size\n            const load_listener = () => this.setDimensions();\n            window.addEventListener('load', load_listener);\n            this.trackExternalListener(window, 'load', load_listener);\n        }\n\n        // Add panels\n        this.layout.panels.forEach((panel_layout) => {\n            this.addPanel(panel_layout);\n        });\n\n        return this;\n    }\n\n    /**\n     * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n     *\n     * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n     *   calculates the appropriate plot dimensions based on all panels, and ensures that panels are placed and\n     *   rendered in the correct relative positions.\n     * @private\n     * @param {Number} [width] If provided and larger than minimum allowed size, set plot to this width\n     * @param {Number} [height] If provided and larger than minimum allowed size, set plot to this height\n     * @returns {Plot}\n     * @fires event:layout_changed\n     */\n    setDimensions(width, height) {\n        // If width and height arguments were passed, then adjust plot dimensions to fit all panels\n        // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n            // Resize operations may ask for a different amount of space than that used by panels.\n            const height_scaling_factor = height / this._total_height;\n\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            // Override discrete values if resizing responsively\n            if (this.layout.responsive_resize) {\n                // All resize modes will affect width\n                if (this.svg) {\n                    this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n                }\n            }\n            // Resize/reposition panels to fit, update proportional origins if necessary\n            let y_offset = 0;\n            this.panel_ids_by_y_index.forEach((panel_id) => {\n                const panel = this.panels[panel_id];\n                const panel_width = this.layout.width;\n                // In this block, we are passing explicit dimensions that might require rescaling all panels at once\n                const panel_height = panel.layout.height * height_scaling_factor;\n                panel.setDimensions(panel_width, panel_height);\n                panel.setOrigin(0, y_offset);\n                y_offset += panel_height;\n                panel.toolbar.update();\n            });\n        }\n\n        // Set the plot height to the sum of all panels (using the \"real\" height values accounting for panel.min_height)\n        const final_height = this._total_height;\n\n        // Apply layout width and height as discrete values or viewbox values\n        if (this.svg !== null) {\n            // The viewBox must always be specified in order for \"save as image\" button to work\n            this.svg.attr('viewBox', `0 0 ${this.layout.width} ${final_height}`);\n\n            this.svg\n                .attr('width', this.layout.width)\n                .attr('height', final_height);\n        }\n\n        // If the plot has been initialized then trigger some necessary render functions\n        if (this.initialized) {\n            this.panel_boundaries.position();\n            this.toolbar.update();\n            this.curtain.update();\n            this.loader.update();\n        }\n\n        return this.emit('layout_changed');\n    }\n\n    /**\n     * Automatically position panels based on panel positioning rules and values.\n     * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n     *\n     * LocusZoom panels can only be stacked vertically (not horizontally)\n     * @private\n     */\n    positionPanels() {\n        // We want to enforce that all x-linked panels have consistent horizontal margins\n        // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n        // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n        const x_linked_margins = { left: 0, right: 0 };\n\n        // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n        // proportional heights for all panels with a null value from discretely set dimensions.\n        // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n        for (let id in this.panels) {\n            if (this.panels[id].layout.interaction.x_linked) {\n                x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n                x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n            }\n        }\n\n        // Update origins on all panels without changing plot-level dimensions yet\n        // Also apply x-linked margins to x-linked panels, updating widths as needed\n        let y_offset = 0;\n        this.panel_ids_by_y_index.forEach((panel_id) => {\n            const panel = this.panels[panel_id];\n            panel.setOrigin(0, y_offset);\n            y_offset += this.panels[panel_id].layout.height;\n            if (panel.layout.interaction.x_linked) {\n                const delta = Math.max(x_linked_margins.left - panel.layout.margin.left, 0)\n                    + Math.max(x_linked_margins.right - panel.layout.margin.right, 0);\n                panel.layout.width += delta;\n                panel.layout.margin.left = x_linked_margins.left;\n                panel.layout.margin.right = x_linked_margins.right;\n                panel.layout.cliparea.origin.x = x_linked_margins.left;\n            }\n        });\n\n        // Update dimensions on the plot to accommodate repositioned panels (eg when resizing one panel,\n        //  also must update the plot dimensions)\n        this.setDimensions();\n\n        // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n        this.panel_ids_by_y_index.forEach((panel_id) => {\n            const panel = this.panels[panel_id];\n            panel.setDimensions(\n                this.layout.width,\n                panel.layout.height\n            );\n        });\n\n        return this;\n    }\n\n    /**\n     * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n     *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n     * @private\n     * @returns {Plot}\n     */\n    initialize() {\n\n        // Ensure proper responsive class is present on the containing node if called for\n        if (this.layout.responsive_resize) {\n            d3.select(this.container).classed('lz-container-responsive', true);\n        }\n\n        // Create an element/layer for containing mouse guides\n        if (this.layout.mouse_guide) {\n            const mouse_guide_svg = this.svg.append('g')\n                .attr('class', 'lz-mouse_guide')\n                .attr('id', `${this.id}.mouse_guide`);\n            const mouse_guide_vertical_svg = mouse_guide_svg.append('rect')\n                .attr('class', 'lz-mouse_guide-vertical')\n                .attr('x', -1);\n            const mouse_guide_horizontal_svg = mouse_guide_svg.append('rect')\n                .attr('class', 'lz-mouse_guide-horizontal')\n                .attr('y', -1);\n            this.mouse_guide = {\n                svg: mouse_guide_svg,\n                vertical: mouse_guide_vertical_svg,\n                horizontal: mouse_guide_horizontal_svg,\n            };\n        }\n\n        // Add curtain and loader prototpyes to the plot\n        this.curtain = generateCurtain.call(this);\n        this.loader = generateLoader.call(this);\n\n        // Create the panel_boundaries object with show/position/hide methods\n        this.panel_boundaries = {\n            parent: this,\n            hide_timeout: null,\n            showing: false,\n            dragging: false,\n            selectors: [],\n            corner_selector: null,\n            show: function() {\n                // Generate panel boundaries\n                if (!this.showing && !this.parent.curtain.showing) {\n                    this.showing = true;\n                    // Loop through all panels to create a horizontal boundary for each\n                    this.parent.panel_ids_by_y_index.forEach((panel_id, panel_idx) => {\n                        const selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip')\n                            .attr('class', 'lz-panel-boundary')\n                            .attr('title', 'Resize panel');\n                        selector.append('span');\n                        const panel_resize_drag = d3.drag();\n                        panel_resize_drag.on('start', () => {\n                            this.dragging = true;\n                        });\n                        panel_resize_drag.on('end', () => {\n                            this.dragging = false;\n                        });\n                        panel_resize_drag.on('drag', () => {\n                            // First set the dimensions on the panel we're resizing\n                            const this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                            const original_panel_height = this_panel.layout.height;\n                            this_panel.setDimensions(this.parent.layout.width, this_panel.layout.height + d3.event.dy);\n                            const panel_height_change = this_panel.layout.height - original_panel_height;\n                            // Next loop through all panels.\n                            // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                            // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                            this.parent.panel_ids_by_y_index.forEach((loop_panel_id, loop_panel_idx) => {\n                                const loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                                if (loop_panel_idx > panel_idx) {\n                                    loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                    loop_panel.toolbar.position();\n                                }\n                            });\n                            // Reset dimensions on the entire plot and reposition panel boundaries\n                            this.parent.positionPanels();\n                            this.position();\n                        });\n                        selector.call(panel_resize_drag);\n                        this.parent.panel_boundaries.selectors.push(selector);\n                    });\n                    // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                    const corner_selector = d3.select(this.parent.svg.node().parentNode)\n                        .insert('div', '.lz-data_layer-tooltip')\n                        .attr('class', 'lz-panel-corner-boundary')\n                        .attr('title', 'Resize plot');\n\n                    corner_selector\n                        .append('span')\n                        .attr('class', 'lz-panel-corner-boundary-outer');\n                    corner_selector\n                        .append('span')\n                        .attr('class', 'lz-panel-corner-boundary-inner');\n\n                    const corner_drag = d3.drag();\n                    corner_drag.on('start', () => {\n                        this.dragging = true;\n                    });\n                    corner_drag.on('end', () => {\n                        this.dragging = false;\n                    });\n                    corner_drag.on('drag', () => {\n                        this.parent.setDimensions(this.parent.layout.width + d3.event.dx, this.parent._total_height + d3.event.dy);\n                    });\n                    corner_selector.call(corner_drag);\n                    this.parent.panel_boundaries.corner_selector = corner_selector;\n                }\n                return this.position();\n            },\n            position: function() {\n                if (!this.showing) {\n                    return this;\n                }\n                // Position panel boundaries\n                const plot_page_origin = this.parent._getPageOrigin();\n                this.selectors.forEach((selector, panel_idx) => {\n                    const panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                    const panel_page_origin = panel._getPageOrigin();\n                    const left = plot_page_origin.x;\n                    const top = panel_page_origin.y + panel.layout.height - 12;\n                    const width = this.parent.layout.width - 1;\n                    selector\n                        .style('top', `${top}px`)\n                        .style('left', `${left}px`)\n                        .style('width', `${width}px`);\n                    selector.select('span')\n                        .style('width', `${width}px`);\n                });\n                // Position corner selector\n                const corner_padding = 10;\n                const corner_size = 16;\n                this.corner_selector\n                    .style('top', `${plot_page_origin.y + this.parent._total_height - corner_padding - corner_size}px`)\n                    .style('left', `${plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size}px`);\n                return this;\n            },\n            hide: function() {\n                if (!this.showing) {\n                    return this;\n                }\n                this.showing = false;\n                // Remove panel boundaries\n                this.selectors.forEach((selector) => {\n                    selector.remove();\n                });\n                this.selectors = [];\n                // Remove corner boundary\n                this.corner_selector.remove();\n                this.corner_selector = null;\n                return this;\n            },\n        };\n\n        // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n        if (this.layout.panel_boundaries) {\n            d3.select(this.svg.node().parentNode)\n                .on(`mouseover.${this.id}.panel_boundaries`, () => {\n                    clearTimeout(this.panel_boundaries.hide_timeout);\n                    this.panel_boundaries.show();\n                })\n                .on(`mouseout.${this.id}.panel_boundaries`, () => {\n                    this.panel_boundaries.hide_timeout = setTimeout(() => {\n                        this.panel_boundaries.hide();\n                    }, 300);\n                });\n        }\n\n        // Create the toolbar object and immediately show it\n        this.toolbar = new Toolbar(this).show();\n\n        // Initialize all panels\n        for (let id in this.panels) {\n            this.panels[id].initialize();\n        }\n\n        // Define plot-level mouse events\n        const namespace = `.${this.id}`;\n        if (this.layout.mouse_guide) {\n            const mouseout_mouse_guide = () => {\n                this.mouse_guide.vertical.attr('x', -1);\n                this.mouse_guide.horizontal.attr('y', -1);\n            };\n            const mousemove_mouse_guide = () => {\n                const coords = d3.mouse(this.svg.node());\n                this.mouse_guide.vertical.attr('x', coords[0]);\n                this.mouse_guide.horizontal.attr('y', coords[1]);\n            };\n            this.svg\n                .on(`mouseout${namespace}-mouse_guide`, mouseout_mouse_guide)\n                .on(`touchleave${namespace}-mouse_guide`, mouseout_mouse_guide)\n                .on(`mousemove${namespace}-mouse_guide`, mousemove_mouse_guide);\n        }\n        const mouseup = () => {\n            this.stopDrag();\n        };\n        const mousemove = () => {\n            if (this.interaction.dragging) {\n                const coords = d3.mouse(this.svg.node());\n                if (d3.event) {\n                    d3.event.preventDefault();\n                }\n                this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n                this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n                this.panels[this.interaction.panel_id].render();\n                this.interaction.linked_panel_ids.forEach((panel_id) => {\n                    this.panels[panel_id].render();\n                });\n            }\n        };\n        this.svg\n            .on(`mouseup${namespace}`, mouseup)\n            .on(`touchend${namespace}`, mouseup)\n            .on(`mousemove${namespace}`, mousemove)\n            .on(`touchmove${namespace}`, mousemove);\n\n        // Add an extra namespaced mouseup handler to the containing body, if there is one\n        // This helps to stop interaction events gracefully when dragging outside of the plot element\n        const body_selector = d3.select('body');\n        const body_node = body_selector.node();\n        if (body_node) {\n            body_node.addEventListener('mouseup', mouseup);\n            body_node.addEventListener('touchend', mouseup);\n\n            this.trackExternalListener(body_node, 'mouseup', mouseup);\n            this.trackExternalListener(body_node, 'touchend', mouseup);\n        }\n\n        this.on('match_requested', (eventData) => {\n            // Layers can broadcast that a specific point has been selected, and the plot will tell every other layer\n            //  to look for that value. Whenever a point is de-selected, it clears the match.\n            const data = eventData.data;\n            const to_send = (data.active ? data.value : null);\n            const emitted_by = eventData.target.id;\n            // When a match is initiated, hide all tooltips from other panels (prevents zombie tooltips from reopening)\n            // TODO: This is a bit hacky. Right now, selection and matching are tightly coupled, and hence tooltips\n            //   reappear somewhat aggressively. A better solution depends on designing alternative behavior, and\n            //   applying tooltips post (instead of pre) render.\n            Object.values(this.panels).forEach((panel) => {\n                if (panel.id !== emitted_by) {\n                    Object.values(panel.data_layers).forEach((layer) => layer.destroyAllTooltips(false));\n                }\n            });\n\n            this.applyState({ lz_match_value: to_send });\n        });\n\n        this.initialized = true;\n\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        const client_rect = this.svg.node().getBoundingClientRect();\n        const width = client_rect.width ? client_rect.width : this.layout.width;\n        const height = client_rect.height ? client_rect.height : this._total_height;\n        this.setDimensions(width, height);\n\n        return this;\n    }\n\n    /**\n     * Register interactions along the specified axis, provided that the target panel allows interaction.\n     * @private\n     * @param {Panel} panel\n     * @param {('background'|'x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n     * @returns {Plot}\n     */\n    startDrag(panel, method) {\n        panel = panel || null;\n        method = method || null;\n\n        let axis = null;\n        switch (method) {\n        case 'background':\n        case 'x_tick':\n            axis = 'x';\n            break;\n        case 'y1_tick':\n            axis = 'y1';\n            break;\n        case 'y2_tick':\n            axis = 'y2';\n            break;\n        }\n\n        if (!(panel instanceof Panel) || !axis || !this._canInteract()) {\n            return this.stopDrag();\n        }\n\n        const coords = d3.mouse(this.svg.node());\n        this.interaction = {\n            panel_id: panel.id,\n            linked_panel_ids: panel.getLinkedPanelIds(axis),\n            dragging: {\n                method: method,\n                start_x: coords[0],\n                start_y: coords[1],\n                dragged_x: 0,\n                dragged_y: 0,\n                axis: axis,\n            },\n        };\n\n        this.svg.style('cursor', 'all-scroll');\n\n        return this;\n    }\n\n    /**\n     * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n     *   clear the event when complete\n     * @private\n     * @returns {Plot}\n     */\n    stopDrag() {\n\n        if (!this.interaction.dragging) {\n            return this;\n        }\n\n        if (typeof this.panels[this.interaction.panel_id] != 'object') {\n            this.interaction = {};\n            return this;\n        }\n        const panel = this.panels[this.interaction.panel_id];\n\n        // Helper function to find the appropriate axis layouts on child data layers\n        // Once found, apply the extent as floor/ceiling and remove all other directives\n        // This forces all associated axes to conform to the extent generated by a drag action\n        const overrideAxisLayout = (axis, axis_number, extent) => {\n            panel.data_layer_ids_by_z_index.forEach((id) => {\n                const axis_layout = panel.data_layers[id].layout[`${axis}_axis`];\n                if (axis_layout.axis === axis_number) {\n                    axis_layout.floor = extent[0];\n                    axis_layout.ceiling = extent[1];\n                    delete axis_layout.lower_buffer;\n                    delete axis_layout.upper_buffer;\n                    delete axis_layout.min_extent;\n                    delete axis_layout.ticks;\n                }\n            });\n        };\n\n        switch (this.interaction.dragging.method) {\n        case 'background':\n        case 'x_tick':\n            if (this.interaction.dragging.dragged_x !== 0) {\n                overrideAxisLayout('x', 1, panel.x_extent);\n                this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n            }\n            break;\n        case 'y1_tick':\n        case 'y2_tick':\n            if (this.interaction.dragging.dragged_y !== 0) {\n                const y_axis_number = parseInt(this.interaction.dragging.method[1]);\n                overrideAxisLayout('y', y_axis_number, panel[`y${y_axis_number}_extent`]);\n            }\n            break;\n        }\n\n        this.interaction = {};\n        this.svg.style('cursor', null);\n\n        return this;\n\n    }\n\n    get _total_height() {\n        // The plot height is a calculated property, derived from the sum of its panel layout objects\n        return this.layout.panels.reduce((acc, item) => item.height + acc, 0);\n    }\n}\n\nexport {Plot as default};\n\n// Only for testing\nexport { _updateStatePosition };\n","/**\n * \"Match\" test functions used to compare two values for filtering (what to render) and matching\n *  (comparison and finding related points across data layers)\n *\n * ### How do matching and filtering work?\n * See the Interactivity Tutorial for details.\n *\n * ## Adding a new function\n * LocusZoom allows users to write their own plugins, so that \"does this point match\" logic can incorporate\n *  user-defined code. (via `LocusZoom.MatchFunctions.add('my_function', my_function);`)\n *\n * All \"matcher\" functions have the call signature (item_value, target_value) => {boolean}\n *\n * Both filtering and matching depend on asking \"is this field interesting to me\", which is inherently a problem of\n *  making comparisons. The registry allows any arbitrary function (with a field value as the first argument), but that\n *  function doesn't have to use either argument.\n *\n * @module LocusZoom_MatchFunctions\n */\nimport {RegistryBase} from './base';\n\n/**\n * A plugin registry that allows plots to use both pre-defined and user-provided \"match\" functions, used by filtering and matching behavior.\n * @alias module:LocusZoom~MatchFunctions\n * @type {module:registry/base~RegistryBase}\n */\nconst registry = new RegistryBase();\n\n// Most of the filter syntax uses things that are JS reserved operators. Instead of exporting symbols from another\n//  module, just define and register them here.\n\n/**\n * Check if two values are (strictly) equal\n * @function\n * @name '='\n * @param item_value\n * @param target_value\n */\nregistry.add('=', (item_value, target_value) => item_value === target_value);\n\n/**\n * Check if two values are not equal. This allows weak comparisons (eg undefined/null), so it can also be used to test for the absence of a value\n * @function\n * @name '!='\n * @param item_value\n * @param target_value\n */\n// eslint-disable-next-line eqeqeq\nregistry.add('!=', (a, b) => a != b); // For absence of a value, deliberately allow weak comparisons (eg undefined/null)\n\n/**\n * Less-than comparison\n * @function\n * @name '<'\n * @param item_value\n * @param target_value\n */\nregistry.add('<', (a, b) => a < b);\n\n/**\n * Less than or equals to comparison\n * @function\n * @name '<='\n * @param item_value\n * @param target_value\n */\nregistry.add('<=', (a, b) => a <= b);\n\n/**\n * Greater-than comparison\n * @function\n * @name '>'\n * @param item_value\n * @param target_value\n */\nregistry.add('>', (a, b) => a > b);\n\n/**\n * Greater than or equals to comparison\n * @function\n * @name '>='\n * @param item_value\n * @param target_value\n */\nregistry.add('>=', (a, b) => a >= b);\n\n/**\n * Modulo: tests for whether the remainder a % b is nonzero\n * @function\n * @name '%'\n * @param item_value\n * @param target_value\n */\nregistry.add('%', (a, b) => a % b);\n\n/**\n * Check whether the provided value (a) is in the string or array of values (b)\n *\n * This can be used to check if a field value is one of a set of predefined choices\n *  Eg, `gene_type` is one of the allowed types of interest\n * @function\n * @name 'in'\n * @param item_value A scalar value\n * @param {String|Array} target_value A container that implements the `includes` method\n */\nregistry.add('in', (a, b) => b && b.includes(a));\n\n/**\n * Partial-match function. Can be used for free text search (\"find all gene names that contain the user-entered string 'TCF'\")\n * @function\n * @name 'match'\n * @param {String|Array} item_value A container (like a string) that implements the `includes` method\n * @param target_value A scalar value, like a string\n */\nregistry.add('match', (a, b) => a && a.includes(b)); // useful for text search: \"find all gene names that contain the user-entered value HLA\"\n\n\nexport default registry;\n","/**\n * Plugin registry of available functions that can be used in scalable layout directives.\n *\n * These \"scale functions\" are used during rendering to return output (eg color) based on input value\n *\n * @module LocusZoom_ScaleFunctions\n * @see {@link module:LocusZoom_DataLayers~ScalableParameter} for details on how scale functions are used by datalayers\n */\n\nimport * as d3 from 'd3';\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @alias module:LocusZoom_ScaleFunctions~if\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nconst if_value = (parameters, input) => {\n    if (typeof input == 'undefined' || parameters.field_value !== input) {\n        if (typeof parameters.else != 'undefined') {\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n};\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} parameters.null_value\n * @param {*} input value\n * @returns {*}\n */\nconst numerical_bin = (parameters, input) => {\n    const breaks = parameters.breaks || [];\n    const values = parameters.values || [];\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    const threshold = breaks.reduce(function (prev, curr) {\n        if (+input < prev || (+input >= prev && +input < curr)) {\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n};\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nconst categorical_bin = (parameters, value) => {\n    if (typeof value == 'undefined' || !parameters.categories.includes(value)) {\n        return (parameters.null_value ? parameters.null_value : null);\n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n};\n\n/**\n * Cycle through a set of options, so that the each element in a set of data receives a value different than the\n *  element before it. For example: \"use this palette of 10 colors to visually distinguish 100 adjacent items\"\n * This is useful when ADJACENT items must be guaranteed to yield a different result, but it leads to unstable color\n *  choices if the user pans to a region with a different number/order of items. (the same item is assigned a different color)\n *\n *  See also: stable_choice.\n *  @param {Object} parameters\n *  @param {Array} parameters.values A list of option values\n * @return {*}\n */\nconst ordinal_cycle = (parameters, value, index) => {\n    const options = parameters.values;\n    return options[index % options.length];\n};\n\n/**\n * A scale function that auto-chooses something (like color) from a preset scheme, and makes the same choice every\n * time given the same value, regardless of ordering or what other data is in the region\n *\n * This is useful when categories must be stable (same color, every time). But sometimes it will assign adjacent values\n *  the same color due to hash collisions.\n *\n * For performance reasons, this is memoized once per instance. Eg, each scalable color parameter has its own cache.\n *  This function is therefore slightly less amenable to layout mutations like \"changing the options after scaling\n *  function is used\", but this is not expected to be a common use case.\n *\n *  CAVEAT: Some datasets do not return true datum ids, but instead append synthetic ID fields (\"item 1, item2\"...)\n *    just to appease D3. This hash function only works if there is a meaningful, stable identifier in the data,\n *    like a category or gene name.\n * @param parameters\n * @param {Array} [parameters.values] A list of options to choose from\n * @param {Number} [parameters.max_cache_size=500] The maximum number of values to cache. This option is mostly used\n *  for unit testing, because stable choice is intended for datasets with a relatively limited number of\n *  discrete categories.\n * @param value\n * @param index\n */\nlet stable_choice = (parameters, value, index) => {\n    // Each place the function gets used has its own parameters object. This function thus memoizes per usage\n    //  (\"association - point color - directive 1\") rather than globally (\"all properties/panels\")\n    const cache = parameters._cache = parameters._cache || new Map();\n    const max_cache_size = parameters.max_cache_size || 500;\n\n    if (cache.size >= max_cache_size) {\n        // Prevent cache from growing out of control (eg as user moves between regions a lot)\n        cache.clear();\n    }\n    if (cache.has(value)) {\n        return cache.get(value);\n    }\n\n    // Simple JS hashcode implementation, from:\n    //  https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript\n    let hash = 0;\n    value = String(value);\n    for (let i = 0; i < value.length; i++) {\n        let chr = value.charCodeAt(i);\n        hash  = ((hash << 5) - hash) + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    // Convert signed 32 bit integer to be within the range of options allowed\n    const options = parameters.values;\n    const result = options[Math.abs(hash) % options.length];\n    cache.set(value, result);\n    return result;\n};\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nconst interpolate = (parameters, input) => {\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length) {\n        return nullval;\n    }\n    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n        return nullval;\n    }\n    if (+input <= parameters.breaks[0]) {\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length - 1]) {\n        return values[breaks.length - 1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function (brk, idx) {\n            if (!idx) {\n                return;\n            }\n            if (breaks[idx - 1] <= +input && breaks[idx] >= +input) {\n                upper_idx = idx;\n            }\n        });\n        if (upper_idx === null) {\n            return nullval;\n        }\n        const normalized_input = (+input - breaks[upper_idx - 1]) / (breaks[upper_idx] - breaks[upper_idx - 1]);\n        if (!isFinite(normalized_input)) {\n            return nullval;\n        }\n        return d3.interpolate(values[upper_idx - 1], values[upper_idx])(normalized_input);\n    }\n};\n\n\nexport { categorical_bin, stable_choice, if_value, interpolate, numerical_bin, ordinal_cycle };\n","/**\n * Functions that control \"scalable\" layout directives: given a value (like a number) return another value\n *  (like a color, size, or shape) that governs how something is displayed\n *\n *  All scale functions have the call signature `(layout_parameters, input) => result|null`\n * @module\n * @private\n */\nimport {RegistryBase} from './base';\nimport * as scalable from '../helpers/scalable';\n\n\nconst registry = new RegistryBase();\nfor (let [name, type] of Object.entries(scalable)) {\n    registry.add(name, type);\n}\n\n// Alias for the \"if_value\" function (can't export reserved language keywords directly)\nregistry.add('if', scalable.if_value);\n\n\nexport default registry;\n","/**\n * Data layers represent instructions for how to render common types of information.\n *  (GWAS scatter plot, nearby genes, straight lines and filled curves, etc)\n *\n * Each rendering type also provides helpful functionality such as filtering, matching, and interactive tooltip\n *  display. Predefined layers can be extended or customized, with many configurable options.\n *\n * @module LocusZoom_DataLayers\n */\n\nimport * as d3 from 'd3';\n\nimport {STATUSES} from '../constants';\nimport Field from '../../data/field';\nimport {parseFields} from '../../helpers/display';\nimport {deepCopy, merge} from '../../helpers/layouts';\nimport MATCHERS from '../../registry/matchers';\nimport SCALABLE from '../../registry/scalable';\n\n\n/**\n * \"Scalable\" parameters indicate that a datum can be rendered in custom ways based on its value. (color, size, shape, etc)\n *\n * This means that if the value of this property is a scalar, it is used directly (`color: '#FF0000'`). But if the\n *  value is an array of options, each will be evaluated in turn until the first non-null result is found. The syntax\n *  below describes how each member of the array should specify the field and scale function to be used.\n * Often, the last item in the list is a string, providing a \"default\" value if all scale functions evaluate to null.\n *\n * @typedef {object[]|string} ScalableParameter\n * @property {string} [field] The name of the field to use in the scale function. If omitted, all fields for the given\n *  datum element will be passed to the scale function.\n * @property {module:LocusZoom_ScaleFunctions} scale_function The name of a scale function that will be run on each individual datum\n * @property {object} parameters A set of parameters that configure the desired scale function (options vary by function)\n */\n\n\n/**\n * @typedef {Object} module:LocusZoom_DataLayers~behavior\n * @property {'set'|'unset'|'toggle'|'link'} action\n * @property {'highlighted'|'selected'|'faded'|'hidden'} status An element display status to set/unset/toggle\n * @property {boolean} exclusive Whether an element status should be exclusive (eg only allow one point to be selected at a time)\n * @property {string} href For links, the URL to visit when clicking\n * @property {string} target For links, the `target` attribute (eg, name of a window or tab in which to open this link)\n */\n\n\n/**\n * @typedef {object} FilterOption\n * @property {string} field The name of a field found within each datapoint datum\n * @property {module:LocusZoom_MatchFunctions} operator The name of a comparison function to use when deciding if the\n *   field satisfies this filter\n * @property value The target value to compare to\n */\n\n\n/**\n * @typedef {object} LegendItem\n * @property [shape] This is optional (e.g. a legend element could just be a textual label).\n *   Supported values are the standard d3 3.x symbol types (i.e. \"circle\", \"cross\", \"diamond\", \"square\",\n *   \"triangle-down\", and \"triangle-up\"), as well as \"rect\" for an arbitrary square/rectangle or line for a path.\n * @property {string} color The point color (hexadecimal, rgb, etc)\n * @property {string} label The human-readable label of the legend item\n * @property {string} [class] The name of a CSS class used to style the point in the legend\n * @property {number} [size] The point area for each element (if the shape is a d3 symbol). Eg, for a 40 px area,\n *  a circle would be ~7..14 px in diameter.\n * @property {number} [length] Length (in pixels) for the path rendered as the graphical portion of the legend element\n *  if the value of the shape parameter is \"line\".\n * @property {number} [width] Width (in pixels) for the rect rendered as the graphical portion of the legend element if\n *   the value of the shape parameter is \"rect\".\n * @property {number} [height] Height (in pixels) for the rect rendered as the graphical portion of the legend element if\n *   the value of the shape parameter is \"rect\".\n * @property {object} style CSS styles object to be applied to the DOM element representing the graphical portion of\n *   the legend element.\n */\n\n\n/**\n * A basic description of keys expected in all data layer layouts. Not intended to be directly used or modified by an end user.\n * @memberof module:LocusZoom_DataLayers~BaseDataLayer\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nconst default_layout = {\n    id: '',\n    type: '',\n    tag: 'custom_data_type',\n    fields: [],\n    id_field: 'id',\n    filters: null,\n    match: {},\n    x_axis: {},\n    y_axis: {},  // Axis options vary based on data layer type\n    legend: null,\n    tooltip: {},\n    tooltip_positioning: 'horizontal',  // Where to draw tooltips relative to the point. Can be \"vertical\" or \"horizontal\"\n    behaviors: {},\n};\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n*/\nclass BaseDataLayer {\n    /**\n     * @param {string} [layout.id=''] An identifier string that must be unique across all layers within the same panel\n     * @param {string} [layout.type=''] The type of data layer. This parameter is used in layouts to specify which class\n     *   (from the registry) is created; it is also used in CSS class names.\n     * @param {string} [layout.tag='custom_data_type'] Tags have no functional purpose, but they can be used\n     *   as a semantic label for what is being displayed in this element. This makes it easy to write custom code like \"find every data\n     *   layer that shows association scatter plots, anywhere\": even if the IDs are different, the tag can be the same.\n     *   Most built-in data layers will contain a tag that describes, in human-readable terms, what kind of data is being shown.\n     *   (see: {@link LayoutRegistry.mutate_attrs})\n     * @param {String[]} layout.fields A list of (namespaced) fields specifying what data is used by the layer. Only\n     *  these fields will be made available to the data layer, and only data sources (namespaces) referred to in\n     *  this array will be fetched. This represents the \"contract\" between what data is returned and what data is rendered.\n     *  This fields array works in concert with the data retrieval method BaseAdapter.extractFields.\n     * @param {string} [layout.id_field] The datum field used for unique element IDs when addressing DOM elements, mouse\n     *   events, etc. This should be unique to the specified datum.\n     * @param {module:LocusZoom_DataLayers~FilterOption[]} [layout.filters] If present, restricts the list of data elements to be displayed. Typically, filters\n     *  hide elements, but arrange the layer so as to leave the space those elements would have occupied. The exact\n     *  details vary from one layer to the next. See the Interactivity Tutorial for details.\n     * @param {object} [layout.match] An object describing how to connect this data layer to other data layers in the\n     *   same plot. Specifies keys `send` and `receive` containing the names of fields with data to be matched;\n     *   `operator` specifies the name of a MatchFunction to use. If a datum matches the broadcast value, it will be\n     *   marked with the special field `lz_is_match=true`, which can be used in any scalable layout directive to control how the item is rendered.\n     * @param {boolean} [layout.x_axis.decoupled=false] If true, the data in this layer will not influence the x-extent of the panel.\n     * @param {'state'|null} [layout.x_axis.extent] If provided, the region plot x-extent will be determined from\n     *   `plot.state` rather than from the range of the data. This is the most common way of setting x-extent,\n     *   as it is useful for drawing a set of panels to reflect a particular genomic region.\n     * @param {number} [layout.x_axis.floor] The low end of the x-extent, which overrides any actual data range, min_extent, or buffer options.\n     * @param {number} [layout.x_axis.ceiling] The high end of the x-extent, which overrides any actual data range, min_extent, or buffer options.\n     * @param {Number[]} [layout.x_axis.min_extent] The smallest possible range [min, max] of the x-axis. If the actual values lie outside the extent, the actual data takes precedence.\n     * @param {number} [layout.x_axis.field] The datum field to look at when determining data extent along the x-axis.\n     * @param {number} [layout.x_axis.lower_buffer] Amount to expand (pad) the lower end of an axis as a proportion of the extent of the data.\n     * @param {number} [layout.x_axis.upper_buffer] Amount to expand (pad) the higher end of an axis as a proportion of the extent of the data.\n     * @param {boolean} [layout.y_axis.decoupled=false] If true, the data in this layer will not influence the y-extent of the panel.\n     * @param {object} [layout.y_axis.axis=1] Which y axis to use for this data layer (left=1, right=2)\n     * @param {number} [layout.y_axis.floor] The low end of the y-extent, which overrides any actual data range, min_extent, or buffer options.\n     * @param {number} [layout.y_axis.ceiling] The high end of the y-extent, which overrides any actual data range, min_extent, or buffer options.\n     * @param {Number[]} [layout.y_axis.min_extent] The smallest possible range [min, max] of the y-axis. Actual lower or higher data values will take precedence.\n     * @param {number} [layout.y_axis.field] The datum field to look at when determining data extent along the y-axis.\n     * @param {number} [layout.y_axis.lower_buffer] Amount to expand (pad) the lower end of an axis as a proportion of the extent of the data.\n     * @param {number} [layout.y_axis.upper_buffer] Amount to expand (pad) the higher end of an axis as a proportion of the extent of the data.\n     * @param {object} [layout.tooltip.show] Define when to show a tooltip in terms of interaction states, eg, `{ or: ['highlighted', 'selected'] }`\n     * @param {object} [layout.tooltip.hide] Define when to hide a tooltip in terms of interaction states, eg, `{ and: ['unhighlighted', 'unselected'] }`\n     * @param {boolean} [layout.tooltip.closable] Whether a tool tip should render a \"close\" button in the upper right corner.\n     * @param {string} [layout.tooltip.html] HTML template to render inside the tool tip. The template syntax uses curly braces to allow simple expressions:\n     *   eg `{{sourcename:fieldname}} to insert a field value from the datum associated with\n     *   the tooltip/element. Conditional tags are supported using the format:\n     *   `{{#if sourcename:fieldname|transforms_can_be_used_too}}render text here{{#else}}Optional else branch{{/if}}`.\n     * @param {'horizontal'|'vertical'|'top'|'bottom'|'left'|'right'} [layout.tooltip_positioning='horizontal'] Where to draw the tooltip relative to the datum.\n     *  Typically tooltip positions are centered around the midpoint of the data element, subject to overflow off the edge of the plot.\n     * @param {object} [layout.behaviors] LocusZoom data layers support the binding of mouse events to one or more\n     *   layout-definable behaviors. Some examples of behaviors include highlighting an element on mouseover, or\n     *   linking to a dynamic URL on click, etc.\n     * @param {module:LocusZoom_DataLayers~LegendItem[]} [layout.legend] Tick marks found in the panel legend\n     * @param {module:LocusZoom_DataLayers~behavior[]} [layout.behaviors.onclick]\n     * @param {module:LocusZoom_DataLayers~behavior[]} [layout.behaviors.onctrlclick]\n     * @param {module:LocusZoom_DataLayers~behavior[]} [layout.behaviors.onctrlshiftclick]\n     * @param {module:LocusZoom_DataLayers~behavior[]} [layout.behaviors.onshiftclick]\n     * @param {module:LocusZoom_DataLayers~behavior[]} [layout.behaviors.onmouseover]\n     * @param {module:LocusZoom_DataLayers~behavior[]} [layout.behaviors.onmouseout]\n     * @param {Panel|null} parent Where this layout is used\n     */\n    constructor(layout, parent) {\n        /**\n         * @private\n         * @member {Boolean}\n         */\n        this.initialized = false;\n        /**\n         * @private\n         * @member {Number}\n         */\n        this.layout_idx = null;\n\n        /**\n         * The unique identifier for this layer. Should be unique within this panel.\n         * @public\n         * @member {String}\n         */\n        this.id     = null;\n\n        /**\n         * The fully qualified identifier for the data layer, prefixed by any parent or container elements.\n         * @type {string}\n         * @private\n         */\n        this._base_id = null;\n\n        /**\n         * @protected\n         * @member {Panel}\n         */\n        this.parent = parent || null;\n        /**\n         * @private\n         * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n         */\n        this.svg    = {};\n\n        /**\n         * @protected\n         * @member {Plot}\n         */\n        this.parent_plot = null;\n        if (parent) {\n            this.parent_plot = parent.parent;\n        }\n\n        /**\n         * The current layout configuration for this data layer. This reflects any resizing or dynamically generated\n         *  config options produced during rendering. Direct layout mutations are a powerful way to dynamically\n         *  modify the plot in response to user interactions, but require a deep knowledge of LZ internals to use\n         *  effectively.\n         * @public\n         * @member {Object}\n         */\n        this.layout = merge(layout || {}, default_layout);\n        if (this.layout.id) {\n            this.id = this.layout.id;\n        }\n\n        /**\n         * A user-provided function used to filter data for display. If provided, this will override any declarative\n         *  options in `layout.filters`\n         * @private\n         * @deprecated\n         */\n        this._filter_func = null;\n\n        // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n        if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== 'number') {\n            // TODO: Example of x2? if none remove\n            this.layout.x_axis.axis = 1;\n        }\n        if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== 'number') {\n            this.layout.y_axis.axis = 1;\n        }\n\n        /**\n         * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state.\n         * This is useful for, eg, dynamically generated color schemes that need to start from scratch when new data is\n         * loaded: it contains the \"defaults\", not just the result of a calculated value.\n         * @ignore\n         * @protected\n         * @member {Object}\n         */\n        this._base_layout = deepCopy(this.layout);\n\n        /**\n         * @private\n         * @member {Object}\n         */\n        this.state = {};\n        /**\n         * @private\n         * @member {String}\n         */\n        this.state_id = null;\n\n        /**\n         * @private\n         * @member {Object}\n         * */\n        this.layer_state = null;\n        // Create a default state (and set any references to the parent as appropriate)\n        this._setDefaultState();\n\n        // Initialize parameters for storing data and tool tips\n        /**\n         * The data retrieved from a region request. This field is useful for debugging, but will be overridden on\n         *  re-render; do not modify it directly. The point annotation cache can be used to preserve markings\n         *  after re-render.\n         * @protected\n         * @member {Array}\n         */\n        this.data = [];\n        if (this.layout.tooltip) {\n            /**\n             * @private\n             * @member {Object}\n             */\n            this.tooltips = {};\n        }\n\n        // Initialize flags for tracking global statuses\n        this.global_statuses = {\n            'highlighted': false,\n            'selected': false,\n            'faded': false,\n            'hidden': false,\n        };\n    }\n\n    /****** Public interface: methods for external manipulation */\n\n    /**\n     * @public\n     */\n    render() {\n        throw new Error('Method must be implemented');\n    }\n\n    /**\n     * Move a data layer forward relative to others by z-index\n     * @public\n     * @returns {BaseDataLayer}\n     */\n    moveForward() {\n        if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]) {\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n            this.parent.resortDataLayers();\n        }\n        return this;\n    }\n\n    /**\n     * Move a data layer back relative to others by z-index\n     * @public\n     * @returns {BaseDataLayer}\n     */\n    moveBack() {\n        if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]) {\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n            this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n            this.parent.resortDataLayers();\n        }\n        return this;\n    }\n\n    /**\n     * Set an \"annotation\": a piece of additional information about a point that is preserved across re-render,\n     *  or as the user pans and zooms near this region.\n     *\n     * Annotations can be referenced as a named pseudo-field in any filters and scalable parameters. (template support\n     *  may be added in the future)\n     * Sample use case: user clicks a tooltip to \"label this specific point\". (or change any other display property)\n     *\n     * @public\n     * @param {String|Object} element The data object or ID string for the element\n     * @param {String} key The name of the annotation to track\n     * @param {*} value The value of the marked field\n     */\n    setElementAnnotation (element, key, value) {\n        const id = this.getElementId(element);\n        if (!this.layer_state.extra_fields[id]) {\n            this.layer_state.extra_fields[id] = {};\n        }\n        this.layer_state.extra_fields[id][key] = value;\n        return this;\n    }\n\n    /**\n     * Select a filter function to be applied to the data. DEPRECATED: Please use the LocusZoom.MatchFunctions registry\n     *  and reference via declarative filters.\n     * @param func\n     * @deprecated\n     */\n    setFilter(func) {\n        console.warn('The setFilter method is deprecated and will be removed in the future; please use the layout API with a custom filter function instead');\n        this._filter_func = func;\n    }\n\n    /********** Protected methods: useful in subclasses to manipulate data layer behaviors */\n    /**\n     * Implementation hook for fetching the min and max values of available data. Used to determine axis range, if no other\n     *   explicit axis settings override. Useful for data layers where the data extent depends on more than one field.\n     *   (eg confidence intervals in a forest plot)\n     *\n     * @protected\n     * @param data\n     * @param axis_config The configuration object for the specified axis.\n     * @returns {Array} [min, max] without any padding applied\n     */\n    _getDataExtent (data, axis_config) {\n        data = data || this.data;\n        // By default this depends only on a single field.\n        return d3.extent(data, (d) => {\n            const f = new Field(axis_config.field);\n            return +f.resolve(d);\n        });\n    }\n\n    /**\n     * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n     *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n     * @protected\n     * @param {Object} element\n     * @returns {String}\n     */\n    getElementId (element) {\n        // Use a cached value if possible\n        const id_key = Symbol.for('lzID');\n        if (element[id_key]) {\n            return element[id_key];\n        }\n\n        const id_field = this.layout.id_field || 'id';\n        if (typeof element[id_field] == 'undefined') {\n            throw new Error('Unable to generate element ID');\n        }\n        const element_id = element[id_field].toString().replace(/\\W/g, '');\n\n        // Cache ID value for future calls\n        const key = (`${this.getBaseId()}-${element_id}`).replace(/([:.[\\],])/g, '_');\n        element[id_key] = key;\n        return key;\n    }\n\n    /**\n     * Fetch an ID that may bind a data element to a separate visual node for displaying status\n     * Examples of this might be separate visual nodes to show select/highlight statuses, or\n     * even a common/shared node to show status across many elements in a set.\n     * Abstract method. It should be overridden by data layers that implement seperate status\n     * nodes specifically to the use case of the data layer type.\n     * @private\n     * @param {String|Object} element\n     * @returns {String|null}\n     */\n    getElementStatusNodeId (element) {\n        return null;\n    }\n\n    /**\n     * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n     *   referenced by the unique identifier for the element\n     *\n     * @ignore\n     * @protected\n     * @param {String} id The unique identifier for the element, as defined by `getElementId`\n     * @returns {Object|null} The data bound to that element\n     */\n    getElementById(id) {\n        const selector = d3.select(`#${id.replace(/([:.[\\],])/g, '\\\\$1')}`); // escape special characters\n        if (!selector.empty() && selector.data() && selector.data().length) {\n            return selector.data()[0];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Basic method to apply arbitrary methods and properties to data elements.\n     *   This is called on all data immediately after being fetched. (requires reMap, not just re-render)\n     *\n     * Allowing a data element to access its parent enables interactive functionality, such as tooltips that modify\n     *  the parent plot. This is also used for system-derived fields like \"matching\" behavior\".\n     *\n     * @protected\n     * @returns {BaseDataLayer}\n     */\n    applyDataMethods() {\n        const field_to_match = (this.layout.match && this.layout.match.receive);\n        const match_function = MATCHERS.get(this.layout.match && this.layout.match.operator || '=');\n        const broadcast_value = this.parent_plot.state.lz_match_value;\n        // Match functions are allowed to use transform syntax on field values, but not (yet) UI \"annotations\"\n        const field_resolver = field_to_match ? new Field(field_to_match) : null;\n        this.data.forEach((item, i) => {\n            // Basic toHTML() method - return the stringified value in the id_field, if defined.\n\n            // When this layer receives data, mark whether points match (via a synthetic boolean field)\n            //   Any field-based layout directives (color, size, shape) can then be used to control display\n            if (field_to_match && broadcast_value !== null && broadcast_value !== undefined) {\n                item.lz_is_match = (match_function(field_resolver.resolve(item), broadcast_value));\n            }\n\n            item.toHTML = () => {\n                const id_field = this.layout.id_field || 'id';\n                let html = '';\n                if (item[id_field]) {\n                    html = item[id_field].toString();\n                }\n                return html;\n            };\n            // Helper methods - return a reference to various plot levels. Useful for interactive tooltips.\n            item.getDataLayer = () => this;\n            item.getPanel = () => this.parent || null;\n            item.getPlot = () => {\n                // For unit testing etc, this layer may be created without a parent.\n                const panel = this.parent;\n                return panel ? panel.parent : null;\n            };\n            // deselect() method - shortcut method to deselect the element\n            item.deselect = () => {\n                const data_layer = this.getDataLayer();\n                data_layer.unselectElement(this); // dynamically generated method name. It exists, honest.\n            };\n        });\n        this.applyCustomDataMethods();\n        return this;\n    }\n\n    /**\n     * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed.\n     * Most data layers will never need to use this.\n     * @protected\n     * @returns {BaseDataLayer}\n     */\n    applyCustomDataMethods() {\n        return this;\n    }\n\n    /**\n     * Apply scaling functions to an element as needed, based on the layout rules governing display + the element's data\n     * If the layout parameter is already a primitive type, simply return the value as given\n     *\n     * In the future this may be further expanded, so that scaling functions can operate similar to mappers\n     *  (item, index, array). Additional arguments would be added as the need arose.\n     *\n     * @private\n     * @param {Array|Number|String|Object} option_layout Either a scalar (\"color is red\") or a configuration object\n     *  (\"rules for how to choose color based on item value\")\n     * @param {*} element_data The value to be used with the filter. May be a primitive value, or a data object for a single item\n     * @param {Number} data_index The array index for the data element\n     * @returns {*} The transformed value\n     */\n    resolveScalableParameter (option_layout, element_data, data_index) {\n        let ret = null;\n        if (Array.isArray(option_layout)) {\n            let idx = 0;\n            while (ret === null && idx < option_layout.length) {\n                ret = this.resolveScalableParameter(option_layout[idx], element_data, data_index);\n                idx++;\n            }\n        } else {\n            switch (typeof option_layout) {\n            case 'number':\n            case 'string':\n                ret = option_layout;\n                break;\n            case 'object':\n                if (option_layout.scale_function) {\n                    const func = SCALABLE.get(option_layout.scale_function);\n                    if (option_layout.field) {\n                        const f = new Field(option_layout.field);\n                        let extra;\n                        try {\n                            extra = this.getElementAnnotation(element_data);\n                        } catch (e) {\n                            extra = null;\n                        }\n                        ret = func(option_layout.parameters || {}, f.resolve(element_data, extra), data_index);\n                    } else {\n                        ret = func(option_layout.parameters || {}, element_data, data_index);\n                    }\n                }\n                break;\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Generate dimension extent function based on layout parameters\n     * @ignore\n     * @protected\n     * @param {('x'|'y')} dimension\n     */\n    getAxisExtent (dimension) {\n\n        if (!['x', 'y'].includes(dimension)) {\n            throw new Error('Invalid dimension identifier');\n        }\n\n        const axis_name = `${dimension}_axis`;\n        const axis_layout = this.layout[axis_name];\n\n        // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n        if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)) {\n            return [+axis_layout.floor, +axis_layout.ceiling];\n        }\n\n        // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n        let data_extent = [];\n        if (axis_layout.field && this.data) {\n            if (!this.data.length) {\n                // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n                //  because we don't need padding around an empty screen)\n                data_extent = axis_layout.min_extent || [];\n                return data_extent;\n            } else {\n                data_extent = this._getDataExtent(this.data, axis_layout);\n\n                // Apply upper/lower buffers, if applicable\n                const original_extent_span = data_extent[1] - data_extent[0];\n                if (!isNaN(axis_layout.lower_buffer)) {\n                    data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n                }\n                if (!isNaN(axis_layout.upper_buffer)) {\n                    data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n                }\n\n                if (typeof axis_layout.min_extent == 'object') {\n                    // The data should span at least the range specified by min_extent, an array with [low, high]\n                    const range_min = axis_layout.min_extent[0];\n                    const range_max = axis_layout.min_extent[1];\n                    if (!isNaN(range_min) && !isNaN(range_max)) {\n                        data_extent[0] = Math.min(data_extent[0], range_min);\n                    }\n                    if (!isNaN(range_max)) {\n                        data_extent[1] = Math.max(data_extent[1], range_max);\n                    }\n                }\n                // If specified, floor and ceiling will override the actual data range\n                return [\n                    isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                    isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling,\n                ];\n            }\n        }\n\n        // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n        // then default to using the state-defined region as the extent\n        if (dimension === 'x' && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n            return [this.state.start, this.state.end];\n        }\n\n        // No conditions met for generating a valid extent, return an empty array\n        return [];\n\n    }\n\n    /**\n     * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n     *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n     *\n     *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n     *\n     * @protected\n     * @param {('x'|'y1'|'y2')} dimension\n     * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n     *   and meanings of these parameters may vary between different data layers.\n     * @returns {Object[]}\n     *   An array of objects: each object must have an 'x' attribute to position the tick.\n     *   Other supported object keys:\n     *     * text: string to render for a given tick\n     *     * style: d3-compatible CSS style object\n     *     * transform: SVG transform attribute string\n     *     * color: string or LocusZoom scalable parameter object\n     */\n    getTicks (dimension, config) {\n        if (!['x', 'y1', 'y2'].includes(dimension)) {\n            throw new Error(`Invalid dimension identifier ${dimension}`);\n        }\n        return [];\n    }\n\n    /**\n     * Determine the coordinates for where to point the tooltip at. Typically, this is the center of a datum element (eg,\n     *  the middle of a scatter plot point). Also provide an offset if the tooltip should not be at that center (most\n     *  elements are not single points, eg a scatter plot point has a radius and a gene is a rectangle).\n     *  The default implementation is quite naive: it places the tooltip at the origin for that layer. Individual layers\n     *    should override this method to position relative to the chosen data element or mouse event.\n     * @protected\n     * @param {Object} tooltip A tooltip object (including attribute tooltip.data)\n     * @returns {Object} as {x_min, x_max, y_min, y_max} in px, representing bounding box of a rectangle around the data pt\n     *  Note that these pixels are in the SVG coordinate system\n     */\n    _getTooltipPosition(tooltip) {\n        const panel = this.parent;\n\n        const y_scale = panel[`y${this.layout.y_axis.axis}_scale`];\n        const y_extent = panel[`y${this.layout.y_axis.axis}_extent`];\n\n        const x = panel.x_scale(panel.x_extent[0]);\n        const y = y_scale(y_extent[0]);\n\n        return { x_min: x, x_max: x, y_min: y, y_max: y };\n    }\n\n    /**\n     * Draw a tooltip on the data layer pointed at the specified coordinates, in the specified orientation.\n     *  Tooltip will be drawn on the edge of the major axis, and centered along the minor axis- see diagram.\n     *   v\n     * > o <\n     *   ^\n     *\n     * @protected\n     * @param tooltip {Object} The object representing all data for the tooltip to be drawn\n     * @param {'vertical'|'horizontal'|'top'|'bottom'|'left'|'right'} position Where to draw the tooltip relative to\n     *  the data\n     * @param {Number} x_min The min x-coordinate for the bounding box of the data element\n     * @param {Number} x_max The max x-coordinate for the bounding box of the data element\n     * @param {Number} y_min The min y-coordinate for the bounding box of the data element\n     * @param {Number} y_max The max y-coordinate for the bounding box of the data element\n     */\n    _drawTooltip(tooltip, position, x_min, x_max, y_min, y_max) {\n        const panel_layout = this.parent.layout;\n        const plot_layout = this.parent_plot.layout;\n        const layer_layout = this.layout;\n\n        // Tooltip position params: as defined in the default stylesheet, used in calculations\n        const arrow_size = 7;\n        const stroke_width = 1;\n        const arrow_total = arrow_size + stroke_width;  // Tooltip pos should account for how much space the arrow takes up\n\n        const tooltip_padding = 6;  // bbox size must account for any internal padding applied between data and border\n\n        const page_origin = this._getPageOrigin();\n        const tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        const data_layer_height = panel_layout.height - (panel_layout.margin.top + panel_layout.margin.bottom);\n        const data_layer_width = plot_layout.width - (panel_layout.margin.left + panel_layout.margin.right);\n\n        // Clip the edges of the datum to the available plot area\n        x_min = Math.max(x_min, 0);\n        x_max = Math.min(x_max, data_layer_width);\n        y_min = Math.max(y_min, 0);\n        y_max = Math.min(y_max, data_layer_height);\n\n        const x_center = (x_min + x_max) / 2;\n        const y_center = (y_min + y_max) / 2;\n        // Default offsets are the far edge of the datum bounding box\n        let x_offset = x_max - x_center;\n        let y_offset = y_max - y_center;\n        let placement = layer_layout.tooltip_positioning;\n\n        // Coordinate system note: the tooltip is positioned relative to the plot/page; the arrow is positioned relative to\n        //  the tooltip boundaries\n        let tooltip_top, tooltip_left, arrow_type, arrow_top, arrow_left;\n\n        // The user can specify a generic orientation, and LocusZoom will autoselect whether to place the tooltip above or below\n        if (placement === 'vertical') {\n            // Auto-select whether to position above the item, or below\n            x_offset = 0;\n            if (tooltip_box.height + arrow_total > data_layer_height - (y_center + y_offset)) {\n                placement = 'top';\n            } else {\n                placement = 'bottom';\n            }\n        } else if (placement === 'horizontal') {\n            // Auto select whether to position to the left of the item, or to the right\n            y_offset = 0;\n            if (x_center <= plot_layout.width / 2) {\n                placement = 'left';\n            } else {\n                placement = 'right';\n            }\n        }\n\n        if (placement === 'top' || placement === 'bottom') {\n            // Position horizontally centered above the point\n            const offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            const offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            tooltip_left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left =  page_origin.x + x_center - tooltip_left - arrow_size;  // Arrow should be centered over the data\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (placement === 'top') {\n                tooltip_top = page_origin.y + y_center - (y_offset + tooltip_box.height + arrow_total);\n                arrow_type = 'down';\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                tooltip_top = page_origin.y + y_center + y_offset + arrow_total;\n                arrow_type = 'up';\n                arrow_top = 0 - arrow_total;\n            }\n        } else if (placement === 'left' || placement === 'right') {\n            // Position tooltip horizontally on the left or the right depending on which side of the plot the point is on\n            if (placement === 'left') {\n                tooltip_left = page_origin.x + x_center + x_offset + arrow_total;\n                arrow_type = 'left';\n                arrow_left = -1 * (arrow_size + stroke_width);\n            } else {\n                tooltip_left = page_origin.x + x_center - tooltip_box.width - x_offset - arrow_total;\n                arrow_type = 'right';\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position with arrow vertically centered along tooltip edge unless we're at the top or bottom of the plot\n            if (y_center - (tooltip_box.height / 2) <= 0) { // Too close to the top, push it down\n                tooltip_top = page_origin.y + y_center - (1.5 * arrow_size) - tooltip_padding;\n                arrow_top = tooltip_padding;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height) { // Too close to the bottom, pull it up\n                tooltip_top = page_origin.y + y_center + arrow_size + tooltip_padding - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_size) - tooltip_padding;\n            } else { // vertically centered\n                tooltip_top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_size;\n            }\n        } else {\n            throw new Error('Unrecognized placement value');\n        }\n\n        // Position the div itself, relative to the layer origin\n        tooltip.selector\n            .style('left', `${tooltip_left}px`)\n            .style('top', `${tooltip_top}px`);\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append('div')\n                .style('position', 'absolute');\n        }\n        tooltip.arrow\n            .attr('class', `lz-data_layer-tooltip-arrow_${arrow_type}`)\n            .style('left', `${arrow_left}px`)\n            .style('top', `${arrow_top}px`);\n        return this;\n    }\n\n    /**\n     * Determine whether a given data element matches all predefined filter criteria, usually as specified in a layout directive.\n     *\n     * Typically this is used with array.filter (the first argument is curried, `this.filter.bind(this, options)`\n     * @private\n     * @param {Object[]} filter_rules A list of rule entries: {field, value, operator} describing each filter.\n     *  Operator must be from a list of built-in operators. If the field is omitted, the entire datum object will be\n     *  passed to the filter, rather than a single scalar value. (this is only useful with custom `MatchFunctions` as operator)\n     * @param {Object} item\n     * @param {Number} index\n     * @param {Array} array\n     * @returns {Boolean} Whether the specified item is a match\n     */\n    filter(filter_rules, item, index, array) {\n        let is_match = true;\n        filter_rules.forEach((filter) => { // Try each filter on this item, in sequence\n            const {field, operator, value: target} = filter;\n            const test_func = MATCHERS.get(operator);\n\n            // Return the field value or annotation. If no `field` is specified, the filter function will operate on\n            //  the entire data object. This behavior is only really useful with custom functions, because the\n            //  builtin ones expect to receive a scalar value\n            const extra = this.getElementAnnotation(item);\n            const field_value = field ? (new Field(field)).resolve(item, extra) : item;\n            if (!test_func(field_value, target)) {\n                is_match = false;\n            }\n        });\n        return is_match;\n    }\n\n    /**\n     * Get \"annotation\" metadata associated with a particular point.\n     *\n     * @protected\n     * @param {String|Object} element The data object or ID string for the element\n     * @param {String} [key] The name of the annotation to track. If omitted, returns all annotations for this element as an object.\n     * @return {*}\n     */\n    getElementAnnotation (element, key) {\n        const id = this.getElementId(element);\n        const extra = this.layer_state.extra_fields[id];\n        return key ? (extra && extra[key]) : extra;\n    }\n\n    /****** Private methods: rarely overridden or modified by external usages */\n\n    /**\n     * Apply filtering options to determine the set of data to render\n     *\n     * This must be applied on rendering, not fetch, so that the axis limits reflect the true range of the dataset\n     *   Otherwise, two stacked panels (same dataset filtered in different ways) might not line up on the x-axis when\n     *   filters are applied.\n     * @param data\n     * @return {*}\n     * @private\n     */\n    _applyFilters(data) {\n        data = data || this.data;\n\n        if (this._filter_func) {\n            data = data.filter(this._filter_func);\n        } else if (this.layout.filters) {\n            data = data.filter(this.filter.bind(this, this.layout.filters));\n        }\n        return data;\n    }\n\n    /**\n     * Define default state that should get tracked during the lifetime of this layer.\n     *\n     * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n     *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n     *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n     * @private\n     */\n    _setDefaultState() {\n        // Each datalayer tracks two kinds of status: flags for internal state (highlighted, selected, tooltip),\n        //  and \"extra fields\" (annotations like \"show a tooltip\" that are not determined by the server, but need to\n        //  persist across re-render)\n        const layer_state = { status_flags: {}, extra_fields: {} };\n        const status_flags = layer_state.status_flags;\n        STATUSES.adjectives.forEach((status) => {\n            status_flags[status] = status_flags[status] || new Set();\n        });\n        // Also initialize \"internal-only\" state fields (things that are tracked, but not set directly by external events)\n        status_flags['has_tooltip'] = status_flags['has_tooltip'] || new Set();\n\n        if (this.parent) {\n            // If layer has a parent, store a reference in the overarching plot.state object\n            this.state_id = `${this.parent.id}.${this.id}`;\n            this.state = this.parent.state;\n            this.state[this.state_id] = layer_state;\n        }\n        this.layer_state = layer_state;\n    }\n\n    /**\n     * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n     *\n     * @private\n     * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n     */\n    getBaseId () {\n        if (this._base_id) {\n            return this._base_id;\n        }\n\n        if (this.parent) {\n            return `${this.parent_plot.id}.${this.parent.id}.${this.id}`;\n        } else {\n            return (this.id || '').toString();\n        }\n    }\n\n    /**\n     * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n     *\n     * May be used by operations that resize the data layer to fit available data\n     *\n     * @private\n     * @returns {number}\n     */\n    getAbsoluteDataHeight() {\n        const dataBCR = this.svg.group.node().getBoundingClientRect();\n        return dataBCR.height;\n    }\n\n    /**\n     * Initialize a data layer\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    initialize() {\n        this._base_id = this.getBaseId();\n\n        // Append a container group element to house the main data layer group element and the clip path\n        const base_id = this.getBaseId();\n        this.svg.container = this.parent.svg.group.append('g')\n            .attr('class', 'lz-data_layer-container')\n            .attr('id', `${base_id}.data_layer_container`);\n\n        // Append clip path to the container element\n        this.svg.clipRect = this.svg.container.append('clipPath')\n            .attr('id', `${base_id}.clip`)\n            .append('rect');\n\n        // Append svg group for rendering all data layer elements, clipped by the clip path\n        this.svg.group = this.svg.container.append('g')\n            .attr('id', `${base_id}.data_layer`)\n            .attr('clip-path', `url(#${base_id}.clip)`);\n\n        return this;\n\n    }\n\n    /**\n     * Generate a tool tip for a given element\n     * @private\n     * @param {String|Object} data Data for the element associated with the tooltip\n     */\n    createTooltip (data) {\n        if (typeof this.layout.tooltip != 'object') {\n            throw new Error(`DataLayer [${this.id}] layout does not define a tooltip`);\n        }\n        const id = this.getElementId(data);\n        if (this.tooltips[id]) {\n            this.positionTooltip(id);\n            return;\n        }\n        this.tooltips[id] = {\n            data: data,\n            arrow: null,\n            selector: d3.select(this.parent_plot.svg.node().parentNode).append('div')\n                .attr('class', 'lz-data_layer-tooltip')\n                .attr('id', `${id}-tooltip`),\n        };\n        this.layer_state.status_flags['has_tooltip'].add(id);\n        this.updateTooltip(data);\n        return this;\n    }\n\n    /**\n     * Update a tool tip (generate its inner HTML)\n     *\n     * @private\n     * @param {String|Object} d The element associated with the tooltip\n     * @param {String} [id] An identifier to the tooltip\n     */\n    updateTooltip(d, id) {\n        if (typeof id == 'undefined') {\n            id = this.getElementId(d);\n        }\n        // Empty the tooltip of all HTML (including its arrow!)\n        this.tooltips[id].selector.html('');\n        this.tooltips[id].arrow = null;\n        // Set the new HTML\n        if (this.layout.tooltip.html) {\n            this.tooltips[id].selector.html(parseFields(this.layout.tooltip.html, d, this.getElementAnnotation(d)));\n        }\n        // If the layout allows tool tips on this data layer to be closable then add the close button\n        // and add padding to the tooltip to accommodate it\n        if (this.layout.tooltip.closable) {\n            this.tooltips[id].selector.insert('button', ':first-child')\n                .attr('class', 'lz-tooltip-close-button')\n                .attr('title', 'Close')\n                .text('×')\n                .on('click', () => {\n                    this.destroyTooltip(id);\n                });\n        }\n        // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n        this.tooltips[id].selector.data([d]);\n        // Reposition and draw a new arrow\n        this.positionTooltip(id);\n        return this;\n    }\n\n    /**\n     * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n     *\n     * @private\n     * @param {String|Object} element_or_id The element (or id) associated with the tooltip\n     * @param {boolean} [temporary=false] Whether this is temporary (not to be tracked in state). Differentiates\n     *  \"recreate tooltips on re-render\" (which is temporary) from \"user has closed this tooltip\" (permanent)\n     * @returns {BaseDataLayer}\n     */\n    destroyTooltip(element_or_id, temporary) {\n        let id;\n        if (typeof element_or_id == 'string') {\n            id = element_or_id;\n        } else {\n            id = this.getElementId(element_or_id);\n        }\n        if (this.tooltips[id]) {\n            if (typeof this.tooltips[id].selector == 'object') {\n                this.tooltips[id].selector.remove();\n            }\n            delete this.tooltips[id];\n        }\n        // When a tooltip is removed, also remove the reference from the state\n        if (!temporary) {\n            const tooltip_state = this.layer_state.status_flags['has_tooltip'];\n            tooltip_state.delete(id);\n        }\n        return this;\n    }\n\n    /**\n     * Loop through and destroy all tool tips on this data layer\n     *\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    destroyAllTooltips(temporary = true) {\n        for (let id in this.tooltips) {\n            this.destroyTooltip(id, temporary);\n        }\n        return this;\n    }\n\n    /**\n     * Position and then redraw tool tip - naïve function to place a tool tip in the data layer. By default, positions wrt\n     *   the top-left corner of the data layer.\n     *\n     * Each layer type may have more specific logic. Consider overriding the provided hooks `_getTooltipPosition` or\n     *  `_drawTooltip` as appropriate\n     *\n     * @private\n     * @param {String} id The identifier of the tooltip to position\n     * @returns {BaseDataLayer}\n     */\n    positionTooltip(id) {\n        if (typeof id != 'string') {\n            throw new Error('Unable to position tooltip: id is not a string');\n        }\n        if (!this.tooltips[id]) {\n            throw new Error('Unable to position tooltip: id does not point to a valid tooltip');\n        }\n        const tooltip = this.tooltips[id];\n        const coords = this._getTooltipPosition(tooltip);\n\n        if (!coords) {\n            // Special cutout: normally, tooltips are positioned based on the datum element. Some, like lines/curves,\n            //  work better if based on a mouse event. Since not every redraw contains a mouse event, we can just skip\n            //  calculating position when no position information is available.\n            return null;\n        }\n        this._drawTooltip(tooltip, this.layout.tooltip_positioning, coords.x_min, coords.x_max, coords.y_min, coords.y_max);\n    }\n\n    /**\n     * Loop through and position all tool tips on this data layer\n     *\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    positionAllTooltips() {\n        for (let id in this.tooltips) {\n            this.positionTooltip(id);\n        }\n        return this;\n    }\n\n    /**\n     * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n     *\n     * @private\n     * @param {String|Object} element The element associated with the tooltip\n     * @param {boolean} first_time Because panels can re-render, the rules for showing a tooltip\n     *  depend on whether this is the first time a status change affecting display has been applied.\n     * @returns {BaseDataLayer}\n     */\n    showOrHideTooltip(element, first_time) {\n        if (typeof this.layout.tooltip != 'object') {\n            return this;\n        }\n        const id = this.getElementId(element);\n\n        /**\n         * Apply rules and decide whether to show or hide the tooltip\n         * @param {Object} statuses All statuses that apply to an element\n         * @param {String[]|object} directive A layout directive object\n         * @param operator\n         * @returns {null|bool}\n         */\n        const resolveStatus = (statuses, directive, operator) => {\n            let status = null;\n            if (typeof statuses != 'object' || statuses === null) {\n                return null;\n            }\n            if (Array.isArray(directive)) {\n                // This happens when the function is called on the inner part of the directive\n                operator = operator || 'and';\n                if (directive.length === 1) {\n                    status = statuses[directive[0]];\n                } else {\n                    status = directive.reduce((previousValue, currentValue) => {\n                        if (operator === 'and') {\n                            return statuses[previousValue] && statuses[currentValue];\n                        } else if (operator === 'or') {\n                            return statuses[previousValue] || statuses[currentValue];\n                        }\n                        return null;\n                    });\n                }\n            } else if (typeof directive == 'object') {\n                let sub_status;\n                for (let sub_operator in directive) {\n                    sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                    if (status === null) {\n                        status = sub_status;\n                    } else if (operator === 'and') {\n                        status = status && sub_status;\n                    } else if (operator === 'or') {\n                        status = status || sub_status;\n                    }\n                }\n            } else {\n                return false;\n            }\n            return status;\n        };\n\n        let show_directive = {};\n        if (typeof this.layout.tooltip.show == 'string') {\n            show_directive = { and: [ this.layout.tooltip.show ] };\n        } else if (typeof this.layout.tooltip.show == 'object') {\n            show_directive = this.layout.tooltip.show;\n        }\n\n        let hide_directive = {};\n        if (typeof this.layout.tooltip.hide == 'string') {\n            hide_directive = { and: [ this.layout.tooltip.hide ] };\n        } else if (typeof this.layout.tooltip.hide == 'object') {\n            hide_directive = this.layout.tooltip.hide;\n        }\n\n        // Find all the statuses that apply to just this single element\n        const layer_state = this.layer_state;\n        var status_flags = {};  // {status_name: bool}\n        STATUSES.adjectives.forEach((status) => {\n            const antistatus = `un${status}`;\n            status_flags[status] = (layer_state.status_flags[status].has(id));\n            status_flags[antistatus] = !status_flags[status];\n        });\n\n        // Decide whether to show/hide the tooltip based solely on the underlying element\n        const show_resolved = resolveStatus(status_flags, show_directive);\n        const hide_resolved = resolveStatus(status_flags, hide_directive);\n\n        // Most of the tooltip display logic depends on behavior layouts: was point (un)selected, (un)highlighted, etc.\n        // But sometimes, a point is selected, and the user then closes the tooltip. If the panel is re-rendered for\n        //  some outside reason (like state change), we must track this in the create/destroy events as tooltip state.\n        const has_tooltip = (layer_state.status_flags['has_tooltip'].has(id));\n        const tooltip_was_closed = first_time ? false : !has_tooltip;\n        if (show_resolved && !tooltip_was_closed && !hide_resolved) {\n            this.createTooltip(element);\n        } else {\n            this.destroyTooltip(element);\n        }\n\n        return this;\n    }\n\n    /**\n     * Toggle a status (e.g. highlighted, selected, identified) on an element\n     *\n     * @private\n     * @fires event:layout_changed\n     * @fires event:element_selection\n     * @fires event:match_requested\n     * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n     * @param {String|Object} element The data bound to the element of interest\n     * @param {Boolean} active True to add the status (and associated CSS styles); false to remove it\n     * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n     * @returns {BaseDataLayer}\n     */\n    setElementStatus(status, element, active, exclusive) {\n        if (status === 'has_tooltip') {\n            // This is a special adjective that exists solely to track tooltip state. It has no CSS and never gets set\n            //  directly. It is invisible to the official enums.\n            return this;\n        }\n        if (typeof active == 'undefined') {\n            active = true;\n        }\n\n        // Get an ID for the element or return having changed nothing\n        let element_id;\n        try {\n            element_id = this.getElementId(element);\n        } catch (get_element_id_error) {\n            return this;\n        }\n\n        // Enforce exclusivity (force all elements to have the opposite of toggle first)\n        if (exclusive) {\n            this.setAllElementStatus(status, !active);\n        }\n\n        // Set/unset the proper status class on the appropriate DOM element(s), *and* potentially an additional element\n        d3.select(`#${element_id}`).classed(`lz-data_layer-${this.layout.type}-${status}`, active);\n        const element_status_node_id = this.getElementStatusNodeId(element);\n        if (element_status_node_id !== null) {\n            d3.select(`#${element_status_node_id}`).classed(`lz-data_layer-${this.layout.type}-statusnode-${status}`, active);\n        }\n\n        // Track element ID in the proper status state array\n        const added_status = !this.layer_state.status_flags[status].has(element_id);  // On a re-render, existing statuses will be reapplied.\n        if (active && added_status) {\n            this.layer_state.status_flags[status].add(element_id);\n        }\n        if (!active && !added_status) {\n            this.layer_state.status_flags[status].delete(element_id);\n        }\n\n        // Trigger tool tip show/hide logic\n        this.showOrHideTooltip(element, added_status);\n\n        // Trigger layout changed event hook\n        if (added_status) {\n            this.parent.emit('layout_changed', true);\n        }\n\n        const is_selected = (status === 'selected');\n        if (is_selected && (added_status || !active)) {\n            // Notify parents that an element has changed selection status (either active, or inactive)\n            this.parent.emit('element_selection', { element: element, active: active }, true);\n        }\n\n        const value_to_broadcast = (this.layout.match && this.layout.match.send);\n        if (is_selected && (typeof value_to_broadcast !== 'undefined') && (added_status || !active)) {\n            this.parent.emit(\n                // The broadcast value can use transforms to \"clean up value before sending broadcasting\"\n                'match_requested',\n                { value: new Field(value_to_broadcast).resolve(element), active: active },\n                true\n            );\n        }\n        return this;\n    }\n\n    /**\n     * Toggle a status on all elements in the data layer\n     *\n     * @private\n     * @param {String} status\n     * @param {Boolean} toggle\n     * @returns {BaseDataLayer}\n     */\n    setAllElementStatus(status, toggle) {\n\n        // Sanity check\n        if (typeof status == 'undefined' || !STATUSES.adjectives.includes(status)) {\n            throw new Error('Invalid status');\n        }\n        if (typeof this.layer_state.status_flags[status] == 'undefined') {\n            return this;\n        }\n        if (typeof toggle == 'undefined') {\n            toggle = true;\n        }\n\n        // Apply statuses\n        if (toggle) {\n            this.data.forEach((element) => this.setElementStatus(status, element, true));\n        } else {\n            const status_ids = new Set(this.layer_state.status_flags[status]); // copy so that we don't mutate while iterating\n            status_ids.forEach((id) => {\n                const element = this.getElementById(id);\n                if (typeof element == 'object' && element !== null) {\n                    this.setElementStatus(status, element, false);\n                }\n            });\n            this.layer_state.status_flags[status] = new Set();\n        }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        return this;\n    }\n\n    /**\n     * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n     *\n     * @private\n     * @param {d3.selection} selection\n     */\n    applyBehaviors(selection) {\n        if (typeof this.layout.behaviors != 'object') {\n            return;\n        }\n        Object.keys(this.layout.behaviors).forEach((directive) => {\n            const event_match = /(click|mouseover|mouseout)/.exec(directive);\n            if (!event_match) {\n                return;\n            }\n            selection.on(`${event_match[0]}.${directive}`, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n        });\n    }\n\n    /**\n     * Generate a function that executes an arbitrary list of behaviors on an element during an event\n     *\n     * @private\n     * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n     * @param {Object[]} behaviors An object describing the behavior to attach to this single element\n     * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n     * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n     *  selected, etc)\n     * @param {boolean} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n     *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n     * @returns {function(this:BaseDataLayer)} Return a function that handles the event in context with the behavior\n     *   and the element- can be attached as an event listener\n     */\n    executeBehaviors(directive, behaviors) {\n\n        // Determine the required state of control and shift keys during the event\n        const requiredKeyStates = {\n            'ctrl': (directive.includes('ctrl')),\n            'shift': (directive.includes('shift')),\n        };\n        const self = this;\n        return function(element) {\n            // This method may be used on two kinds of events: directly attached, or bubbled.\n            // D3 doesn't natively support bubbling very well; if no data is bound on the currentTarget, check to see\n            //  if there is data available at wherever the event was initiated from\n            element = element || d3.select(d3.event.target).datum();\n\n            // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n            if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey) {\n                return;\n            }\n\n            // Loop through behaviors making each one go in succession\n            behaviors.forEach((behavior) => {\n\n                // Route first by the action, if defined\n                if (typeof behavior != 'object' || behavior === null) {\n                    return;\n                }\n\n                switch (behavior.action) {\n\n                // Set a status (set to true regardless of current status, optionally with exclusivity)\n                case 'set':\n                    self.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                    break;\n\n                // Unset a status (set to false regardless of current status, optionally with exclusivity)\n                case 'unset':\n                    self.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                    break;\n\n                // Toggle a status\n                case 'toggle':\n                    var current_status_boolean = (self.layer_state.status_flags[behavior.status].has(self.getElementId(element)));\n                    var exclusive = behavior.exclusive && !current_status_boolean;\n\n                    self.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                    break;\n\n                // Link to a dynamic URL\n                case 'link':\n                    if (typeof behavior.href == 'string') {\n                        const url = parseFields(behavior.href, element, self.getElementAnnotation(element));\n                        if (typeof behavior.target == 'string') {\n                            window.open(url, behavior.target);\n                        } else {\n                            window.location.href = url;\n                        }\n                    }\n                    break;\n\n                // Action not defined, just return\n                default:\n                    break;\n                }\n            });\n        };\n    }\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     *   Necessary for positioning any HTML elements over the panel\n     *\n     * @private\n     * @returns {{x: Number, y: Number}}\n     */\n    _getPageOrigin() {\n        const panel_origin = this.parent._getPageOrigin();\n        return {\n            x: panel_origin.x + this.parent.layout.margin.left,\n            y: panel_origin.y + this.parent.layout.margin.top,\n        };\n    }\n\n    /**\n     * Apply all tracked element statuses. This is primarily intended for re-rendering the plot, in order to preserve\n     *  behaviors when items are updated.\n     *  @private\n     */\n    applyAllElementStatus () {\n        const status_flags = this.layer_state.status_flags;\n        const self = this;\n        for (let property in status_flags) {\n            if (!Object.prototype.hasOwnProperty.call(status_flags, property)) {\n                continue;\n            }\n            status_flags[property].forEach((element_id) => {\n                try {\n                    this.setElementStatus(property, this.getElementById(element_id), true);\n                } catch (e) {\n                    console.warn(`Unable to apply state: ${self.state_id}, ${property}`);\n                    console.error(e);\n                }\n            });\n\n        }\n    }\n\n    /**\n     * Position the datalayer and all tooltips\n     * @private\n     * @returns {BaseDataLayer}\n     */\n    draw() {\n        this.svg.container\n            .attr('transform', `translate(${this.parent.layout.cliparea.origin.x}, ${this.parent.layout.cliparea.origin.y})`);\n        this.svg.clipRect\n            .attr('width', this.parent.layout.cliparea.width)\n            .attr('height', this.parent.layout.cliparea.height);\n        this.positionAllTooltips();\n        return this;\n    }\n\n    /**\n     * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n     *\n     * Whereas .render draws whatever data is available, this method resets the view and fetches new data if necessary.\n     *\n     * @private\n     * @return {Promise}\n     */\n    reMap() {\n        this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n        // and then recreated if returning to visibility\n\n        // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n        return this.parent_plot.lzd.getData(this.state, this.layout.fields)\n            .then((new_data) => {\n                this.data = new_data.body;  // chain.body from datasources\n                this.applyDataMethods();\n                this.initialized = true;\n            });\n    }\n}\n\nSTATUSES.verbs.forEach((verb, idx) => {\n    const adjective = STATUSES.adjectives[idx];\n    const antiverb = `un${verb}`;\n    // Set/unset a single element's status\n\n    /**\n     * @private\n     * @function highlightElement\n     */\n    /**\n     * @private\n     * @function selectElement\n     */\n    /**\n     *  @private\n     *  @function fadeElement\n     */\n    /**\n     *  @private\n     *  @function hideElement\n     */\n    BaseDataLayer.prototype[`${verb}Element`] = function(element, exclusive = false) {\n        exclusive = !!exclusive;\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function unhighlightElement\n     */\n    /**\n     *  @private\n     *  @function unselectElement\n     */\n    /**\n     *  @private\n     *  @function unfadeElement\n     */\n    /**\n     *  @private\n     *  @function unhideElement\n     */\n    BaseDataLayer.prototype[`${antiverb}Element`] = function(element, exclusive) {\n        if (typeof exclusive == 'undefined') {\n            exclusive = false;\n        } else {\n            exclusive = !!exclusive;\n        }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function highlightAllElements\n     */\n    /**\n     *  @private\n     *  @function selectAllElements\n     */\n    /**\n     *  @private\n     *  @function fadeAllElements\n     */\n    /**\n     *  @private\n     *  @function hideAllElements\n     */\n    // Set/unset status for all elements\n    BaseDataLayer.prototype[`${verb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n\n    /**\n     * @private\n     * @function unhighlightAllElements\n     */\n    /**\n     *  @private\n     *  @function unselectAllElements\n     */\n    /**\n     * @private\n     * @function unfadeAllElements\n     * */\n    /**\n     * @private\n     * @function unhideAllElements\n     */\n    BaseDataLayer.prototype[`${antiverb}AllElements`] = function() {\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\nexport {BaseDataLayer as default};\n","import BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\n\n/**\n * @memberof module:LocusZoom_DataLayers~annotation_track\n */\nconst default_layout = {\n    color: '#000000',\n    filters: null,\n    tooltip_positioning: 'vertical',\n    hitarea_width: 8,\n};\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to mark items by membership in a group, alongside information in other panels\n * @alias module:LocusZoom_DataLayers~annotation_track\n * @see {@link module:LocusZoom_DataLayers~BaseDataLayer} for additional layout options\n */\nclass AnnotationTrack extends BaseDataLayer {\n    /**\n     * @param {String|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color] Specify how to choose the fill color for each tick mark\n     * @param {number} [layout.hitarea_width=8] The width (in pixels) of hitareas. Annotation marks are typically 1 px wide,\n     *   so a hit area of 4px on each side can make it much easier to select an item for a tooltip. Hitareas will not interfere\n     *   with selecting adjacent points.\n     * @param {'horizontal'|'vertical'|'top'|'bottom'|'left'|'right'} [layout.tooltip_positioning='vertical'] Where to draw the tooltip relative to the datum.\n     */\n    constructor(layout) {\n        if (!Array.isArray(layout.filters)) {\n            throw new Error('Annotation track must specify array of filters for selecting points to annotate');\n        }\n        merge(layout, default_layout);\n        super(...arguments);\n    }\n\n    initialize() {\n        super.initialize();\n        this._hitareas_group = this.svg.group.append('g')\n            .attr('class', `lz-data_layer-${this.layout.type}-hit_areas`);\n\n        this._visible_lines_group = this.svg.group.append('g')\n            .attr('class', `lz-data_layer-${this.layout.type}-visible_lines`);\n    }\n\n    render() {\n        // Apply filters to only render a specified set of points\n        const track_data = this._applyFilters();\n\n        const hit_areas_selection = this._hitareas_group.selectAll(`rect.lz-data_layer-${this.layout.type}`)\n            .data(track_data, (d) => d[this.layout.id_field]);\n\n\n        const _getX = (d, i) => {\n            // Helper for hitarea position calcs: ensures that a hitarea never overlaps the space allocated\n            // for a real data element. Helps to avoid mouse jitter when selecting tooltips in crowded areas.\n            const x_center = this.parent['x_scale'](d[this.layout.x_axis.field]);\n            let x_left = x_center - this.layout.hitarea_width / 2;\n            if (i >= 1) {\n                // This assumes that the data are in sorted order.\n                const left_node = track_data[i - 1];\n                const left_node_x_center = this.parent['x_scale'](left_node[this.layout.x_axis.field]);\n                x_left = Math.max(x_left, (x_center + left_node_x_center) / 2);\n            }\n            return [x_left, x_center];\n        };\n\n        // Draw hitareas under real data elements, so that real data elements always take precedence\n        hit_areas_selection.enter()\n            .append('rect')\n            .attr('class', `lz-data_layer-${this.layout.type}`)\n            // Update the set of elements to reflect new data\n            .merge(hit_areas_selection)\n            .attr('id', (d) => this.getElementId(d))\n            .attr('height', this.parent.layout.height)\n            .attr('opacity', 0)\n            .attr('x', (d, i) => {\n                const crds = _getX(d, i);\n                return crds[0];\n            })\n            .attr('width', (d, i) => {\n                const crds = _getX(d, i);\n                return (crds[1] - crds[0]) + this.layout.hitarea_width / 2;\n            });\n\n        const width = 1;\n        const selection = this._visible_lines_group.selectAll(`rect.lz-data_layer-${this.layout.type}`)\n            .data(track_data, (d) => d[this.layout.id_field]);\n        // Draw rectangles (visual and tooltip positioning)\n        selection.enter()\n            .append('rect')\n            .attr('class', `lz-data_layer-${this.layout.type}`)\n            .merge(selection)\n            .attr('id', (d) => this.getElementId(d))\n            .attr('x', (d) => this.parent['x_scale'](d[this.layout.x_axis.field]) - width / 2)\n            .attr('width', width)\n            .attr('height', this.parent.layout.height)\n            .attr('fill', (d, i) => this.resolveScalableParameter(this.layout.color, d, i));\n\n        // Remove unused elements\n        selection.exit()\n            .remove();\n\n        // Set up tooltips and mouse interaction\n        this.svg.group\n            .call(this.applyBehaviors.bind(this));\n\n        // Remove unused elements\n        hit_areas_selection.exit()\n            .remove();\n    }\n\n    /**\n     * Render tooltip at the center of each tick mark\n     * @param tooltip\n     * @return {{y_min: number, x_max: *, y_max: *, x_min: number}}\n     * @private\n     */\n    _getTooltipPosition(tooltip) {\n        const panel = this.parent;\n        const data_layer_height = panel.layout.height - (panel.layout.margin.top + panel.layout.margin.bottom);\n        const stroke_width = 1; // as defined in the default stylesheet\n\n        const x_center = panel.x_scale(tooltip.data[this.layout.x_axis.field]);\n        const y_center = data_layer_height / 2;\n        return {\n            x_min: x_center - stroke_width,\n            x_max: x_center + stroke_width,\n            y_min: y_center - panel.layout.margin.top,\n            y_max: y_center + panel.layout.margin.bottom,\n        };\n    }\n}\n\nexport {AnnotationTrack as default};\n","import * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\n\n/**\n * @memberof module:LocusZoom_DataLayers~highlight_regions\n */\nconst default_layout = {\n    color: '#CCCCCC',\n    fill_opacity: 0.5,\n    // By default, it will draw the regions shown.\n    filters: null,\n    // Most use cases will show a preset list of regions defined in the layout\n    //  (if empty, AND layout.fields is not, it could fetch from a data source instead)\n    regions: [],\n    id_field: 'id',\n    start_field: 'start',\n    end_field: 'end',\n    merge_field: null,\n};\n\n/**\n * \"Highlight regions with rectangle\" data layer.\n * Creates one (or more) continuous 2D rectangles that mark an entire interval, to the full height of the panel.\n *\n * Each individual rectangle can be shown in full, or overlapping ones can be merged (eg, based on same category).\n * The rectangles are generally drawn with partial transparency, and do not respond to mouse events: they are a\n *   useful highlight tool to draw attention to intervals that contain interesting variants.\n *\n * This layer has several useful modes:\n * 1. Draw one or more specified rectangles as provided from:\n *      A. Hard-coded layout (layout.regions)\n *      B. Data fetched from a source (like intervals with start and end coordinates)- as specified in layout.fields\n * 2. Fetch data from an external source, and only render the intervals that match criteria\n *\n * @alias module:LocusZoom_DataLayers~highlight_regions\n * @see {@link module:LocusZoom_DataLayers~BaseDataLayer} for additional layout options\n */\nclass HighlightRegions extends BaseDataLayer {\n    /**\n     * @param {String|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color='#CCCCCC'] The fill color for each rectangle\n     * @param {String|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.fill_opacity=0.5] The opacity (0-1). We recommend partial transparency so that\n     *   rectangles do not hide or interfere with adjacent elements.\n     * @param {Object[]} [layout.filters] An array of filter entries specifying which intervals to draw annotations for.\n     * @param {Object[]} [layout.regions] A hard-coded list of regions. If provided, takes precedence over data fetched from an external source.\n     * @param {String} [layout.start_field='start'] The field to use for rectangle start x coordinate\n     * @param {String} [layout.end_field='end'] The field to use for rectangle end x coordinate\n     * @param {String} [layout.merge_field] If two intervals overlap, they can be \"merged\" based on a field that\n     *  identifies the category (eg, only rectangles of the same category will be merged).\n     *  This field must be present in order to trigger merge behavior. This is applied after filters.\n     */\n    constructor(layout) {\n        merge(layout, default_layout);\n        if (layout.interaction || layout.behaviors) {\n            throw new Error('highlight_regions layer does not support mouse events');\n        }\n\n        if (layout.regions && layout.regions.length && layout.fields && layout.fields.length) {\n            throw new Error('highlight_regions layer can specify \"regions\" in layout, OR external data \"fields\", but not both');\n        }\n        super(...arguments);\n    }\n\n    /**\n     * Helper method that combines two rectangles if they are the same type of data (category) and occupy the same\n     *  area of the plot (will automatically sort the data prior to rendering)\n     *\n     * When two fields conflict, it will fill in the fields for the last of the items that overlap in that range.\n     *   Thus, it is not recommended to use tooltips with this feature, because the tooltip won't reflect real data.\n     * @param {Object[]} data\n     * @return {Object[]}\n     * @private\n     */\n    _mergeNodes(data) {\n        const { end_field, merge_field, start_field } = this.layout;\n        if (!merge_field) {\n            return data;\n        }\n\n        // Ensure data is sorted by start field, with category as a tie breaker\n        data.sort((a, b) => {\n            // Ensure that data is sorted by category, then start field (ensures overlapping intervals are adjacent)\n            return d3.ascending(a[merge_field], b[merge_field]) || d3.ascending(a[start_field], b[start_field]);\n        });\n\n        let track_data = [];\n        data.forEach(function (cur_item, index) {\n            const prev_item = track_data[track_data.length - 1] || cur_item;\n            if (cur_item[merge_field] === prev_item[merge_field] && cur_item[start_field] <= prev_item[end_field]) {\n                // If intervals overlap, merge the current item with the previous, and append only the merged interval\n                const new_start = Math.min(prev_item[start_field], cur_item[start_field]);\n                const new_end = Math.max(prev_item[end_field], cur_item[end_field]);\n                cur_item = Object.assign({}, prev_item, cur_item, { [start_field]: new_start, [end_field]: new_end });\n                track_data.pop();\n            }\n            track_data.push(cur_item);\n        });\n        return track_data;\n    }\n\n    render() {\n        const { x_scale } = this.parent;\n        // Apply filters to only render a specified set of points\n        let track_data = this.layout.regions.length ? this.layout.regions : this.data;\n\n        // Pseudo identifier for internal use only (regions have no semantic or transition meaning)\n        track_data.forEach((d, i) => d.id || (d.id = i));\n        track_data = this._applyFilters(track_data);\n        track_data = this._mergeNodes(track_data);\n\n        const selection = this.svg.group.selectAll(`rect.lz-data_layer-${this.layout.type}`)\n            .data(track_data);\n\n        // Draw rectangles\n        selection.enter()\n            .append('rect')\n            .attr('class', `lz-data_layer-${this.layout.type}`)\n            .merge(selection)\n            .attr('id', (d) => this.getElementId(d))\n            .attr('x', (d) => x_scale(d[this.layout.start_field]))\n            .attr('width', (d) => x_scale(d[this.layout.end_field]) - x_scale(d[this.layout.start_field]))\n            .attr('height', this.parent.layout.height)\n            .attr('fill', (d, i) => this.resolveScalableParameter(this.layout.color, d, i))\n            .attr('fill-opacity', (d, i) => this.resolveScalableParameter(this.layout.fill_opacity, d, i));\n\n        // Remove unused elements\n        selection.exit()\n            .remove();\n\n        // Note: This layer intentionally does not allow tooltips or mouse behaviors, and doesn't affect pan/zoom\n        this.svg.group.style('pointer-events', 'none');\n    }\n\n    _getTooltipPosition(tooltip) {\n        // This layer is for visual highlighting only; it does not allow mouse interaction, drag, or tooltips\n        throw new Error('This layer does not support tooltips');\n    }\n}\n\nexport {HighlightRegions as default};\n","import * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\nimport {applyStyles} from '../../helpers/common';\n\n/**\n * @memberof module:LocusZoom_DataLayers~arcs\n */\nconst default_layout = {\n    color: 'seagreen',\n    hitarea_width: '10px',\n    style: {\n        fill: 'none',\n        'stroke-width': '1px',\n        'stroke-opacity': '100%',\n    },\n    tooltip_positioning: 'top',\n};\n\n/**\n * Arc Data Layer\n * Implements a data layer that will render chromatin accessibility tracks.\n * This layer draws arcs (one per datapoint) that connect two endpoints (x.field1 and x.field2) by means of an arc,\n *  with a height determined by y.field.\n * @alias module:LocusZoom_DataLayers~arcs\n * @see {@link module:LocusZoom_DataLayers~BaseDataLayer} for additional layout options\n */\nclass Arcs extends BaseDataLayer {\n    /**\n     * @param {String|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color='seagreen'] Specify how to choose the stroke color for each arc\n     * @param {number} [layout.hitarea_width='10px'] The width (in pixels) of hitareas. Arcs are only as wide as the stroke,\n     *   so a hit area of 5px on each side can make it much easier to select an item for a tooltip.\n     * @param {string} [layout.style.fill='none'] The fill color under the area of the arc\n     * @param {string} [layout.style.stroke-width='1px']\n     * @param {string} [layout.style.stroke_opacity='100%']\n     * @param {'horizontal'|'vertical'|'top'|'bottom'|'left'|'right'} [layout.tooltip_positioning='top'] Where to draw the tooltip relative to the datum.\n     * @param {string} [layout.x_axis.field1] The field to use for one end of the arc; creates a point at (x1, 0)\n     * @param {string} [layout.x_axis.field2] The field to use for the other end of the arc; creates a point at (x2, 0)\n     * @param {string} [layout.y_axis.field] The height at the midpoint of the arc, (xmid, y)\n     */\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        super(...arguments);\n    }\n\n    // Implement the main render function\n    render() {\n        const self = this;\n        const layout = self.layout;\n        const x_scale = self.parent['x_scale'];\n        const y_scale = self.parent[`y${layout.y_axis.axis}_scale`];\n\n        // Apply filters to only render a specified set of points\n        const track_data = this._applyFilters();\n\n        // Helper: Each individual data point describes a path composed of 3 points, with a spline to smooth the line\n        function _make_line(d) {\n            const x1 = d[layout.x_axis.field1];\n            const x2 = d[layout.x_axis.field2];\n            const xmid = (x1 + x2) / 2;\n            const coords = [\n                [x_scale(x1), y_scale(0)],\n                [x_scale(xmid), y_scale(d[layout.y_axis.field])],\n                [x_scale(x2), y_scale(0)],\n            ];\n            // Smoothing options: https://bl.ocks.org/emmasaunders/f7178ed715a601c5b2c458a2c7093f78\n            const line = d3.line()\n                .x((d) => d[0])\n                .y((d) => d[1])\n                .curve(d3.curveNatural);\n            return line(coords);\n        }\n\n        // Draw real lines, and also invisible hitareas for easier mouse events\n        const hitareas = this.svg.group\n            .selectAll('path.lz-data_layer-arcs-hitarea')\n            .data(track_data, (d) => this.getElementId(d));\n\n        const selection = this.svg.group\n            .selectAll('path.lz-data_layer-arcs')\n            .data(track_data, (d) => this.getElementId(d));\n\n        this.svg.group\n            .call(applyStyles, layout.style);\n\n        hitareas\n            .enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-arcs-hitarea')\n            .merge(hitareas)\n            .attr('id', (d) => this.getElementId(d))\n            .style('fill', 'none')\n            .style('stroke-width', layout.hitarea_width)\n            .style('stroke-opacity', 0)\n            .style('stroke', 'transparent')\n            .attr('d', (d) => _make_line(d));\n\n        // Add new points as necessary\n        selection\n            .enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-arcs')\n            .merge(selection)\n            .attr('id', (d) => this.getElementId(d))\n            .attr('stroke', (d, i) => this.resolveScalableParameter(this.layout.color, d, i))\n            .attr('d', (d, i) => _make_line(d));\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n        hitareas.exit()\n            .remove();\n\n        // Apply mouse behaviors to arcs\n        this.svg.group\n            .call(this.applyBehaviors.bind(this));\n\n        return this;\n    }\n\n    _getTooltipPosition(tooltip) {\n        // Center the tooltip arrow at the apex of the arc. Sometimes, only part of an arc shows on the screen, so we\n        //  clean up these values to ensure that the tooltip will appear within the window.\n        const panel = this.parent;\n        const layout = this.layout;\n\n        const x1 = tooltip.data[layout.x_axis.field1];\n        const x2 = tooltip.data[layout.x_axis.field2];\n\n        const y_scale = panel[`y${layout.y_axis.axis}_scale`];\n\n        return {\n            x_min: panel.x_scale(Math.min(x1, x2)),\n            x_max: panel.x_scale(Math.max(x1, x2)),\n            y_min: y_scale(tooltip.data[layout.y_axis.field]),\n            y_max: y_scale(0),\n        };\n    }\n\n}\n\nexport {Arcs as default};\n","import * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\n\n/**\n * @memberof module:LocusZoom_DataLayers~genes\n * @type {{track_vertical_spacing: number, bounding_box_padding: number, color: string, tooltip_positioning: string, exon_height: number, label_font_size: number, label_exon_spacing: number, stroke: string}}\n */\nconst default_layout = {\n    // Optionally specify different fill and stroke properties\n    stroke: 'rgb(54, 54, 150)',\n    color: '#363696',\n    label_font_size: 12,\n    label_exon_spacing: 3,\n    exon_height: 10,\n    bounding_box_padding: 3,\n    track_vertical_spacing: 5,\n    tooltip_positioning: 'top',\n};\n\n\n/**\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @alias module:LocusZoom_DataLayers~genes\n * @see {@link module:LocusZoom_DataLayers~BaseDataLayer} for additional layout options\n */\nclass Genes extends BaseDataLayer {\n    /**\n     * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.stroke='rgb(54, 54, 150)'] The stroke color for each intron and exon\n     * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color='#363696'] The fill color for each intron and exon\n     * @param {number} [layout.label_font_size]\n     * @param {number} [layout.label_exon_spacing] The number of px padding between exons and the gene label\n     * @param {number} [layout.exon_height=10] The height of each exon (vertical line) when drawing the gene\n     * @param {number} [layout.bounding_box_padding=3] Padding around edges of the bounding box, as shown when highlighting a selected gene\n     * @param {number} [layout.track_vertical_spacing=5] Vertical spacing between each row of genes\n     * @param {'horizontal'|'vertical'|'top'|'bottom'|'left'|'right'} [layout.tooltip_positioning='top'] Where to draw the tooltip relative to the datum.\n     */\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        super(...arguments);\n        /**\n         * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n         * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n         * @member {number}\n         * @type {number}\n         */\n        this.transcript_idx = 0;\n\n        /**\n         * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n         *   over positions / assignments\n         * @protected\n         * @member {number}\n         */\n        this.tracks = 1;\n\n        /**\n         * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n         * @member {Object.<Number, Array>}\n         */\n        this.gene_track_index = { 1: [] };\n    }\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    getElementStatusNodeId(element) {\n        return `${this.getElementId(element)}-statusnode`;\n    }\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    getTrackHeight() {\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    }\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {Genes}\n     */\n    assignTracks(data) {\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        const _getLabelWidth = (gene_name, font_size) => {\n            try {\n                const temp_text = this.svg.group.append('text')\n                    .attr('x', 0)\n                    .attr('y', 0)\n                    .attr('class', 'lz-data_layer-genes lz-label')\n                    .style('font-size', font_size)\n                    .text(`${gene_name}→`);\n                const label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e) {\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        return data\n            // Filter out any genes that are fully outside the region of interest. This allows us to use cached data\n            //  when zooming in, without breaking the layout by allocating space for genes that are not visible.\n            .filter((item) => !(item.end < this.state.start) && !(item.start > this.state.end))\n            .map((item) => {\n                // If necessary, split combined gene id / version fields into discrete fields.\n                // NOTE: this may be an issue with CSG's genes data API that may eventually be solved upstream.\n                if (item.gene_id && item.gene_id.indexOf('.')) {\n                    const split = item.gene_id.split('.');\n                    item.gene_id = split[0];\n                    item.gene_version = split[1];\n                }\n\n                // Stash the transcript ID on the parent gene\n                item.transcript_id = item.transcripts[this.transcript_idx].transcript_id;\n\n                // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n                // (range: values in terms of pixels on the screen)\n                item.display_range = {\n                    start: this.parent.x_scale(Math.max(item.start, this.state.start)),\n                    end:   this.parent.x_scale(Math.min(item.end, this.state.end)),\n                };\n                item.display_range.label_width = _getLabelWidth(item.gene_name, this.layout.label_font_size);\n                item.display_range.width = item.display_range.end - item.display_range.start;\n                // Determine label text anchor (default to middle)\n                item.display_range.text_anchor = 'middle';\n                if (item.display_range.width < item.display_range.label_width) {\n                    if (item.start < this.state.start) {\n                        item.display_range.end = item.display_range.start\n                            + item.display_range.label_width\n                            + this.layout.label_font_size;\n                        item.display_range.text_anchor = 'start';\n                    } else if (item.end > this.state.end) {\n                        item.display_range.start = item.display_range.end\n                            - item.display_range.label_width\n                            - this.layout.label_font_size;\n                        item.display_range.text_anchor = 'end';\n                    } else {\n                        const centered_margin = ((item.display_range.label_width - item.display_range.width) / 2)\n                            + this.layout.label_font_size;\n                        if ((item.display_range.start - centered_margin) < this.parent.x_scale(this.state.start)) {\n                            item.display_range.start = this.parent.x_scale(this.state.start);\n                            item.display_range.end = item.display_range.start + item.display_range.label_width;\n                            item.display_range.text_anchor = 'start';\n                        } else if ((item.display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                            item.display_range.end = this.parent.x_scale(this.state.end);\n                            item.display_range.start = item.display_range.end - item.display_range.label_width;\n                            item.display_range.text_anchor = 'end';\n                        } else {\n                            item.display_range.start -= centered_margin;\n                            item.display_range.end += centered_margin;\n                        }\n                    }\n                    item.display_range.width = item.display_range.end - item.display_range.start;\n                }\n                // Add bounding box padding to the calculated display range start, end, and width\n                item.display_range.start -= this.layout.bounding_box_padding;\n                item.display_range.end   += this.layout.bounding_box_padding;\n                item.display_range.width += 2 * this.layout.bounding_box_padding;\n                // Convert and stash display range values into domain values\n                // (domain: values in terms of the data set, e.g. megabases)\n                item.display_domain = {\n                    start: this.parent.x_scale.invert(item.display_range.start),\n                    end:   this.parent.x_scale.invert(item.display_range.end),\n                };\n                item.display_domain.width = item.display_domain.end - item.display_domain.start;\n\n                // Using display range/domain data generated above cast each gene to tracks such that none overlap\n                item.track = null;\n                let potential_track = 1;\n                while (item.track === null) {\n                    let collision_on_potential_track = false;\n                    this.gene_track_index[potential_track].map((placed_gene) => {\n                        if (!collision_on_potential_track) {\n                            const min_start = Math.min(placed_gene.display_range.start, item.display_range.start);\n                            const max_end = Math.max(placed_gene.display_range.end, item.display_range.end);\n                            if ((max_end - min_start) < (placed_gene.display_range.width + item.display_range.width)) {\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    });\n                    if (!collision_on_potential_track) {\n                        item.track = potential_track;\n                        this.gene_track_index[potential_track].push(item);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks) {\n                            this.tracks = potential_track;\n                            this.gene_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n                // Stash parent references on all genes, transcripts, and exons\n                item.parent = this;\n                item.transcripts.map((d, t) => {\n                    item.transcripts[t].parent = item;\n                    item.transcripts[t].exons.map((d, e) => item.transcripts[t].exons[e].parent = item.transcripts[t]);\n                });\n                return item;\n            });\n    }\n\n    /**\n     * Main render function\n     */\n    render() {\n        const self = this;\n        // Apply filters to only render a specified set of points\n        let track_data = this._applyFilters();\n        track_data = this.assignTracks(track_data);\n        let height;\n\n        // Render gene groups\n        const selection = this.svg.group.selectAll('g.lz-data_layer-genes')\n            .data(track_data, (d) => d.gene_name);\n\n        selection.enter()\n            .append('g')\n            .attr('class', 'lz-data_layer-genes')\n            .merge(selection)\n            .attr('id', (d) => this.getElementId(d))\n            .each(function(gene) {\n                const data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                const bboxes = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-data_layer-genes-statusnode')\n                    .data([gene], (d) => data_layer.getElementStatusNodeId(d));\n\n                height = data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n\n                bboxes.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-data_layer-genes-statusnode')\n                    .merge(bboxes)\n                    .attr('id', (d) => data_layer.getElementStatusNodeId(d))\n                    .attr('rx', data_layer.layout.bounding_box_padding)\n                    .attr('ry', data_layer.layout.bounding_box_padding)\n                    .attr('width', (d) => d.display_range.width)\n                    .attr('height', height)\n                    .attr('x', (d) => d.display_range.start)\n                    .attr('y', (d) => ((d.track - 1) * data_layer.getTrackHeight()));\n\n                bboxes.exit()\n                    .remove();\n\n                // Render gene boundaries\n                const boundaries = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-boundary')\n                    .data([gene], (d) => `${d.gene_name}_boundary`);\n\n                height = 1;\n                boundaries.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-boundary')\n                    .merge(boundaries)\n                    .attr('width', (d) => data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start))\n                    .attr('height', height)\n                    .attr('x', (d) => data_layer.parent.x_scale(d.start))\n                    .attr('y', (d) => {\n                        return ((d.track - 1) * data_layer.getTrackHeight())\n                            + data_layer.layout.bounding_box_padding\n                            + data_layer.layout.label_font_size\n                            + data_layer.layout.label_exon_spacing\n                            + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                    })\n                    .style('fill', (d, i) => self.resolveScalableParameter(self.layout.color, d, i))\n                    .style('stroke', (d, i) => self.resolveScalableParameter(self.layout.stroke, d, i));\n\n                boundaries.exit()\n                    .remove();\n\n                // Render gene labels\n                const labels = d3.select(this).selectAll('text.lz-data_layer-genes.lz-label')\n                    .data([gene], (d) => `${d.gene_name}_label`);\n\n                labels.enter()\n                    .append('text')\n                    .attr('class', 'lz-data_layer-genes lz-label')\n                    .merge(labels)\n                    .attr('text-anchor', (d) => d.display_range.text_anchor)\n                    .text((d) => (d.strand === '+') ? `${d.gene_name}→` : `←${d.gene_name}`)\n                    .style('font-size', gene.parent.layout.label_font_size)\n                    .attr('x', (d) => {\n                        if (d.display_range.text_anchor === 'middle') {\n                            return d.display_range.start + (d.display_range.width / 2);\n                        } else if (d.display_range.text_anchor === 'start') {\n                            return d.display_range.start + data_layer.layout.bounding_box_padding;\n                        } else if (d.display_range.text_anchor === 'end') {\n                            return d.display_range.end - data_layer.layout.bounding_box_padding;\n                        }\n                    })\n                    .attr('y', (d) => ((d.track - 1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                    );\n\n                labels.exit()\n                    .remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                const exons = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-exon')\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, (d) => d.exon_id);\n\n                height = data_layer.layout.exon_height;\n\n                exons.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-exon')\n                    .merge(exons)\n                    .style('fill', (d, i) => self.resolveScalableParameter(self.layout.color, d.parent.parent, i))\n                    .style('stroke', (d, i) => self.resolveScalableParameter(self.layout.stroke, d.parent.parent, i))\n                    .attr('width', (d) => data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start))\n                    .attr('height', height)\n                    .attr('x', (d) => data_layer.parent.x_scale(d.start))\n                    .attr('y', () => {\n                        return ((gene.track - 1) * data_layer.getTrackHeight())\n                            + data_layer.layout.bounding_box_padding\n                            + data_layer.layout.label_font_size\n                            + data_layer.layout.label_exon_spacing;\n                    });\n\n                exons.exit()\n                    .remove();\n\n                // Render gene click area\n                const clickareas = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-clickarea')\n                    .data([gene], (d) => `${d.gene_name}_clickarea`);\n\n                height = data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                clickareas.enter()\n                    .append('rect')\n                    .attr('class', 'lz-data_layer-genes lz-clickarea')\n                    .merge(clickareas)\n                    .attr('id', (d) => `${data_layer.getElementId(d)}_clickarea`)\n                    .attr('rx', data_layer.layout.bounding_box_padding)\n                    .attr('ry', data_layer.layout.bounding_box_padding)\n                    .attr('width', (d) => d.display_range.width)\n                    .attr('height', height)\n                    .attr('x', (d) => d.display_range.start)\n                    .attr('y', (d) => ((d.track - 1) * data_layer.getTrackHeight()));\n\n                // Remove old clickareas as needed\n                clickareas.exit()\n                    .remove();\n            });\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n        // Apply mouse behaviors & events to clickareas\n        this.svg.group\n            .on('click.event_emitter', (element) => this.parent.emit('element_clicked', element, true))\n            .call(this.applyBehaviors.bind(this));\n    }\n\n    _getTooltipPosition(tooltip) {\n        const gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        const gene_bbox = d3.select(`#${gene_bbox_id}`).node().getBBox();\n        return {\n            x_min: this.parent.x_scale(tooltip.data.start),\n            x_max: this.parent.x_scale(tooltip.data.end),\n            y_min: gene_bbox.y,\n            y_max: gene_bbox.y + gene_bbox.height,\n        };\n    }\n}\n\nexport {Genes as default};\n","import * as d3 from 'd3';\n\nimport BaseDataLayer from './base';\nimport {merge} from '../../helpers/layouts';\nimport {STATUSES} from '../constants';\nimport {applyStyles} from '../../helpers/common';\n\n/**\n * @memberof module:LocusZoom_DataLayers~line\n */\nconst default_layout = {\n    style: {\n        fill: 'none',\n        'stroke-width': '2px',\n    },\n    interpolate: 'curveLinear',\n    x_axis: { field: 'x' },\n    y_axis: { field: 'y', axis: 1 },\n    hitarea_width: 5,\n};\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot, representing either a trace or a filled curve. Only one line is drawn per layer used.\n * @alias module:LocusZoom_DataLayers~line\n * @see {@link module:LocusZoom_DataLayers~BaseDataLayer} for additional layout options\n*/\nclass Line extends BaseDataLayer {\n    /**\n     * @param {object} [layout.style] CSS properties to control how the line is drawn\n     * @param {string} [layout.style.fill='none'] Fill color for the area under the curve\n     * @param {string} [layout.style.stroke]\n     * @param {string} [layout.style.stroke-width='2px']\n     * @param {string} [layout.interpolate='curveLinear'] The name of the d3 interpolator to use. This determines how to smooth the line in between data points.\n     * @param {number} [layout.hitarea_width=5] The size of mouse event hitareas to use. If tooltips are not used, hitareas are not very important.\n     */\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n        if (layout.tooltip) {\n            throw new Error('The line / filled curve layer does not support tooltips');\n        }\n        super(...arguments);\n    }\n\n    /**\n     * Implement the main render function\n     */\n    render() {\n        // Several vars needed to be in scope\n        const panel = this.parent;\n        const x_field = this.layout.x_axis.field;\n        const y_field = this.layout.y_axis.field;\n\n        // Join data to the line selection\n        const selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line');\n\n        // Generate the line\n        let line;\n        const x_scale = panel['x_scale'];\n        const y_scale = panel[`y${this.layout.y_axis.axis}_scale`];\n        if (this.layout.style.fill && this.layout.style.fill !== 'none') {\n            // Filled curve: define the line as a filled boundary\n            line = d3.area()\n                .x((d) => +x_scale(d[x_field]))\n                .y0(+y_scale(0))\n                .y1((d) => +y_scale(d[y_field]));\n        } else {\n            // Basic line\n            line = d3.line()\n                .x((d) => +x_scale(d[x_field]))\n                .y((d) => +y_scale(d[y_field]))\n                .curve(d3[this.layout.interpolate]);\n        }\n\n        // Apply line and style\n        selection.merge(this.path)\n            .attr('d', line)\n            .call(applyStyles, this.layout.style);\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n    }\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     */\n    setElementStatus(status, element, toggle) {\n        return this.setAllElementStatus(status, toggle);\n    }\n\n    setAllElementStatus(status, toggle) {\n        // Sanity check\n        if (typeof status == 'undefined' || !STATUSES.adjectives.includes(status)) {\n            throw new Error('Invalid status');\n        }\n        if (typeof this.layer_state.status_flags[status] == 'undefined') {\n            return this;\n        }\n        if (typeof toggle == 'undefined') {\n            toggle = true;\n        }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        let path_class = 'lz-data_layer-line';\n        Object.keys(this.global_statuses).forEach((global_status) => {\n            if (this.global_statuses[global_status]) {\n                path_class += ` lz-data_layer-line-${global_status}`;\n            }\n        });\n        this.path.attr('class', path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit('layout_changed', true);\n        return this;\n    }\n}\n\n/**\n * @memberof module:LocusZoom_DataLayers~orthogonal_line\n */\nconst default_orthogonal_layout = {\n    style: {\n        'stroke': '#D3D3D3',\n        'stroke-width': '3px',\n        'stroke-dasharray': '10px 10px',\n    },\n    orientation: 'horizontal',\n    x_axis: {\n        axis: 1,\n        decoupled: true,\n    },\n    y_axis: {\n        axis: 1,\n        decoupled: true,\n    },\n    tooltip_positioning: 'vertical',\n    offset: 0,\n};\n\n\n/**\n *  Orthogonal Line Data Layer\n *  Draw a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source or fields.\n * @alias module:LocusZoom_DataLayers~orthogonal_line\n * @see {@link module:LocusZoom_DataLayers~BaseDataLayer} for additional layout options\n */\nclass OrthogonalLine extends BaseDataLayer {\n    /**\n     * @param {string} [layout.style.stroke='#D3D3D3']\n     * @param {string} [layout.style.stroke-width='3px']\n     * @param {string} [layout.style.stroke-dasharray='10px 10px']\n     * @param {'horizontal'|'vertical'} [layout.orientation] The orientation of the horizontal line\n     * @param {boolean} [layout.x_axis.decoupled=true] If true, the data in this layer will not influence the x-extent of the panel.\n     * @param {boolean} [layout.y_axis.decoupled=true] If true, the data in this layer will not influence the y-extent of the panel.\n     * @param {'horizontal'|'vertical'} [layout.tooltip_positioning='vertical'] Where to draw the tooltip relative to the mouse pointer.\n     * @param {number} [layout.offset=0] Where the line intercepts the orthogonal axis (eg, the y coordinate for a horizontal line, or x for a vertical line)\n     */\n    constructor(layout) {\n        layout = merge(layout, default_orthogonal_layout);\n        // Require that orientation be \"horizontal\" or \"vertical\" only\n        if (!['horizontal', 'vertical'].includes(layout.orientation)) {\n            layout.orientation = 'horizontal';\n        }\n        super(...arguments);\n\n        // Vars for storing the data generated line\n        /** @member {Array} */\n        this.data = [];\n    }\n\n    getElementId(element) {\n        // There is only one line per datalayer, so this is sufficient.\n        return this.getBaseId();\n    }\n\n    /**\n     * Implement the main render function\n     */\n    render() {\n        // Several vars needed to be in scope\n        const panel = this.parent;\n        const x_scale = 'x_scale';\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n        const x_extent = 'x_extent';\n        const y_extent = `y${this.layout.y_axis.axis}_extent`;\n        const x_range = 'x_range';\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === 'horizontal') {\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset },\n            ];\n        } else if (this.layout.orientation === 'vertical') {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] },\n            ];\n        } else {\n            throw new Error('Unrecognized vertical line type. Must be \"vertical\" or \"horizontal\"');\n        }\n\n        // Join data to the line selection\n        const selection = this.svg.group\n            .selectAll('path.lz-data_layer-line')\n            .data([this.data]);\n\n        // In some cases, a vertical line may overlay a track that has no inherent y-values (extent)\n        //  When that happens, provide a default height based on the current panel dimensions (accounting\n        //      for any resizing that happened after the panel was created)\n        const default_y = [panel.layout.cliparea.height, 0];\n\n        // Generate the line\n        const line = d3.line()\n            .x((d, i) => {\n                const x = +panel[x_scale](d['x']);\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y((d, i) => {\n                const y = +panel[y_scale](d['y']);\n                return isNaN(y) ? default_y[i] : y;\n            });\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append('path')\n            .attr('class', 'lz-data_layer-line')\n            .merge(selection)\n            .attr('d', line)\n            .call(applyStyles, this.layout.style)\n            // Allow the layer to respond to mouseover events and show a tooltip.\n            .call(this.applyBehaviors.bind(this));\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n    }\n\n    _getTooltipPosition(tooltip) {\n        try {\n            const coords = d3.mouse(this.svg.container.node());\n            const x = coords[0];\n            const y = coords[1];\n            return { x_min: x - 1, x_max: x + 1, y_min: y - 1, y_max: y + 1 };\n        } catch (e) {\n            // On redraw, there won't be a mouse event, so skip tooltip repositioning.\n            return null;\n        }\n    }\n\n}\n\n\nexport { Line as line, OrthogonalLine as orthogonal_line };\n","import * as d3 from 'd3';\nimport BaseDataLayer from './base';\nimport {applyStyles} from '../../helpers/common';\nimport {parseFields} from '../../helpers/display';\nimport {merge, nameToSymbol} from '../../helpers/layouts';\nimport {coalesce_scatter_points} from '../../helpers/render';\n\n/**\n * @memberof module:LocusZoom_DataLayers~scatter\n */\nconst default_layout = {\n    point_size: 40,\n    point_shape: 'circle',\n    tooltip_positioning: 'horizontal',\n    color: '#888888',\n    coalesce: {\n        active: false,\n        max_points: 800, // Many plots are 800-2400 px wide, so, more than 1 datum per pixel of average region width\n        // Define the \"region of interest\", like \"bottom half of plot\"; any points outside this region are taken as is\n        //   Values are expressed in terms of data value and will be converted to pixels internally.\n        x_min: '-Infinity',  // JSON doesn't handle some valid JS numbers. Kids, don't get a career in computers.\n        x_max: 'Infinity',\n        y_min: 0,\n        y_max: 3.0,\n        x_gap: 7,\n        y_gap: 7,\n    },\n    fill_opacity: 1,\n    y_axis: {\n        axis: 1,\n    },\n    id_field: 'id',\n};\n\n/**\n * Options that control point-coalescing in scatter plots\n * @typedef {object} module:LocusZoom_DataLayers~scatter~coalesce_options\n * @property {boolean} [active=false] Whether to use this feature. Typically used for GWAS plots, but\n *   not other scatter plots such as PheWAS.\n * @property {number} [max_points=800] Only attempt to reduce DOM size if there are at least this many\n *  points. Many plots are 800-2400 px wide, so, more than 1 datum per pixel of average region width. For more\n *  sparse datasets, all points will be faithfully rendered even if coalesce.active=true.\n * @property {number} [x_min='-Infinity'] Min x coordinate of the region where points will be coalesced\n * @property {number} [x_max='Infinity'] Max x coordinate of the region where points will be coalesced\n * @property {number} [y_min=0] Min y coordinate of the region where points will be coalesced.\n * @property {number} [y_max=3.0] Max y coordinate of the region where points will be coalesced\n * @property {number} [x_gap=7] Max number of pixels between the center of two points that can be\n *   coalesced. For circles, area 40 = radius ~3.5; aim for ~1 diameter distance.\n * @property {number} [y_gap=7]\n */\n\n/**\n * Scatter Data Layer\n * Implements a standard scatter plot\n * @alias module:LocusZoom_DataLayers~scatter\n */\nclass Scatter extends BaseDataLayer {\n    /**\n     * @param {number|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.point_size=40] The size (area) of the point for each datum\n     * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.point_shape='circle'] Shape of the point for each datum. Supported values map to the d3 SVG Symbol Types (i.e.: \"circle\", \"cross\", \"diamond\", \"square\", \"triangle\", \"star\", and \"wye\"), plus \"triangledown\".\n     * @param {string|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.color='#888888'] The color of the point for each datum\n     * @param {module:LocusZoom_DataLayers~scatter~coalesce_options} [layout.coalesce] Options to control whether and how to combine adjacent insignificant (\"within region of interest\") points\n     *   to improve rendering performance. These options are primarily aimed at GWAS region plots. Within a specified\n     *   rectangle area (eg \"insignificant point cutoff\"), we choose only points far enough part to be seen.\n     *   The defaults are specifically tuned for GWAS plots with -log(p) on the y-axis.\n     * @param {number|module:LocusZoom_DataLayers~ScalableParameter[]} [layout.fill_opacity=1] Opacity (0..1) for each datum point\n     * @param {string} [layout.label.text] Similar to tooltips: a template string that can reference datum fields for label text.\n     * @param {number} [layout.label.spacing] Distance (in px) between the label and the center of the datum.\n     * @param {object} [layout.label.lines.style] CSS style options for how the line is rendered\n     * @param {number} [layout.label.filters] Filters that describe which points to label. For performance reasons,\n     *   we recommend labeling only a small subset of most interesting points.\n     * @param {object} [layout.label.style] CSS style options for label text\n     */\n    constructor(layout) {\n        layout = merge(layout, default_layout);\n\n        // Extra default for layout spacing\n        // Not in default layout since that would make the label attribute always present\n        if (layout.label && isNaN(layout.label.spacing)) {\n            layout.label.spacing = 4;\n        }\n        super(...arguments);\n    }\n\n    // Implement tooltip position to be layer-specific\n    _getTooltipPosition(tooltip) {\n        const x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        const y_scale = `y${this.layout.y_axis.axis}_scale`;\n        const y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        const point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        const offset = Math.sqrt(point_size / Math.PI);\n\n        return {\n            x_min: x_center - offset, x_max: x_center + offset,\n            y_min: y_center - offset, y_max: y_center + offset,\n        };\n    }\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    flip_labels() {\n        const data_layer = this;\n        // Base positions on the default point size (which is what resolve scalable param returns if no data provided)\n        const point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        const spacing = data_layer.layout.label.spacing;\n        const handle_lines = Boolean(data_layer.layout.label.lines);\n        const min_x = 2 * spacing;\n        const max_x = this.parent_plot.layout.width - this.parent.layout.margin.left - this.parent.layout.margin.right - (2 * spacing);\n\n        const flip = (dn, dnl) => {\n            const dnx = +dn.attr('x');\n            const text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            let dnlx2;\n            let line_swing;\n            if (handle_lines) {\n                dnlx2 = +dnl.attr('x2');\n                line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style('text-anchor') === 'start') {\n                dn.style('text-anchor', 'end');\n                dn.attr('x', dnx - text_swing);\n                if (handle_lines) {\n                    dnl.attr('x2', dnlx2 - line_swing);\n                }\n            } else {\n                dn.style('text-anchor', 'start');\n                dn.attr('x', dnx + text_swing);\n                if (handle_lines) {\n                    dnl.attr('x2', dnlx2 + line_swing);\n                }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            const a = this;\n            const da = d3.select(a);\n            const dax = +da.attr('x');\n            const abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x) {\n                const dal = handle_lines ? d3.select(data_layer.label_lines.nodes()[i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            const a = this;\n            const da = d3.select(a);\n            if (da.style('text-anchor') === 'end') {\n                return;\n            }\n            let dax = +da.attr('x');\n            const abound = da.node().getBoundingClientRect();\n            const dal = handle_lines ? d3.select(data_layer.label_lines.nodes()[i]) : null;\n            data_layer.label_texts.each(function () {\n                const b = this;\n                const db = d3.select(b);\n                const bbound = db.node().getBoundingClientRect();\n                const collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (collision) {\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr('x');\n                    if (dax - abound.width - spacing < min_x) {\n                        flip(da, dal);\n                    }\n                }\n            });\n        });\n    }\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    separate_labels() {\n        this.seperate_iterations++;\n        const data_layer = this;\n        const alpha = 0.5;\n        if (!this.layout.label) {\n            // Guard against layout changing in the midst of iterative rerender\n            return;\n        }\n        const spacing = this.layout.label.spacing;\n        let again = false;\n        data_layer.label_texts.each(function () {\n            // TODO: O(n2) algorithm; revisit performance?\n            const a = this;\n            const da = d3.select(a);\n            const y1 = da.attr('y');\n            data_layer.label_texts.each(function () {\n                const b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) {\n                    return;\n                }\n                const db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr('text-anchor') !== db.attr('text-anchor')) {\n                    return;\n                }\n                // Determine if the  bounding rects for the two text elements collide\n                const abound = da.node().getBoundingClientRect();\n                const bbound = db.node().getBoundingClientRect();\n                const collision = abound.left < bbound.left + bbound.width + (2 * spacing) &&\n                    abound.left + abound.width + (2 * spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2 * spacing) &&\n                    abound.height + abound.top + (2 * spacing) > bbound.top;\n                if (!collision) {\n                    return;\n                }\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                const y2 = db.attr('y');\n                const sign = abound.top < bbound.top ? 1 : -1;\n                const adjust = sign * alpha;\n                let new_a_y = +y1 - adjust;\n                let new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                const min_y = 2 * spacing;\n                const max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                let delta;\n                if (new_a_y - (abound.height / 2) < min_y) {\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height / 2) < min_y) {\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height / 2) > max_y) {\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height / 2) > max_y) {\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr('y', new_a_y);\n                db.attr('y', new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines) {\n                const label_elements = data_layer.label_texts.nodes();\n                data_layer.label_lines.attr('y2', (d, i) => {\n                    const label_line = d3.select(label_elements[i]);\n                    return label_line.attr('y');\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150) {\n                setTimeout(() => {\n                    this.separate_labels();\n                }, 1);\n            }\n        }\n    }\n\n    // Implement the main render function\n    render() {\n        const data_layer = this;\n        const x_scale = this.parent['x_scale'];\n        const y_scale = this.parent[`y${this.layout.y_axis.axis}_scale`];\n\n        const xcs = Symbol.for('lzX');\n        const ycs = Symbol.for('lzY');\n\n        // Apply filters to only render a specified set of points\n        let track_data = this._applyFilters();\n\n        // Add coordinates before rendering, so we can coalesce\n        track_data.forEach((item) => {\n            let x = x_scale(item[this.layout.x_axis.field]);\n            let y = y_scale(item[this.layout.y_axis.field]);\n            if (isNaN(x)) {\n                x = -1000;\n            }\n            if (isNaN(y)) {\n                y = -1000;\n            }\n            item[xcs] = x;\n            item[ycs] = y;\n        });\n\n        if (this.layout.coalesce.active && track_data.length > this.layout.coalesce.max_points) {\n            let { x_min, x_max, y_min, y_max, x_gap, y_gap } = this.layout.coalesce;\n            // Convert x and y \"significant region\" range from data values to pixels\n            const x_min_px = isFinite(x_min) ? x_scale(+x_min) : -Infinity;\n            const x_max_px = isFinite(x_max) ? x_scale(+x_max) : Infinity;\n            // For y px, we flip the data min/max b/c in SVG coord system +y is down: smaller data y = larger px y\n            const y_min_px = isFinite(y_max) ? y_scale(+y_max) : -Infinity;\n            const y_max_px = isFinite(y_min) ? y_scale(+y_min) : Infinity;\n            track_data = coalesce_scatter_points(track_data, x_min_px, x_max_px, x_gap, y_min_px, y_max_px, y_gap);\n        }\n\n        if (this.layout.label) {\n            let label_data;\n            const filters = data_layer.layout.label.filters || [];\n            if (!filters.length) {\n                label_data = track_data;\n            } else {\n                const func = this.filter.bind(this, filters);\n                label_data = track_data.filter(func);\n            }\n\n            // Render label groups\n            this.label_groups = this.svg.group\n                .selectAll(`g.lz-data_layer-${this.layout.type}-label`)\n                .data(label_data, (d) => `${d[this.layout.id_field]}_label`);\n\n            const style_class = `lz-data_layer-${this.layout.type}-label`;\n            const groups_enter = this.label_groups.enter()\n                .append('g')\n                .attr('class', style_class);\n\n            if (this.label_texts) {\n                this.label_texts.remove();\n            }\n\n            this.label_texts = this.label_groups.merge(groups_enter)\n                .append('text')\n                .text((d) => parseFields(data_layer.layout.label.text || '', d, this.getElementAnnotation(d)))\n                .attr('x', (d) => {\n                    return d[xcs]\n                        + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                        + data_layer.layout.label.spacing;\n                })\n                .attr('y', (d) => d[ycs])\n                .attr('text-anchor', 'start')\n                .call(applyStyles, data_layer.layout.label.style || {});\n\n            // Render label lines\n            if (data_layer.layout.label.lines) {\n                if (this.label_lines) {\n                    this.label_lines.remove();\n                }\n                this.label_lines = this.label_groups.merge(groups_enter)\n                    .append('line')\n                    .attr('x1', (d) => d[xcs])\n                    .attr('y1', (d) => d[ycs])\n                    .attr('x2', (d) => {\n                        return d[xcs]\n                            + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                            + (data_layer.layout.label.spacing / 2);\n                    })\n                    .attr('y2', (d) => d[ycs])\n                    .call(applyStyles, data_layer.layout.label.lines.style || {});\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit()\n                .remove();\n        } else {\n            // If the layout definition has changed (& no longer specifies labels), strip any previously rendered\n            if (this.label_texts) {\n                this.label_texts.remove();\n            }\n            if (this.label_lines) {\n                this.label_lines.remove();\n            }\n            if (this.label_groups) {\n                this.label_groups.remove();\n            }\n        }\n\n        // Generate main scatter data elements\n        const selection = this.svg.group\n            .selectAll(`path.lz-data_layer-${this.layout.type}`)\n            .data(track_data, (d) => d[this.layout.id_field]);\n\n        // Create elements, apply class, ID, and initial position\n        // Generate new values (or functions for them) for position, color, size, and shape\n        const transform = (d) => `translate(${d[xcs]}, ${d[ycs]})`;\n\n        const shape = d3.symbol()\n            .size((d, i) => this.resolveScalableParameter(this.layout.point_size, d, i))\n            .type((d, i) => nameToSymbol(this.resolveScalableParameter(this.layout.point_shape, d, i)));\n\n        const style_class = `lz-data_layer-${this.layout.type}`;\n        selection.enter()\n            .append('path')\n            .attr('class', style_class)\n            .attr('id', (d) => this.getElementId(d))\n            .merge(selection)\n            .attr('transform', transform)\n            .attr('fill', (d, i) => this.resolveScalableParameter(this.layout.color, d, i))\n            .attr('fill-opacity', (d, i) => this.resolveScalableParameter(this.layout.fill_opacity, d, i))\n            .attr('d', shape);\n\n        // Remove old elements as needed\n        selection.exit()\n            .remove();\n\n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label) {\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n        }\n\n        // Apply default event emitters & mouse behaviors. Apply to the container, not per element,\n        // to reduce number of event listeners. These events will apply to both scatter points and labels.\n        this.svg.group\n            .on('click.event_emitter', () => {\n                // D3 doesn't natively support bubbling very well; we need to find the data for the bubbled event\n                const item_data = d3.select(d3.event.target).datum();\n                this.parent.emit('element_clicked', item_data, true);\n            })\n            .call(this.applyBehaviors.bind(this));\n    }\n\n    /**\n     * A new LD reference variant has been selected (usually by clicking within a GWAS scatter plot)\n     *   This event only fires for manually selected variants. It does not fire if the LD reference variant is\n     *   automatically selected (eg by choosing the most significant hit in the region)\n     * @event set_ldrefvar\n     * @property {object} data { ldrefvar } The variant identifier of the LD reference variant\n     * @see event:any_lz_event\n     */\n\n    /**\n     * Method to set a passed element as the LD reference variant in the plot-level state. Triggers a re-render\n     *   so that the plot will update with the new LD information.\n     * This is useful in tooltips, eg the \"make LD reference\" action link for GWAS scatter plots.\n     * @param {object} element The data associated with a particular plot element\n     * @fires event:set_ldrefvar\n     * @return {Promise}\n      */\n    makeLDReference(element) {\n        let ref = null;\n        if (typeof element == 'undefined') {\n            throw new Error('makeLDReference requires one argument of any type');\n        } else if (typeof element == 'object') {\n            if (this.layout.id_field && typeof element[this.layout.id_field] != 'undefined') {\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element['id'] != 'undefined') {\n                ref = element['id'].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent.emit('set_ldrefvar', { ldrefvar: ref }, true);\n        return this.parent_plot.applyState({ ldrefvar: ref });\n    }\n}\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories and color options to be\n *   determined dynamically when data is first loaded.\n * @alias module:LocusZoom_DataLayers~category_scatter\n */\nclass CategoryScatter extends Scatter {\n    /**\n     * @param {string} layout.x_axis.category_field The datum field to use in auto-generating tick marks, color scheme, and point ordering.\n     */\n    constructor(layout) {\n        super(...arguments);\n        /**\n         * Define category names and extents (boundaries) for plotting.\n         * In the form {category_name: [min_x, max_x]}\n         * @private\n         * @member {Object.<String, Number[]>}\n         */\n        this._categories = {};\n    }\n\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData() {\n        const xField = this.layout.x_axis.field || 'x';\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        const category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw new Error(`Layout for ${this.layout.id} must specify category_field`);\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        const sourceData = this.data\n            .sort((a, b) => {\n                const ak = a[category_field];\n                const bk = b[category_field];\n                const av = (typeof ak === 'string') ? ak.toLowerCase() : ak;\n                const bv = (typeof bk === 'string') ? bk.toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);\n            });\n        sourceData.forEach((d, i) => {\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    }\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        const category_field = this.layout.x_axis.category_field;\n        const xField = this.layout.x_axis.field || 'x';\n        const uniqueCategories = {};\n        this.data.forEach((item) => {\n            const category = item[category_field];\n            const x = item[xField];\n            const bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        const categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    }\n\n    /**\n     * This layer relies on defining its own category-based color scheme. Find the correct color config object to\n     *  be modified.\n     * @param [from_source]\n     * @returns {Object} A mutable reference to the layout configuration object\n     * @private\n     */\n    _getColorScale(from_source) {\n        from_source = from_source || this.layout;\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n\n        // For legacy reasons, layouts can specify color as an object (only one way to set color), as opposed to the\n        //  preferred mechanism of array (multiple coloring options)\n        let color_params = from_source.color || []; // Object or scalar, no other options allowed\n        if (Array.isArray(color_params)) {\n            color_params = color_params.find((item) => item.scale_function === 'categorical_bin');\n        }\n        if (!color_params || color_params.scale_function !== 'categorical_bin') {\n            throw new Error('This layer requires that color options be provided as a `categorical_bin`');\n        }\n        return color_params;\n    }\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme(categoryNames) {\n        const colorParams = this._getColorScale(this.layout).parameters;\n        const baseParams = this._getColorScale(this._base_layout).parameters;\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            const parameters_categories_hash = {};\n            baseParams.categories.forEach((category) => {\n                parameters_categories_hash[category] = 1;\n            });\n            if (categoryNames.every((name) => Object.prototype.hasOwnProperty.call(parameters_categories_hash, name))) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        let colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            // Originally from d3v3 category20\n            colors = ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5'];\n        }\n        while (colors.length < categoryNames.length) {\n            colors = colors.concat(colors);\n        }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    }\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks(dimension, config) { // Overrides parent method\n        if (!['x', 'y1', 'y2'].includes(dimension)) {\n            throw new Error('Invalid dimension identifier');\n        }\n        const position = config.position || 'left';\n        if (!['left', 'center', 'right'].includes(position)) {\n            throw new Error('Invalid tick position');\n        }\n\n        const categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === 'y') {\n            return [];\n        }\n\n        if (dimension === 'x') {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            const colors = this._getColorScale(this.layout);\n            const knownCategories = colors.parameters.categories || [];\n            const knownColors = colors.parameters.values || [];\n\n            return Object.keys(categoryBounds).map((category, index) => {\n                const bounds = categoryBounds[category];\n                let xPos;\n\n                switch (position) {\n                case 'left':\n                    xPos = bounds[0];\n                    break;\n                case 'center':\n                    // Center tick under one or many elements as appropriate\n                    // eslint-disable-next-line no-case-declarations\n                    const diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case 'right':\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        'fill': knownColors[knownCategories.indexOf(category)] || '#000000',\n                    },\n                };\n            });\n        }\n    }\n\n    applyCustomDataMethods() {\n        this.data = this._prepareData();\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n}\n\n\nexport { Scatter as scatter, CategoryScatter as category_scatter };\n","/**\n * Helper functions targeted at rendering operations\n * @module\n * @private\n*/\n\n\n/**\n * A very simple function aimed at scatter plots: attempts to coalesce \"low-significance\" SNPs that are too close to\n *  visually distinguish, thus creating a dataset with fewer points that can be rendered more quickly.\n *\n *  This depends on the strong and explicit assumption that points are ordered (typically in x position), so that\n *    nearby points can be grouped by iterating over the data in sequence.\n *\n * @param {Object[]} data Plot data, annotated with calculated `xc` and `yc` symbols for x and y coordinates (in px).\n * @param {Number} x_min The smallest x value of an \"insignificant region\" rectangle\n * @param {Number} x_max The largest x value of an \"insignificant region\" rectangle\n * @param {Number} x_gap Max px distance, in x direction, from the first point in a set, to qualify for grouping\n * @param {Number} y_min The smallest y value of an \"insignificant region\" rectangle\n * @param {Number} y_max The largest y value of an \"insignificant region\" rectangle\n * @param {Number} y_gap Max px distance, in y direction, from the first point in a set, to qualify for grouping\n * @return {Object[]} The simplified dataset with fewer points\n */\nfunction coalesce_scatter_points (data, x_min, x_max, x_gap, y_min, y_max, y_gap) {\n    let final_data = [];\n\n    const xcs = Symbol.for('lzX');\n    const ycs = Symbol.for('lzY');\n\n    let x_start = null;\n    let y_start = null;\n    let current_group = [];\n\n    function _combine () {\n        if (current_group.length) {\n            // If there are points near each other, return the middle item to represent the group\n            // We use a real point (rather than a synthetic average point) to best handle extra fields\n            const item = current_group[Math.floor((current_group.length - 1) / 2)];\n            final_data.push(item);\n        }\n        x_start = y_start = null;\n        current_group = [];\n    }\n\n    function _start_run(x, y, item) {\n        x_start = x;\n        y_start = y;\n        current_group.push(item);\n    }\n\n    data.forEach((item) => {\n        const x = item[xcs];\n        const y = item[ycs];\n\n        const in_combine_region = (x >= x_min && x <= x_max && y >= y_min && y <= y_max);\n        if (item.lz_is_match || !in_combine_region) {\n            // If an item is marked as interesting in some way, always render it explicitly\n            // (and coalesce the preceding points if a run was in progress, to preserve ordering)\n            _combine();\n            final_data.push(item);\n        } else if (x_start === null) {\n            // If not tracking a group, start tracking\n            _start_run(x, y, item);\n        } else {\n            // Otherwise, the decision to render the point depends on whether it is close to a run of other\n            //  insignificant points\n            const near_prior = Math.abs(x - x_start) <= x_gap && Math.abs(y - y_start) <= y_gap;\n\n            if (near_prior) {\n                current_group.push(item);\n            } else {\n                // \"if in combine region, and not near a prior point, coalesce all prior items, then track this point\n                //  as part of the next run that could be grouped\"\n                _combine();\n                _start_run(x, y, item);\n            }\n        }\n    });\n    // At the end of the dataset, check whether any runs of adjacent points were in progress, and coalesce if so\n    _combine();\n\n    return final_data;\n}\n\nexport { coalesce_scatter_points };\n","/**\n * @module\n * @private\n */\nimport {ClassRegistry} from './base';\nimport * as layers from '../components/data_layer';\n\n/**\n * A plugin registry that allows plots to use both pre-defined and user-provided data rendering types (data layers).\n * @alias module:LocusZoom~DataLayers\n * @type {module:registry/base~ClassRegistry}\n */\nconst registry = new ClassRegistry();\nfor (let [name, type] of Object.entries(layers)) {\n    registry.add(name, type);\n}\n\n\nexport default registry;\n","/**\n * Predefined layouts that describe how to draw common types of data, as well as what interactive features to use.\n *  Each plot contains multiple panels (rows), and each row can stack several kinds of data in layers\n *  (eg scatter plot and line of significance). Layouts provide the building blocks to provide interactive experiences\n *  and user-friendly tooltips for common kinds of genetic data.\n *\n * Many of these layouts (like the standard association plot) assume that field names are the same as those provided\n *  in the UMich [portaldev API](https://portaldev.sph.umich.edu/docs/api/v1/). Although layouts can be used on many\n *  kinds of data, it is often less work to write an adapter that uses the same field names, rather than to modify\n *  every single reference to a field anywhere in the layout.\n *\n * See the Layouts Tutorial for details on how to customize nested layouts.\n *\n * @module LocusZoom_Layouts\n */\n\nimport version from '../version';\nimport {deepCopy, merge} from '../helpers/layouts';\n\nconst LZ_SIG_THRESHOLD_LOGP = 7.301; // -log10(.05/1e6)\n\n/*\n * Tooltip Layouts\n */\nconst standard_association_tooltip = {\n    namespace: { 'assoc': 'assoc' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: `<strong>{{{{namespace[assoc]}}variant|htmlescape}}</strong><br>\n        P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation|htmlescape}}</strong><br>\n        Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele|htmlescape}}</strong><br>\n        {{#if {{namespace[ld]}}isrefvar}}<strong>LD Reference Variant</strong>{{#else}}\n        <a href=\"javascript:void(0);\" \n        onclick=\"var data = this.parentNode.__data__;\n                 data.getDataLayer().makeLDReference(data);\"\n                 >Make LD Reference</a>{{/if}}<br>`,\n};\n\nconst standard_association_tooltip_with_label = function() {\n    // Add a special \"toggle label\" button to the base tooltip. This must be used in tandem with a custom layout\n    //   directive (label.filters should check a boolean annotation field called \"lz_show_label\").\n    const base = deepCopy(standard_association_tooltip);\n    base.html += `<a href=\"javascript:void(0);\" \n                  onclick=\"var item = this.parentNode.__data__, layer = item.getDataLayer(); \n                  var current = layer.getElementAnnotation(item, 'lz_show_label'); \n                  layer.setElementAnnotation(item, 'lz_show_label', !current );\n                  layer.parent_plot.applyState();\">{{#if lz_show_label}}Hide{{#else}}Show{{/if}} label</a>`;\n    return base;\n}();\n\nconst standard_genes_tooltip = {\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<h4><strong><i>{{gene_name|htmlescape}}</i></strong></h4>'\n        + 'Gene ID: <a href=\"https://useast.ensembl.org/homo_sapiens/Gene/Summary?g={{gene_id|htmlescape}}&db=core\" target=\"_blank\" rel=\"noopener\">{{gene_id|htmlescape}}</a><br>'\n        + 'Transcript ID: <strong>{{transcript_id|htmlescape}}</strong><br>'\n        + '{{#if pLI}}<table>'\n        + '<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>'\n        + '<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{obs_syn}}</td><td>z = {{syn_z}}<br>o/e = {{oe_syn}} ({{oe_syn_lower}} - {{oe_syn_upper}})</td></tr>'\n        + '<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{obs_mis}}</td><td>z = {{mis_z}}<br>o/e = {{oe_mis}} ({{oe_mis_lower}} - {{oe_mis_upper}})</td></tr>'\n        + '<tr><td>pLoF</td><td>{{exp_lof}}</td><td>{{obs_lof}}</td><td>pLI = {{pLI}}<br>o/e = {{oe_lof}} ({{oe_lof_lower}} - {{oe_lof_upper}})</td></tr>'\n        + '</table><br>{{/if}}'\n        + '<a href=\"https://gnomad.broadinstitute.org/gene/{{gene_id|htmlescape}}\" target=\"_blank\" rel=\"noopener\">More data on gnomAD</a>',\n};\n\nconst catalog_variant_tooltip = {\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    html: '<strong>{{{{namespace[catalog]}}variant|htmlescape}}</strong><br>'\n        + 'Catalog entries: <strong>{{n_catalog_matches|htmlescape}}</strong><br>'\n        + 'Top Trait: <strong>{{{{namespace[catalog]}}trait|htmlescape}}</strong><br>'\n        + 'Top P Value: <strong>{{{{namespace[catalog]}}log_pvalue|logtoscinotation}}</strong><br>'\n        // User note: if a different catalog is used, the tooltip will need to be replaced with a different link URL\n        + 'More: <a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">GWAS catalog</a> / <a href=\"https://www.ncbi.nlm.nih.gov/snp/{{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">dbSNP</a>',\n};\n\nconst coaccessibility_tooltip = {\n    namespace: { 'access': 'access' },\n    closable: true,\n    show: { or: ['highlighted', 'selected'] },\n    hide: { and: ['unhighlighted', 'unselected'] },\n    // TODO: Is there a more generic terminology? (eg not every technique is in terms of cis-regulatory element)\n    html: '<strong>Regulatory element</strong><br>' +\n        '{{{{namespace[access]}}start1|htmlescape}}-{{{{namespace[access]}}end1|htmlescape}}<br>' +\n        '<strong>Promoter</strong><br>' +\n        '{{{{namespace[access]}}start2|htmlescape}}-{{{{namespace[access]}}end2|htmlescape}}<br>' +\n        '{{#if {{namespace[access]}}target}}<strong>Target</strong>: {{{{namespace[access]}}target|htmlescape}}<br>{{/if}}' +\n        '<strong>Score</strong>: {{{{namespace[access]}}score|htmlescape}}',\n};\n\n/*\n * Data Layer Layouts: represent specific information given provided data.\n */\n\n/**\n * A horizontal line of GWAS significance at the standard threshold of p=5e-8\n * @name significance\n * @type data_layer\n */\nconst significance_layer = {\n    id: 'significance',\n    type: 'orthogonal_line',\n    tag: 'significance',\n    orientation: 'horizontal',\n    offset: LZ_SIG_THRESHOLD_LOGP,\n};\n\n/**\n * A simple curve representing the genetic recombination rate, drawn from the UM API\n * @name recomb_rate\n * @type data_layer\n */\nconst recomb_rate_layer = {\n    namespace: { 'recomb': 'recomb' },\n    id: 'recombrate',\n    type: 'line',\n    tag: 'recombination',\n    fields: ['{{namespace[recomb]}}position', '{{namespace[recomb]}}recomb_rate'],\n    z_index: 1,\n    style: {\n        'stroke': '#0000FF',\n        'stroke-width': '1.5px',\n    },\n    x_axis: {\n        field: '{{namespace[recomb]}}position',\n    },\n    y_axis: {\n        axis: 2,\n        field: '{{namespace[recomb]}}recomb_rate',\n        floor: 0,\n        ceiling: 100,\n    },\n};\n\n/**\n * A scatter plot of GWAS association summary statistics, with preset field names matching the UM portaldev api\n * @name association_pvalues\n * @type data_layer\n */\nconst association_pvalues_layer = {\n    namespace: { 'assoc': 'assoc', 'ld': 'ld' },\n    id: 'associationpvalues',\n    type: 'scatter',\n    tag: 'association',\n    fields: ['{{namespace[assoc]}}variant', '{{namespace[assoc]}}position', '{{namespace[assoc]}}log_pvalue', '{{namespace[assoc]}}log_pvalue|logtoscinotation', '{{namespace[assoc]}}ref_allele', '{{namespace[ld]}}state', '{{namespace[ld]}}isrefvar'],\n    id_field: '{{namespace[assoc]}}variant',\n    coalesce: {\n        active: true,\n    },\n    point_shape: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 'diamond',\n            else: 'circle',\n        },\n    },\n    point_size: {\n        scale_function: 'if',\n        field: '{{namespace[ld]}}isrefvar',\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40,\n        },\n    },\n    color: [\n        {\n            scale_function: 'if',\n            field: '{{namespace[ld]}}isrefvar',\n            parameters: {\n                field_value: 1,\n                then: '#9632b8',\n            },\n        },\n        {\n            scale_function: 'numerical_bin',\n            field: '{{namespace[ld]}}state',\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                // Derived from Google \"Turbo\" colormap, breakpoints [0.05, 0.25, 0.45, 0.65, 0.85]\n                values: ['rgb(70, 54, 153)', 'rgb(38, 188, 225)', 'rgb(110, 254, 104)', 'rgb(248, 195, 42)', 'rgb(219, 61, 17)'],\n            },\n        },\n        '#AAAAAA',\n    ],\n    legend: [\n        { shape: 'diamond', color: '#9632b8', size: 40, label: 'LD Ref Var', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: 'rgb(219, 61, 17)', size: 40, label: '1.0 > r² ≥ 0.8', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: 'rgb(248, 195, 42)', size: 40, label: '0.8 > r² ≥ 0.6', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: 'rgb(110, 254, 104)', size: 40, label: '0.6 > r² ≥ 0.4', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: 'rgb(38, 188, 225)', size: 40, label: '0.4 > r² ≥ 0.2', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: 'rgb(70, 54, 153)', size: 40, label: '0.2 > r² ≥ 0.0', class: 'lz-data_layer-scatter' },\n        { shape: 'circle', color: '#AAAAAA', size: 40, label: 'no r² data', class: 'lz-data_layer-scatter' },\n    ],\n    label: null,\n    z_index: 2,\n    x_axis: {\n        field: '{{namespace[assoc]}}position',\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[assoc]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [0, 10],\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n    },\n    tooltip: deepCopy(standard_association_tooltip),\n};\n\n/**\n * An arc track that shows arcs representing chromatic coaccessibility\n * @name coaccessibility\n * @type data_layer\n */\nconst coaccessibility_layer = {\n    namespace: { 'access': 'access' },\n    id: 'coaccessibility',\n    type: 'arcs',\n    tag: 'coaccessibility',\n    fields: ['{{namespace[access]}}start1', '{{namespace[access]}}end1', '{{namespace[access]}}start2', '{{namespace[access]}}end2', '{{namespace[access]}}id', '{{namespace[access]}}target', '{{namespace[access]}}score'],\n    match: { send: '{{namespace[access]}}target', receive: '{{namespace[access]}}target' },\n    id_field: '{{namespace[access]}}id',\n    filters: [\n        { field: '{{namespace[access]}}score', operator: '!=', value: null },\n    ],\n    color: [\n        {\n            field: 'lz_is_match', // Special field name whose presence triggers custom rendering\n            scale_function: 'if',\n            parameters: {\n                field_value: true,\n                then: '#4285f4',\n            },\n        },\n        {\n            field: 'lz_is_match', // Special field name whose presence triggers custom rendering\n            scale_function: 'if',\n            parameters: {\n                field_value: false,\n                then: '#EAE6E6',\n            },\n        },\n        {\n            scale_function: 'ordinal_cycle',\n            parameters: {\n                values: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5'], // Drawn from d3v3 \"category20\"\n            },\n        },\n    ],\n    x_axis: {\n        field1: '{{namespace[access]}}start1',\n        field2: '{{namespace[access]}}start2',\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[access]}}score',\n        upper_buffer: 0.1,\n        min_extent: [0, 1],\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n    },\n    tooltip: deepCopy(coaccessibility_tooltip),\n};\n\n/**\n * A scatter plot of GWAS summary statistics, with additional tooltip fields showing GWAS catalog annotations\n * @name association_pvalues_catalog\n * @type data_layer\n */\nconst association_pvalues_catalog_layer = function () {\n    // Slightly modify an existing layout\n    let base = deepCopy(association_pvalues_layer);\n    base = merge({ id: 'associationpvaluescatalog', fill_opacity: 0.7 }, base);\n    base.tooltip.html += '{{#if {{namespace[catalog]}}rsid}}<br><a href=\"https://www.ebi.ac.uk/gwas/search?query={{{{namespace[catalog]}}rsid|htmlescape}}\" target=\"_blank\" rel=\"noopener\">See hits in GWAS catalog</a>{{/if}}';\n    base.namespace.catalog = 'catalog';\n    base.fields.push('{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait', '{{namespace[catalog]}}log_pvalue');\n    return base;\n}();\n\n/**\n * A scatter plot of PheWAS pvalues, with preset field names matching the UM Portaldev API\n * @name phewas_pvalues\n * @type data_layer\n */\nconst phewas_pvalues_layer = {\n    namespace: { 'phewas': 'phewas' },\n    id: 'phewaspvalues',\n    type: 'category_scatter',\n    tag: 'phewas',\n    point_shape: 'circle',\n    point_size: 70,\n    tooltip_positioning: 'vertical',\n    id_field: '{{namespace[phewas]}}id',\n    fields: ['{{namespace[phewas]}}id', '{{namespace[phewas]}}log_pvalue', '{{namespace[phewas]}}trait_group', '{{namespace[phewas]}}trait_label'],\n    x_axis: {\n        field: '{{namespace[phewas]}}x',  // Synthetic/derived field added by `category_scatter` layer\n        category_field: '{{namespace[phewas]}}trait_group',\n        lower_buffer: 0.025,\n        upper_buffer: 0.025,\n    },\n    y_axis: {\n        axis: 1,\n        field: '{{namespace[phewas]}}log_pvalue',\n        floor: 0,\n        upper_buffer: 0.15,\n    },\n    color: [{\n        field: '{{namespace[phewas]}}trait_group',\n        scale_function: 'categorical_bin',\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: '#B8B8B8',\n        },\n    }],\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: ['highlighted', 'selected'] },\n        hide: { and: ['unhighlighted', 'unselected'] },\n        html: [\n            '<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>',\n            '<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>',\n            '<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>',\n        ].join(''),\n    },\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n    },\n    label: {\n        text: '{{{{namespace[phewas]}}trait_label}}',\n        spacing: 6,\n        lines: {\n            style: {\n                'stroke-width': '2px',\n                'stroke': '#333333',\n                'stroke-dasharray': '2px 2px',\n            },\n        },\n        filters: [\n            {\n                field: '{{namespace[phewas]}}log_pvalue',\n                operator: '>=',\n                value: 20,\n            },\n        ],\n        style: {\n            'font-size': '14px',\n            'font-weight': 'bold',\n            'fill': '#333333',\n        },\n    },\n};\n\n/**\n * Shows genes in the specified region, with names and formats drawn from the UM Portaldev API and GENCODE datasource\n * @type data_layer\n */\nconst genes_layer = {\n    namespace: { 'gene': 'gene', 'constraint': 'constraint' },\n    id: 'genes',\n    type: 'genes',\n    tag: 'genes',\n    fields: ['{{namespace[gene]}}all', '{{namespace[constraint]}}all'],\n    id_field: 'gene_id',\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n    },\n    tooltip: deepCopy(standard_genes_tooltip),\n};\n\n/**\n * A genes data layer that uses filters to limit what information is shown by default. This layer hides a curated\n *  list of  GENCODE gene_types that are of less interest to most analysts.\n * Often used in tandem with a panel-level toolbar \"show all\" button so that the user can toggle to a full view.\n * @name genes_filtered\n * @type data_layer\n */\nconst genes_layer_filtered = merge({\n    filters: [\n        {\n            field: 'gene_type',\n            operator: 'in',\n            // A manually curated subset of Gencode biotypes, based on user suggestions\n            //  See full list: https://www.gencodegenes.org/human/stats.html\n            // This is approximately intended to cover elements of generally known function, and exclude things\n            //  like pseudogenes.\n            value: [\n                'protein_coding',\n                'IG_C_gene', 'IG_D_gene', 'IG_J_gene', 'IG_V_gene',\n                'TR_C_gene', 'TR_D_gene', 'TR_J_gene', 'TR_V_gene',\n                'rRNA',\n                'Mt_rRNA', 'Mt_tRNA',\n            ],\n        },\n    ],\n}, deepCopy(genes_layer));\n\n/**\n * An annotation / rug track that shows tick marks for each position in which a variant is present in the provided\n *  association data, *and* has a significant claim in the EBI GWAS catalog.\n * @type data_layer\n */\nconst annotation_catalog_layer = {\n    // Identify GWAS hits that are present in the GWAS catalog\n    namespace: { 'assoc': 'assoc', 'catalog': 'catalog' },\n    id: 'annotation_catalog',\n    type: 'annotation_track',\n    tag: 'gwascatalog',\n    id_field: '{{namespace[assoc]}}variant',\n    x_axis: {\n        field: '{{namespace[assoc]}}position',\n    },\n    color: '#0000CC',\n    fields: [\n        '{{namespace[assoc]}}variant', '{{namespace[assoc]}}chromosome', '{{namespace[assoc]}}position',\n        '{{namespace[catalog]}}variant', '{{namespace[catalog]}}rsid', '{{namespace[catalog]}}trait',\n        '{{namespace[catalog]}}log_pvalue', '{{namespace[catalog]}}pos',\n    ],\n    filters: [\n        // Specify which points to show on the track. Any selection must satisfy ALL filters\n        { field: '{{namespace[catalog]}}rsid', operator: '!=', value: null },\n        { field: '{{namespace[catalog]}}log_pvalue', operator: '>', value: LZ_SIG_THRESHOLD_LOGP },\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: 'set', status: 'highlighted' },\n        ],\n        onmouseout: [\n            { action: 'unset', status: 'highlighted' },\n        ],\n        onclick: [\n            { action: 'toggle', status: 'selected', exclusive: true },\n        ],\n    },\n    tooltip: deepCopy(catalog_variant_tooltip),\n    tooltip_positioning: 'top',\n};\n\n/*\n * Individual toolbar buttons\n */\n\n/**\n * A dropdown menu that can be used to control the LD population used with the LDServer Adapter. Population\n *  names are provided for the 1000G dataset that is used by the offical UM LD Server.\n * @name ldlz2_pop_selector\n * @type toolbar_widgets\n */\nconst ldlz2_pop_selector_menu = {\n    // **Note**: this widget is aimed at the LDServer datasource, and the UM 1000G LDServer\n    type: 'set_state',\n    tag: 'ld_population',\n    position: 'right',\n    color: 'blue',\n    button_html: 'LD Population: ',\n    show_selected: true,\n    button_title: 'Select LD Population: ',\n    custom_event_name: 'widget_set_ldpop',\n    state_field: 'ld_pop',\n    // This list below is hardcoded to work with the UMich LDServer, default 1000G populations\n    //  It can be customized to work with other LD servers that specify population differently\n    // https://portaldev.sph.umich.edu/ld/genome_builds/GRCh37/references/1000G/populations\n    options: [\n        { display_name: 'ALL (default)', value: 'ALL' },\n        { display_name: 'AFR', value: 'AFR' },\n        { display_name: 'AMR', value: 'AMR' },\n        { display_name: 'EAS', value: 'EAS' },\n        { display_name: 'EUR', value: 'EUR' },\n        { display_name: 'SAS', value: 'SAS' },\n    ],\n};\n\n/**\n * A dropdown menu that selects which types of genes to show in the plot. The provided options are curated sets of\n *   interesting gene types based on the GENCODE dataset.\n * @type toolbar_widgets\n */\nconst gene_selector_menu = {\n    type: 'display_options',\n    tag: 'gene_filter',\n    custom_event_name: 'widget_gene_filter_choice',\n    position: 'right',\n    color: 'blue',\n    // Below: special config specific to this widget\n    button_html: 'Filter...',\n    button_title: 'Choose which genes to show',\n    layer_name: 'genes',\n    default_config_display_name: 'Coding genes & rRNA',\n    options: [\n        {\n            display_name: 'All features',\n            display: {\n                filters: null,\n            },\n        },\n    ],\n};\n\n/*\n * Toolbar Layouts: Collections of toolbar buttons etc\n */\n\n/**\n * Basic options to remove and reorder panels\n * @name standard_panel\n * @type toolbar\n */\nconst standard_panel_toolbar = {\n    widgets: [\n        {\n            type: 'remove_panel',\n            position: 'right',\n            color: 'red',\n            group_position: 'end',\n        },\n        {\n            type: 'move_panel_up',\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'move_panel_down',\n            position: 'right',\n            group_position: 'start',\n            style: { 'margin-left': '0.75em' },\n        },\n    ],\n};\n\n/**\n * A simple plot toolbar with buttons to download as image\n * @name standard_plot\n * @type toolbar\n */\nconst standard_plot_toolbar = {\n    // Suitable for most any type of plot drawn with LZ. Title and download buttons.\n    widgets: [\n        {\n            type: 'title',\n            title: 'LocusZoom',\n            subtitle: `<a href=\"https://statgen.github.io/locuszoom/\" target=\"_blank\" rel=\"noopener\">v${version}</a>`,\n            position: 'left',\n        },\n        {\n            type: 'download',\n            position: 'right',\n            group_position: 'end',\n        },\n        {\n            type: 'download_png',\n            position: 'right',\n            group_position: 'start',\n        },\n    ],\n};\n\n/**\n * A plot toolbar that adds a button for controlling LD population. This is useful for plots intended to show\n *  GWAS summary stats, which is one of the most common usages of LocusZoom.\n * @type toolbar\n */\nconst standard_association_toolbar = function () {\n    // Suitable for association plots (adds a button for LD data)\n    const base = deepCopy(standard_plot_toolbar);\n    base.widgets.push(deepCopy(ldlz2_pop_selector_menu));\n    return base;\n}();\n\n/**\n * A basic plot toolbar with buttons to scroll sideways or zoom in. Useful for all region-based plots.\n * @name region_nav_plot\n * @type toolbar\n */\nconst region_nav_plot_toolbar = function () {\n    // Generic region nav buttons\n    const base = deepCopy(standard_plot_toolbar);\n    base.widgets.push(\n        {\n            type: 'shift_region',\n            step: 500000,\n            button_html: '>>',\n            position: 'right',\n            group_position: 'end',\n        }, {\n            type: 'shift_region',\n            step: 50000,\n            button_html: '>',\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'zoom_region',\n            step: 0.2,\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'zoom_region',\n            step: -0.2,\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'shift_region',\n            step: -50000,\n            button_html: '<',\n            position: 'right',\n            group_position: 'middle',\n        },\n        {\n            type: 'shift_region',\n            step: -500000,\n            button_html: '<<',\n            position: 'right',\n            group_position: 'start',\n        }\n    );\n    return base;\n}();\n\n/*\n * Panel Layouts\n */\n\n\n/**\n * A panel that describes the most common kind of LocusZoom plot, with line of GWAS significance, recombination rate,\n *  and a scatter plot superimposed.\n * @name association\n * @type panel\n */\nconst association_panel = {\n    id: 'association',\n    tag: 'association',\n    min_height: 200,\n    height: 225,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    toolbar: (function () {\n        const base = deepCopy(standard_panel_toolbar);\n        base.widgets.push({\n            type: 'toggle_legend',\n            position: 'right',\n        });\n        return base;\n    })(),\n    axes: {\n        x: {\n            label: 'Chromosome {{chr}} (Mb)',\n            label_offset: 32,\n            tick_format: 'region',\n            extent: 'state',\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28,\n        },\n        y2: {\n            label: 'Recombination Rate (cM/Mb)',\n            label_offset: 40,\n        },\n    },\n    legend: {\n        orientation: 'vertical',\n        origin: { x: 55, y: 40 },\n        hidden: true,\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    data_layers: [\n        deepCopy(significance_layer),\n        deepCopy(recomb_rate_layer),\n        deepCopy(association_pvalues_layer),\n    ],\n};\n\n/**\n * A panel showing chromatin coaccessibility arcs with some common display options\n * @type panel\n */\nconst coaccessibility_panel = {\n    id: 'coaccessibility',\n    tag: 'coaccessibility',\n    min_height: 150,\n    height: 180,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    toolbar: deepCopy(standard_panel_toolbar),\n    axes: {\n        x: {\n            label: 'Chromosome {{chr}} (Mb)',\n            label_offset: 32,\n            tick_format: 'region',\n            extent: 'state',\n        },\n        y1: {\n            label: 'Score',\n            label_offset: 28,\n            render: false,  // We are mainly concerned with the relative magnitudes: hide y axis to avoid clutter.\n        },\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    data_layers: [\n        deepCopy(coaccessibility_layer),\n    ],\n};\n\n/**\n * A panel showing GWAS summary statistics, plus annotations for connecting it to the EBI GWAS catalog\n * @type panel\n */\nconst association_catalog_panel = function () {\n    let base = deepCopy(association_panel);\n    base = merge({\n        id: 'associationcatalog',\n        namespace: { 'assoc': 'assoc', 'ld': 'ld', 'catalog': 'catalog' }, // Required to resolve display options\n    }, base);\n\n    base.toolbar.widgets.push({\n        type: 'display_options',\n        position: 'right',\n        color: 'blue',\n        // Below: special config specific to this widget\n        button_html: 'Display options...',\n        button_title: 'Control how plot items are displayed',\n\n        layer_name: 'associationpvaluescatalog',\n        default_config_display_name: 'No catalog labels (default)', // display name for the default plot color option (allow user to revert to plot defaults)\n\n        options: [\n            {\n                // First dropdown menu item\n                display_name: 'Label catalog traits',  // Human readable representation of field name\n                display: {  // Specify layout directives that control display of the plot for this option\n                    label: {\n                        text: '{{{{namespace[catalog]}}trait}}',\n                        spacing: 6,\n                        lines: {\n                            style: {\n                                'stroke-width': '2px',\n                                'stroke': '#333333',\n                                'stroke-dasharray': '2px 2px',\n                            },\n                        },\n                        filters: [\n                            // Only label points if they are significant for some trait in the catalog, AND in high LD\n                            //  with the top hit of interest\n                            { field: '{{namespace[catalog]}}trait', operator: '!=', value: null },\n                            { field: '{{namespace[catalog]}}log_pvalue', operator: '>', value: LZ_SIG_THRESHOLD_LOGP },\n                            { field: '{{namespace[ld]}}state', operator: '>', value: 0.4 },\n                        ],\n                        style: {\n                            'font-size': '10px',\n                            'font-weight': 'bold',\n                            'fill': '#333333',\n                        },\n                    },\n                },\n            },\n        ],\n    });\n    base.data_layers = [\n        deepCopy(significance_layer),\n        deepCopy(recomb_rate_layer),\n        deepCopy(association_pvalues_catalog_layer),\n    ];\n    return base;\n}();\n\n/**\n * A panel showing genes in the specified region. This panel lets the user choose which genes are shown.\n * @type panel\n */\nconst genes_panel = {\n    id: 'genes',\n    tag: 'genes',\n    min_height: 150,\n    height: 225,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    toolbar: (function () {\n        const base = deepCopy(standard_panel_toolbar);\n        base.widgets.push(\n            {\n                type: 'resize_to_data',\n                position: 'right',\n                button_html: 'Resize',\n            },\n            deepCopy(gene_selector_menu)\n        );\n        return base;\n    })(),\n    data_layers: [\n        deepCopy(genes_layer_filtered),\n    ],\n};\n\n/**\n * A panel that displays PheWAS scatter plots and automatically generates a color scheme\n * @type panel\n */\nconst phewas_panel = {\n    id: 'phewas',\n    tag: 'phewas',\n    min_height: 300,\n    height: 300,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    'font-weight': 'bold',\n                    'font-size': '11px',\n                    'text-anchor': 'start',\n                },\n                transform: 'rotate(50)',\n                position: 'left',  // Special param recognized by `category_scatter` layers\n            },\n        },\n        y1: {\n            label: '-log10 p-value',\n            label_offset: 28,\n        },\n    },\n    data_layers: [\n        deepCopy(significance_layer),\n        deepCopy(phewas_pvalues_layer),\n    ],\n};\n\n/**\n * A panel that shows a simple annotation track connecting GWAS results\n * @name annotation_catalog\n * @type panel\n */\nconst annotation_catalog_panel = {\n    id: 'annotationcatalog',\n    tag: 'gwascatalog',\n    min_height: 50,\n    height: 50,\n    margin: { top: 25, right: 50, bottom: 10, left: 50 },\n    inner_border: 'rgb(210, 210, 210)',\n    toolbar: deepCopy(standard_panel_toolbar),\n    axes: {\n        x: { extent: 'state', render: false },\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true,\n    },\n    data_layers: [\n        deepCopy(annotation_catalog_layer),\n    ],\n};\n\n/*\n * Plot Layouts\n */\n\n/**\n * Describes how to fetch and draw each part of the most common LocusZoom plot (with field names that reference the portaldev API)\n * @name standard_association\n * @type plot\n */\nconst standard_association_plot = {\n    state: {},\n    width: 800,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    toolbar: standard_association_toolbar,\n    panels: [\n        deepCopy(association_panel),\n        deepCopy(genes_panel),\n    ],\n};\n\n/**\n * A modified version of the standard LocusZoom plot, which adds a track that shows which SNPs in the plot also have claims in the EBI GWAS catalog.\n * @name association_catalog\n * @type plot\n */\nconst association_catalog_plot = {\n    state: {},\n    width: 800,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    toolbar: standard_association_toolbar,\n    panels: [\n        annotation_catalog_panel,\n        association_catalog_panel,\n        genes_panel,\n    ],\n};\n\n/**\n * A PheWAS scatter plot with an additional track showing nearby genes, to put the region in biological context.\n * @name standard_phewas\n * @type plot\n */\nconst standard_phewas_plot = {\n    width: 800,\n    responsive_resize: true,\n    toolbar: standard_plot_toolbar,\n    panels: [\n        deepCopy(phewas_panel),\n        merge({\n            height: 300,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: 'Chromosome {{chr}} (Mb)',\n                    label_offset: 32,\n                    tick_format: 'region',\n                    extent: 'state',\n                },\n            },\n        }, deepCopy(genes_panel)),\n    ],\n    mouse_guide: false,\n};\n\n/**\n * Show chromatin coaccessibility arcs, with additional features that connect these arcs to nearby genes to show regulatory interactions.\n * @name coaccessibility\n * @type plot\n */\nconst coaccessibility_plot = {\n    state: {},\n    width: 800,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    toolbar: deepCopy(standard_plot_toolbar),\n    panels: [\n        deepCopy(coaccessibility_panel),\n        function () {\n            // Take the default genes panel, and add a custom feature to highlight gene tracks based on short name\n            // This is a companion to the \"match\" directive in the coaccessibility panel\n            const base = Object.assign(\n                { height: 270 },\n                deepCopy(genes_panel)\n            );\n            const layer = base.data_layers[0];\n            layer.match = { send: 'gene_name', receive: 'gene_name' };\n            const color_config = [\n                {\n                    field: 'lz_is_match', // Special field name whose presence triggers custom rendering\n                    scale_function: 'if',\n                    parameters: {\n                        field_value: true,\n                        then: '#4285f4',\n                    },\n                },\n                {\n                    field: 'lz_is_match', // Special field name whose presence triggers custom rendering\n                    scale_function: 'if',\n                    parameters: {\n                        field_value: false,\n                        then: '#EAE6E6',\n                    },\n                },\n                '#363696',\n            ];\n            layer.color = color_config;\n            layer.stroke = color_config;\n            return base;\n        }(),\n    ],\n};\n\n\nexport const tooltip = {\n    standard_association: standard_association_tooltip,\n    standard_association_with_label: standard_association_tooltip_with_label,\n    standard_genes: standard_genes_tooltip,\n    catalog_variant: catalog_variant_tooltip,\n    coaccessibility: coaccessibility_tooltip,\n};\n\nexport const toolbar_widgets = {\n    ldlz2_pop_selector: ldlz2_pop_selector_menu,\n    gene_selector_menu,\n};\n\nexport const toolbar = {\n    standard_panel: standard_panel_toolbar,\n    standard_plot: standard_plot_toolbar,\n    standard_association: standard_association_toolbar,\n    region_nav_plot: region_nav_plot_toolbar,\n};\n\nexport const data_layer = {\n    significance: significance_layer,\n    recomb_rate: recomb_rate_layer,\n    association_pvalues: association_pvalues_layer,\n    coaccessibility: coaccessibility_layer,\n    association_pvalues_catalog: association_pvalues_catalog_layer,\n    phewas_pvalues: phewas_pvalues_layer,\n    genes: genes_layer,\n    genes_filtered: genes_layer_filtered,\n    annotation_catalog: annotation_catalog_layer,\n};\n\nexport const panel = {\n    association: association_panel,\n    coaccessibility: coaccessibility_panel,\n    association_catalog: association_catalog_panel,\n    genes: genes_panel,\n    phewas: phewas_panel,\n    annotation_catalog: annotation_catalog_panel,\n};\n\nexport const plot = {\n    standard_association: standard_association_plot,\n    association_catalog: association_catalog_plot,\n    standard_phewas: standard_phewas_plot,\n    coaccessibility: coaccessibility_plot,\n};\n","import {RegistryBase} from './base';\nimport {applyNamespaces, deepCopy, mutate_attrs, merge, query_attrs, renameField} from '../helpers/layouts';\nimport * as layouts from '../layouts';\n\n/**\n * Helper for working with predefined layouts\n *\n * This is part of the public interface with LocusZoom and a major way that users interact to configure plots.\n *\n * Each layout object that is added or retrieved here is a deep copy and totally independent from any other object\n * @public\n * @extends module:registry/base:RegistryBase\n * @inheritDoc\n */\nclass LayoutRegistry extends RegistryBase {\n    // Implemented as a \"registry of registries\"- one lookup each for panels, plots, etc...\n    get(type, name, overrides = {}) {\n        if (!(type && name)) {\n            throw new Error('Must specify both the type and name for the layout desired. See .list() for available options');\n        }\n        // This is a registry of registries. Fetching an item may apply additional custom behaviors, such as\n        //  applying overrides or using namespaces to convert an abstract layout into a concrete one.\n        let base = super.get(type).get(name);\n        base = merge(overrides, base);\n        if (base.unnamespaced) {\n            delete base.unnamespaced;\n            return deepCopy(base);\n        }\n        let default_namespace = '';\n        if (typeof base.namespace == 'string') {\n            default_namespace = base.namespace;\n        } else if (typeof base.namespace == 'object' && Object.keys(base.namespace).length) {\n            if (typeof base.namespace.default != 'undefined') {\n                default_namespace = base.namespace.default;\n            } else {\n                default_namespace = base.namespace[Object.keys(base.namespace)[0]].toString();\n            }\n        }\n        default_namespace += default_namespace.length ? ':' : '';\n        const result = applyNamespaces(base, base.namespace, default_namespace);\n\n        return deepCopy(result);\n    }\n\n    /**\n     * Add a type of layout to the registry\n     * @param {String} type The type of layout to add (plot, panel, data_layer, toolbar, toolbar_widgets, or tooltip)\n     * @param {String} name The name of the layout object to add\n     * @param {Object} item The layout object describing parameters\n     * @param {boolean} override Whether to replace an existing item by that name\n     * @return {*}\n     */\n    add(type, name, item, override = false) {\n        if (!(type && name && item)) {\n            throw new Error('To add a layout, type, name, and item must all be specified');\n        }\n        if (!(typeof item === 'object')) {\n            throw new Error('The configuration to be added must be an object');\n        }\n\n        if (!this.has(type)) {\n            super.add(type, new RegistryBase());\n        }\n        // Ensure that each use of a layout can be modified, by returning a copy is independent\n        const copy = deepCopy(item);\n        return super.get(type).add(name, copy, override);\n    }\n\n    /**\n     * List all available types of layout (eg toolbar, panel, etc). If a specific type name is provided, list the\n     *  layouts for that type of element (\"just predefined panels\").\n     * @param {String} [type] The type of layout (eg toolbar, panel, etc)\n     * @return {String[]|Object}\n     */\n    list(type) {\n        if (!type) {\n            let result = {};\n            for (let [type, contents] of this._items) {\n                result[type] = contents.list();\n            }\n            return result;\n        }\n        return super.get(type).list();\n    }\n\n    /**\n     * Static alias to a helper method. Preserved for backwards compatibility, so that UMD users can access this method.\n     * @static\n     * @private\n     */\n    merge(custom_layout, default_layout) {\n        return merge(custom_layout, default_layout);\n    }\n\n    /**\n     * Static alias to a helper method. Allows renaming fields\n     * @static\n     * @private\n     */\n    renameField() {\n        return renameField(...arguments);\n    }\n\n    /**\n     * Static alias to a helper method. Allows mutating nested layout attributes\n     * @static\n     * @private\n     */\n    mutate_attrs() {\n        return mutate_attrs(...arguments);\n    }\n\n    /**\n     * Static alias to a helper method. Allows mutating nested layout attributes\n     * @static\n     * @private\n     */\n    query_attrs() {\n        return query_attrs(...arguments);\n    }\n}\n\n/**\n * A plugin registry that allows plots to use both pre-defined and user-provided data adapters.\n * @alias module:LocusZoom~Layouts\n * @type {LayoutRegistry}\n */\nconst registry = new LayoutRegistry();\n\nfor (let [type, entries] of Object.entries(layouts)) {\n    for (let [name, config] of Object.entries(entries)) {\n        registry.add(type, name, config);\n    }\n}\n\n\nexport default registry;\n\n// Export base class for unit testing\nexport {LayoutRegistry as _LayoutRegistry};\n","import {RegistryBase} from '../registry/base';\nimport { ADAPTERS } from '../registry';\n\n/**\n * Create and coordinate an ensemble of (namespaced) data adapter instances.\n * This is the mechanism by which users tell a plot how to retrieve data for a specific plot: adapters are created\n *  through this object rather than instantiating directly.\n *\n * @public\n * @alias module:LocusZoom~DataSources\n * @extends module:registry/base~RegistryBase\n * @inheritDoc\n */\nclass DataSources extends RegistryBase {\n    /**\n     * @param {RegistryBase} [registry] Primarily used for unit testing. When creating sources by name, specify where to\n     *  find the registry of known sources.\n     */\n    constructor(registry) {\n        super();\n        // This both acts as a registry (of the instantiated sources for this plot), and references a registry\n        //   (to locate adapter classes by name, when creating from config)\n        this._registry = registry || ADAPTERS;\n    }\n\n    /**\n     * For data sources, there is a special behavior of \"create item from config, then add\"\n     * @param {String} namespace Uniquely identify this datasource\n     * @param {BaseAdapter|Array} item An instantiated datasource, or an array of arguments that can be used to\n     *   create a known datasource type.\n     * @param [override=false] Whether to allow existing sources to be redefined\n     * @return {DataSources} Most registries return the created instance, but this registry returns a reference to\n     *  itself (to support chaining)\n     */\n    add(namespace, item, override = false) {\n        if (this._registry.has(namespace)) {\n            throw new Error(`The namespace ${namespace} is already in use by another source`);\n        }\n\n        if (namespace.match(/[^A-Za-z0-9_]/)) {\n            throw new Error(`Data source namespace names can only contain alphanumeric characters or underscores. Invalid name: ${namespace}`);\n        }\n        if (Array.isArray(item)) {\n            const [type, options] = item;\n            item = this._registry.create(type, options);\n        }\n        // Each datasource in the chain should be aware of its assigned namespace\n        item.source_id = namespace;\n\n        super.add(namespace, item, override);\n        return this;\n    }\n}\n\n\nexport default DataSources;\n","/**\n * Whether imported (ES6 modules) or loaded via script tag (UMD), this module represents\n *  the \"public interface\" via which core LocusZoom features and plugins are exposed for programmatic usage.\n *\n * A library using this file will need to load `locuszoom.css` separately in order for styles to appear.\n *\n * @module LocusZoom\n */\nimport version from './version';\n\nimport {default as DataSources} from './data';\nimport { populate } from './helpers/display';\n\nimport {\n    ADAPTERS as Adapters,\n    DATA_LAYERS as DataLayers,\n    WIDGETS as Widgets,\n    LAYOUTS as Layouts,\n    MATCHERS as MatchFunctions,\n    SCALABLE as ScaleFunctions,\n    TRANSFORMS as TransformationFunctions,\n} from './registry';\n\n\nconst LocusZoom = {\n    version,\n    // Helpers for creating plots- the main public interface for most use cases\n    populate,\n    DataSources,\n    // Registries for plugin system\n    Adapters,\n    DataLayers,\n    Layouts,\n    MatchFunctions,\n    ScaleFunctions,\n    TransformationFunctions,\n    Widgets,\n\n    get KnownDataSources() { // Backwards- compatibility alias\n        console.warn('Deprecation warning: KnownDataSources has been renamed to \"Adapters\"');\n        return Adapters;\n    },\n};\n\n\n/**\n * @callback pluginCallback\n * @param {Object} LocusZoom The global LocusZoom object\n * @param args Any additional arguments passed to LocusZoom.use will be passed to the function when the plugin is loaded\n */\n\n\nconst INSTALLED_PLUGINS = [];\n\n/**\n * @alias module:LocusZoom.use\n * @param {pluginCallback} plugin The plugin should be a module that exports the function as either the default export,\n *  or as a member named \"install\"\n * @param args Additional options to be passed when creating the plugin\n */\nLocusZoom.use = function(plugin, ...args) {\n    // Deliberately similar implementation to Vue.js .use() plugin system\n    if (INSTALLED_PLUGINS.includes(plugin)) {\n        // Avoid double-installation of a plugin\n        return;\n    }\n\n    args.unshift(LocusZoom); // All plugins are passed a reference to LocusZoom object\n    if (typeof plugin.install === 'function') {\n        plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n        plugin.apply(null, args);\n    } else {\n        throw new Error('Plugin must export a function that receives the LocusZoom object as an argument');\n    }\n    INSTALLED_PLUGINS.push(plugin);\n};\n\n\nexport default LocusZoom;\n"],"sourceRoot":""}